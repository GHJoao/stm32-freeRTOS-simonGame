
nucleo64-freertos-usart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005744  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c0  080059c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a40  20000074  08005a3c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ab4  08005a3c  00024ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019017  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003256  00000000  00000000  000390bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003899  00000000  00000000  0003e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014033  00000000  00000000  000421f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097501  00000000  00000000  0005622c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed72d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056bc  00000000  00000000  000ed780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058cc 	.word	0x080058cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080058cc 	.word	0x080058cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fad8 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f826 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f8b8 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f88c 	bl	80006a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058c:	f001 ffee 	bl	800256c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of testTask01 */
  testTask01Handle = osThreadNew(StartTestTask01, NULL, &testTask01_attributes);
 8000590:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <main+0x40>)
 8000592:	2100      	movs	r1, #0
 8000594:	4809      	ldr	r0, [pc, #36]	; (80005bc <main+0x44>)
 8000596:	f002 f833 	bl	8002600 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <main+0x48>)
 800059e:	6013      	str	r3, [r2, #0]

  /* creation of testTask02 */
  testTask02Handle = osThreadNew(StartTestTask02, NULL, &testTask02_attributes);
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <main+0x4c>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4808      	ldr	r0, [pc, #32]	; (80005c8 <main+0x50>)
 80005a6:	f002 f82b 	bl	8002600 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <main+0x54>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b0:	f002 f800 	bl	80025b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x3c>
 80005b6:	bf00      	nop
 80005b8:	08005924 	.word	0x08005924
 80005bc:	080007d9 	.word	0x080007d9
 80005c0:	200049ac 	.word	0x200049ac
 80005c4:	08005948 	.word	0x08005948
 80005c8:	0800080d 	.word	0x0800080d
 80005cc:	200049d0 	.word	0x200049d0

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 fd4c 	bl	800507c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xd0>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000640:	2310      	movs	r3, #16
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000644:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064a:	2304      	movs	r3, #4
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064e:	2304      	movs	r3, #4
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd2c 	bl	80010b4 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000662:	f000 f8ff 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2102      	movs	r1, #2
 8000682:	4618      	mov	r0, r3
 8000684:	f000 ff8e 	bl	80015a4 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 f8e9 	bl	8000864 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART2_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006dc:	f001 fc10 	bl	8001f00 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f8bd 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200049d4 	.word	0x200049d4
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a25      	ldr	r2, [pc, #148]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a1e      	ldr	r2, [pc, #120]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <MX_GPIO_Init+0xd0>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	4812      	ldr	r0, [pc, #72]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000784:	f000 fc7c 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_GPIO_Init+0xd8>)
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_GPIO_Init+0xdc>)
 800079e:	f000 faeb 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a2:	2320      	movs	r3, #32
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_GPIO_Init+0xd4>)
 80007ba:	f000 fadd 	bl	8000d78 <HAL_GPIO_Init>

}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	; 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020000 	.word	0x40020000
 80007d0:	10210000 	.word	0x10210000
 80007d4:	40020800 	.word	0x40020800

080007d8 <StartTestTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTestTask01 */
void StartTestTask01(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  sprintf(msg,"task01");
 80007e0:	4907      	ldr	r1, [pc, #28]	; (8000800 <StartTestTask01+0x28>)
 80007e2:	4808      	ldr	r0, [pc, #32]	; (8000804 <StartTestTask01+0x2c>)
 80007e4:	f004 fc52 	bl	800508c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, 30, 10);
 80007e8:	230a      	movs	r3, #10
 80007ea:	221e      	movs	r2, #30
 80007ec:	4905      	ldr	r1, [pc, #20]	; (8000804 <StartTestTask01+0x2c>)
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <StartTestTask01+0x30>)
 80007f0:	f001 fbd3 	bl	8001f9a <HAL_UART_Transmit>
    osDelay(500);
 80007f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f8:	f001 ff94 	bl	8002724 <osDelay>
  {
 80007fc:	e7f0      	b.n	80007e0 <StartTestTask01+0x8>
 80007fe:	bf00      	nop
 8000800:	080058fc 	.word	0x080058fc
 8000804:	200049b0 	.word	0x200049b0
 8000808:	200049d4 	.word	0x200049d4

0800080c <StartTestTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTestTask02 */
void StartTestTask02(void *argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTestTask02 */
  /* Infinite loop */
  for(;;)
  {
	  sprintf(msg,"task02");
 8000814:	4907      	ldr	r1, [pc, #28]	; (8000834 <StartTestTask02+0x28>)
 8000816:	4808      	ldr	r0, [pc, #32]	; (8000838 <StartTestTask02+0x2c>)
 8000818:	f004 fc38 	bl	800508c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, 30, 10);
 800081c:	230a      	movs	r3, #10
 800081e:	221e      	movs	r2, #30
 8000820:	4905      	ldr	r1, [pc, #20]	; (8000838 <StartTestTask02+0x2c>)
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <StartTestTask02+0x30>)
 8000824:	f001 fbb9 	bl	8001f9a <HAL_UART_Transmit>
    osDelay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f001 ff7a 	bl	8002724 <osDelay>
  {
 8000830:	e7f0      	b.n	8000814 <StartTestTask02+0x8>
 8000832:	bf00      	nop
 8000834:	08005904 	.word	0x08005904
 8000838:	200049b0 	.word	0x200049b0
 800083c:	200049d4 	.word	0x200049d4

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 f98f 	bl	8000b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40000c00 	.word	0x40000c00

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <HAL_MspInit+0x54>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_MspInit+0x54>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	f06f 0001 	mvn.w	r0, #1
 80008b6:	f000 fa35 	bl	8000d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a19      	ldr	r2, [pc, #100]	; (800094c <HAL_UART_MspInit+0x84>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d12b      	bne.n	8000942 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_UART_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_UART_MspInit+0x88>)
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_UART_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_UART_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <HAL_UART_MspInit+0x88>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_UART_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000922:	230c      	movs	r3, #12
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000932:	2307      	movs	r3, #7
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <HAL_UART_MspInit+0x8c>)
 800093e:	f000 fa1b 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40004400 	.word	0x40004400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000

08000958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	2032      	movs	r0, #50	; 0x32
 800096e:	f000 f9d9 	bl	8000d24 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000972:	2032      	movs	r0, #50	; 0x32
 8000974:	f000 f9f2 	bl	8000d5c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_InitTick+0xa4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <HAL_InitTick+0xa4>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_InitTick+0xa4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000994:	f107 0210 	add.w	r2, r7, #16
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fffc 	bl	800199c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009a4:	f000 ffd2 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 80009a8:	4603      	mov	r3, r0
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <HAL_InitTick+0xa8>)
 80009b2:	fba2 2303 	umull	r2, r3, r2, r3
 80009b6:	0c9b      	lsrs	r3, r3, #18
 80009b8:	3b01      	subs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_InitTick+0xac>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <HAL_InitTick+0xb0>)
 80009c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_InitTick+0xac>)
 80009c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_InitTick+0xac>)
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_InitTick+0xac>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_InitTick+0xac>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <HAL_InitTick+0xac>)
 80009de:	f001 f80f 	bl	8001a00 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <HAL_InitTick+0xac>)
 80009ea:	f001 f863 	bl	8001ab4 <HAL_TIM_Base_Start_IT>
 80009ee:	4603      	mov	r3, r0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	431bde83 	.word	0x431bde83
 8000a04:	20004a18 	.word	0x20004a18
 8000a08:	40000c00 	.word	0x40000c00

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM5_IRQHandler+0x10>)
 8000a3e:	f001 f89b 	bl	8001b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20004a18 	.word	0x20004a18

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f004 fac6 	bl	800500c <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20020000 	.word	0x20020000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	20004ab8 	.word	0x20004ab8

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae2:	490e      	ldr	r1, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af8:	4c0b      	ldr	r4, [pc, #44]	; (8000b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b06:	f7ff ffd7 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f004 fa85 	bl	8005018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fd33 	bl	8000578 <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b20:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 8000b24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b28:	20004ab4 	.word	0x20004ab4

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_Init+0x40>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_Init+0x40>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x40>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f8d8 	bl	8000d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fefa 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fe84 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20004a60 	.word	0x20004a60

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20004a60 	.word	0x20004a60

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff4c 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d36:	f7ff ff61 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f7ff ffb1 	bl	8000ca8 <NVIC_EncodePriority>
 8000d46:	4602      	mov	r2, r0
 8000d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff80 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff54 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e159      	b.n	8001048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8148 	bne.w	8001042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a2 	beq.w	8001042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a52      	ldr	r2, [pc, #328]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x202>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_GPIO_Init+0x2f4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x1fe>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_GPIO_Init+0x2f8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a46      	ldr	r2, [pc, #280]	; (8001074 <HAL_GPIO_Init+0x2fc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x1f6>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a45      	ldr	r2, [pc, #276]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x1f2>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_GPIO_Init+0x304>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe8:	4a24      	ldr	r2, [pc, #144]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x304>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001012:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_GPIO_Init+0x304>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_GPIO_Init+0x304>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_GPIO_Init+0x304>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f aea2 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e264      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d075      	beq.n	80011be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d2:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d00c      	beq.n	80010f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010de:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d112      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4b9d      	ldr	r3, [pc, #628]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	4b99      	ldr	r3, [pc, #612]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05b      	beq.n	80011bc <HAL_RCC_OscConfig+0x108>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d157      	bne.n	80011bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e23f      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d106      	bne.n	8001128 <HAL_RCC_OscConfig+0x74>
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a90      	ldr	r2, [pc, #576]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x98>
 8001132:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a8a      	ldr	r2, [pc, #552]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a87      	ldr	r2, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 800114c:	4b84      	ldr	r3, [pc, #528]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a83      	ldr	r2, [pc, #524]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b81      	ldr	r3, [pc, #516]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a80      	ldr	r2, [pc, #512]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fd16 	bl	8000b9c <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fd12 	bl	8000b9c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	; 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e204      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0xc0>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fd02 	bl	8000b9c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fcfe 	bl	8000b9c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1f0      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0xe8>
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d063      	beq.n	8001292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ca:	4b65      	ldr	r3, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d6:	4b62      	ldr	r3, [pc, #392]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d11c      	bne.n	800121c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d116      	bne.n	800121c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x152>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e1c4      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b56      	ldr	r3, [pc, #344]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4952      	ldr	r1, [pc, #328]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	e03a      	b.n	8001292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001224:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <HAL_RCC_OscConfig+0x2b0>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff fcb7 	bl	8000b9c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fcb3 	bl	8000b9c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1a5      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4940      	ldr	r1, [pc, #256]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_RCC_OscConfig+0x2b0>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fc96 	bl	8000b9c <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fc92 	bl	8000b9c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e184      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d030      	beq.n	8001300 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d016      	beq.n	80012d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_RCC_OscConfig+0x2b4>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fc76 	bl	8000b9c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc72 	bl	8000b9c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e164      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x200>
 80012d2:	e015      	b.n	8001300 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x2b4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fc5f 	bl	8000b9c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fc5b 	bl	8000b9c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e14d      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a0 	beq.w	800144e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10f      	bne.n	800133e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133a:	2301      	movs	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_OscConfig+0x2b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d121      	bne.n	800138e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_RCC_OscConfig+0x2b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_RCC_OscConfig+0x2b8>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff fc21 	bl	8000b9c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	e011      	b.n	8001382 <HAL_RCC_OscConfig+0x2ce>
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	42470000 	.word	0x42470000
 8001368:	42470e80 	.word	0x42470e80
 800136c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001370:	f7ff fc14 	bl	8000b9c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e106      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b85      	ldr	r3, [pc, #532]	; (8001598 <HAL_RCC_OscConfig+0x4e4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2f0>
 8001396:	4b81      	ldr	r3, [pc, #516]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a80      	ldr	r2, [pc, #512]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
 80013a2:	e01c      	b.n	80013de <HAL_RCC_OscConfig+0x32a>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x312>
 80013ac:	4b7b      	ldr	r3, [pc, #492]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	4a7a      	ldr	r2, [pc, #488]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6713      	str	r3, [r2, #112]	; 0x70
 80013b8:	4b78      	ldr	r3, [pc, #480]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	4a77      	ldr	r2, [pc, #476]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6713      	str	r3, [r2, #112]	; 0x70
 80013c4:	e00b      	b.n	80013de <HAL_RCC_OscConfig+0x32a>
 80013c6:	4b75      	ldr	r3, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ca:	4a74      	ldr	r2, [pc, #464]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6713      	str	r3, [r2, #112]	; 0x70
 80013d2:	4b72      	ldr	r3, [pc, #456]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d6:	4a71      	ldr	r2, [pc, #452]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d015      	beq.n	8001412 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff fbd9 	bl	8000b9c <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fbd5 	bl	8000b9c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e0c5      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0ee      	beq.n	80013ee <HAL_RCC_OscConfig+0x33a>
 8001410:	e014      	b.n	800143c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fbc3 	bl	8000b9c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fbbf 	bl	8000b9c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e0af      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	4b5a      	ldr	r3, [pc, #360]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d105      	bne.n	800144e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a55      	ldr	r2, [pc, #340]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 8001448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 809b 	beq.w	800158e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001458:	4b50      	ldr	r3, [pc, #320]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b08      	cmp	r3, #8
 8001462:	d05c      	beq.n	800151e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d141      	bne.n	80014f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146c:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_RCC_OscConfig+0x4ec>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb93 	bl	8000b9c <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb8f 	bl	8000b9c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e081      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148c:	4b43      	ldr	r3, [pc, #268]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	019b      	lsls	r3, r3, #6
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041b      	lsls	r3, r3, #16
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	061b      	lsls	r3, r3, #24
 80014bc:	4937      	ldr	r1, [pc, #220]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <HAL_RCC_OscConfig+0x4ec>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb68 	bl	8000b9c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fb64 	bl	8000b9c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e056      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x41c>
 80014ee:	e04e      	b.n	800158e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_RCC_OscConfig+0x4ec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb51 	bl	8000b9c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb4d 	bl	8000b9c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e03f      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x44a>
 800151c:	e037      	b.n	800158e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e032      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_RCC_OscConfig+0x4e8>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d028      	beq.n	800158a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d121      	bne.n	800158a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d11a      	bne.n	800158a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800155a:	4013      	ands	r3, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001560:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001562:	4293      	cmp	r3, r2
 8001564:	d111      	bne.n	800158a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	3b01      	subs	r3, #1
 8001574:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d107      	bne.n	800158a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40007000 	.word	0x40007000
 800159c:	40023800 	.word	0x40023800
 80015a0:	42470060 	.word	0x42470060

080015a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0cc      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d90c      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b65      	ldr	r3, [pc, #404]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a58      	ldr	r2, [pc, #352]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800161a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d044      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d119      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	2b03      	cmp	r3, #3
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e06f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e067      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4934      	ldr	r1, [pc, #208]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff fa82 	bl	8000b9c <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff fa7e 	bl	8000b9c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e04f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d20c      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f821 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f904 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00
 8001760:	40023800 	.word	0x40023800
 8001764:	0800596c 	.word	0x0800596c
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001788:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d00d      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001794:	2b08      	cmp	r3, #8
 8001796:	f200 80bd 	bhi.w	8001914 <HAL_RCC_GetSysClockFreq+0x1a4>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x34>
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x3a>
 80017a2:	e0b7      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017a6:	60bb      	str	r3, [r7, #8]
       break;
 80017a8:	e0b7      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017aa:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017ac:	60bb      	str	r3, [r7, #8]
      break;
 80017ae:	e0b4      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b0:	4b5d      	ldr	r3, [pc, #372]	; (8001928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ba:	4b5b      	ldr	r3, [pc, #364]	; (8001928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d04d      	beq.n	8001862 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c6:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	099b      	lsrs	r3, r3, #6
 80017cc:	461a      	mov	r2, r3
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	ea02 0800 	and.w	r8, r2, r0
 80017de:	ea03 0901 	and.w	r9, r3, r1
 80017e2:	4640      	mov	r0, r8
 80017e4:	4649      	mov	r1, r9
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	014b      	lsls	r3, r1, #5
 80017f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017f4:	0142      	lsls	r2, r0, #5
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	ebb0 0008 	subs.w	r0, r0, r8
 80017fe:	eb61 0109 	sbc.w	r1, r1, r9
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	018b      	lsls	r3, r1, #6
 800180c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001810:	0182      	lsls	r2, r0, #6
 8001812:	1a12      	subs	r2, r2, r0
 8001814:	eb63 0301 	sbc.w	r3, r3, r1
 8001818:	f04f 0000 	mov.w	r0, #0
 800181c:	f04f 0100 	mov.w	r1, #0
 8001820:	00d9      	lsls	r1, r3, #3
 8001822:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001826:	00d0      	lsls	r0, r2, #3
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	eb12 0208 	adds.w	r2, r2, r8
 8001830:	eb43 0309 	adc.w	r3, r3, r9
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	0259      	lsls	r1, r3, #9
 800183e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001842:	0250      	lsls	r0, r2, #9
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	461a      	mov	r2, r3
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f7fe fd14 	bl	8000280 <__aeabi_uldivmod>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4613      	mov	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e04a      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	461a      	mov	r2, r3
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	ea02 0400 	and.w	r4, r2, r0
 800187a:	ea03 0501 	and.w	r5, r3, r1
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	014b      	lsls	r3, r1, #5
 800188c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001890:	0142      	lsls	r2, r0, #5
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	1b00      	subs	r0, r0, r4
 8001898:	eb61 0105 	sbc.w	r1, r1, r5
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	018b      	lsls	r3, r1, #6
 80018a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018aa:	0182      	lsls	r2, r0, #6
 80018ac:	1a12      	subs	r2, r2, r0
 80018ae:	eb63 0301 	sbc.w	r3, r3, r1
 80018b2:	f04f 0000 	mov.w	r0, #0
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	00d9      	lsls	r1, r3, #3
 80018bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018c0:	00d0      	lsls	r0, r2, #3
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	1912      	adds	r2, r2, r4
 80018c8:	eb45 0303 	adc.w	r3, r5, r3
 80018cc:	f04f 0000 	mov.w	r0, #0
 80018d0:	f04f 0100 	mov.w	r1, #0
 80018d4:	0299      	lsls	r1, r3, #10
 80018d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018da:	0290      	lsls	r0, r2, #10
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	f7fe fcc8 	bl	8000280 <__aeabi_uldivmod>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4613      	mov	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	3301      	adds	r3, #1
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	60bb      	str	r3, [r7, #8]
      break;
 8001912:	e002      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001916:	60bb      	str	r3, [r7, #8]
      break;
 8001918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191a:	68bb      	ldr	r3, [r7, #8]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	00f42400 	.word	0x00f42400
 8001930:	007a1200 	.word	0x007a1200

08001934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_RCC_GetHCLKFreq+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff0 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0a9b      	lsrs	r3, r3, #10
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	0800597c 	.word	0x0800597c

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffdc 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0b5b      	lsrs	r3, r3, #13
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	0800597c 	.word	0x0800597c

0800199c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220f      	movs	r2, #15
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_GetClockConfig+0x60>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0207 	and.w	r2, r3, #7
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e041      	b.n	8001a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f839 	bl	8001a9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f000 f9ca 	bl	8001dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d001      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e044      	b.n	8001b56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_TIM_Base_Start_IT+0xb0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af6:	d013      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_TIM_Base_Start_IT+0xb4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_TIM_Base_Start_IT+0xb8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d111      	bne.n	8001b44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d010      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b42:	e007      	b.n	8001b54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40010000 	.word	0x40010000
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	40000c00 	.word	0x40000c00
 8001b74:	40014000 	.word	0x40014000

08001b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0202 	mvn.w	r2, #2
 8001ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8ee 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8e0 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8f1 	bl	8001db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d122      	bne.n	8001c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d11b      	bne.n	8001c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0204 	mvn.w	r2, #4
 8001bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8c4 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8b6 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8c7 	bl	8001db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d122      	bne.n	8001c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d11b      	bne.n	8001c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0208 	mvn.w	r2, #8
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2204      	movs	r2, #4
 8001c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f89a 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f88c 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f89d 	bl	8001db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d122      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d11b      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0210 	mvn.w	r2, #16
 8001ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f870 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8001cbc:	e005      	b.n	8001cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f862 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f873 	bl	8001db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10e      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0201 	mvn.w	r2, #1
 8001cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fda2 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d10e      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d14:	2b80      	cmp	r3, #128	; 0x80
 8001d16:	d107      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8e2 	bl	8001eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	d10e      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d107      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f838 	bl	8001dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d10e      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d107      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0220 	mvn.w	r2, #32
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8ac 	bl	8001ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <TIM_Base_SetConfig+0xe4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00f      	beq.n	8001e10 <TIM_Base_SetConfig+0x38>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df6:	d00b      	beq.n	8001e10 <TIM_Base_SetConfig+0x38>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a31      	ldr	r2, [pc, #196]	; (8001ec0 <TIM_Base_SetConfig+0xe8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <TIM_Base_SetConfig+0x38>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a30      	ldr	r2, [pc, #192]	; (8001ec4 <TIM_Base_SetConfig+0xec>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d003      	beq.n	8001e10 <TIM_Base_SetConfig+0x38>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <TIM_Base_SetConfig+0xf0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d108      	bne.n	8001e22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <TIM_Base_SetConfig+0xe4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01b      	beq.n	8001e62 <TIM_Base_SetConfig+0x8a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d017      	beq.n	8001e62 <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <TIM_Base_SetConfig+0xe8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <TIM_Base_SetConfig+0x8a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <TIM_Base_SetConfig+0xec>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00f      	beq.n	8001e62 <TIM_Base_SetConfig+0x8a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a20      	ldr	r2, [pc, #128]	; (8001ec8 <TIM_Base_SetConfig+0xf0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00b      	beq.n	8001e62 <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <TIM_Base_SetConfig+0xf4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <TIM_Base_SetConfig+0xf8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d003      	beq.n	8001e62 <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <TIM_Base_SetConfig+0xfc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d108      	bne.n	8001e74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <TIM_Base_SetConfig+0xe4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d103      	bne.n	8001ea8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	615a      	str	r2, [r3, #20]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40000800 	.word	0x40000800
 8001ec8:	40000c00 	.word	0x40000c00
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40014400 	.word	0x40014400
 8001ed4:	40014800 	.word	0x40014800

08001ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e03f      	b.n	8001f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fcce 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f905 	bl	8002154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b08a      	sub	sp, #40	; 0x28
 8001f9e:	af02      	add	r7, sp, #8
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d17c      	bne.n	80020b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_UART_Transmit+0x2c>
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e075      	b.n	80020b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_UART_Transmit+0x3e>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e06e      	b.n	80020b6 <HAL_UART_Transmit+0x11c>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fee:	f7fe fdd5 	bl	8000b9c <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002008:	d108      	bne.n	800201c <HAL_UART_Transmit+0x82>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d104      	bne.n	800201c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	e003      	b.n	8002024 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800202c:	e02a      	b.n	8002084 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2200      	movs	r2, #0
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f840 	bl	80020be <UART_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e036      	b.n	80020b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10b      	bne.n	8002066 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800205c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	3302      	adds	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	e007      	b.n	8002076 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3301      	adds	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1cf      	bne.n	800202e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2200      	movs	r2, #0
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f810 	bl	80020be <UART_WaitOnFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e006      	b.n	80020b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
  }
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ce:	e02c      	b.n	800212a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d6:	d028      	beq.n	800212a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <UART_WaitOnFlagUntilTimeout+0x30>
 80020de:	f7fe fd5d 	bl	8000b9c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d21d      	bcs.n	800212a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e00f      	b.n	800214a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4013      	ands	r3, r2
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	429a      	cmp	r2, r3
 8002146:	d0c3      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002158:	b09f      	sub	sp, #124	; 0x7c
 800215a:	af00      	add	r7, sp, #0
 800215c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	ea40 0301 	orr.w	r3, r0, r1
 8002174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	431a      	orrs	r2, r3
 8002180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	431a      	orrs	r2, r3
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4313      	orrs	r3, r2
 800218c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800218e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002198:	f021 010c 	bic.w	r1, r1, #12
 800219c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021a2:	430b      	orrs	r3, r1
 80021a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b2:	6999      	ldr	r1, [r3, #24]
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	ea40 0301 	orr.w	r3, r0, r1
 80021bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4bc5      	ldr	r3, [pc, #788]	; (80024d8 <UART_SetConfig+0x384>)
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d004      	beq.n	80021d2 <UART_SetConfig+0x7e>
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4bc3      	ldr	r3, [pc, #780]	; (80024dc <UART_SetConfig+0x388>)
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d103      	bne.n	80021da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021d2:	f7ff fbcf 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 80021d6:	6778      	str	r0, [r7, #116]	; 0x74
 80021d8:	e002      	b.n	80021e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021da:	f7ff fbb7 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 80021de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e8:	f040 80b6 	bne.w	8002358 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ee:	461c      	mov	r4, r3
 80021f0:	f04f 0500 	mov.w	r5, #0
 80021f4:	4622      	mov	r2, r4
 80021f6:	462b      	mov	r3, r5
 80021f8:	1891      	adds	r1, r2, r2
 80021fa:	6439      	str	r1, [r7, #64]	; 0x40
 80021fc:	415b      	adcs	r3, r3
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002200:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002204:	1912      	adds	r2, r2, r4
 8002206:	eb45 0303 	adc.w	r3, r5, r3
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	00d9      	lsls	r1, r3, #3
 8002214:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002218:	00d0      	lsls	r0, r2, #3
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	1911      	adds	r1, r2, r4
 8002220:	6639      	str	r1, [r7, #96]	; 0x60
 8002222:	416b      	adcs	r3, r5
 8002224:	667b      	str	r3, [r7, #100]	; 0x64
 8002226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	461a      	mov	r2, r3
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	1891      	adds	r1, r2, r2
 8002232:	63b9      	str	r1, [r7, #56]	; 0x38
 8002234:	415b      	adcs	r3, r3
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800223c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002240:	f7fe f81e 	bl	8000280 <__aeabi_uldivmod>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4ba5      	ldr	r3, [pc, #660]	; (80024e0 <UART_SetConfig+0x38c>)
 800224a:	fba3 2302 	umull	r2, r3, r3, r2
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	011e      	lsls	r6, r3, #4
 8002252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002254:	461c      	mov	r4, r3
 8002256:	f04f 0500 	mov.w	r5, #0
 800225a:	4622      	mov	r2, r4
 800225c:	462b      	mov	r3, r5
 800225e:	1891      	adds	r1, r2, r2
 8002260:	6339      	str	r1, [r7, #48]	; 0x30
 8002262:	415b      	adcs	r3, r3
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
 8002266:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800226a:	1912      	adds	r2, r2, r4
 800226c:	eb45 0303 	adc.w	r3, r5, r3
 8002270:	f04f 0000 	mov.w	r0, #0
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	00d9      	lsls	r1, r3, #3
 800227a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800227e:	00d0      	lsls	r0, r2, #3
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	1911      	adds	r1, r2, r4
 8002286:	65b9      	str	r1, [r7, #88]	; 0x58
 8002288:	416b      	adcs	r3, r5
 800228a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800228c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	461a      	mov	r2, r3
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	1891      	adds	r1, r2, r2
 8002298:	62b9      	str	r1, [r7, #40]	; 0x28
 800229a:	415b      	adcs	r3, r3
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80022a6:	f7fd ffeb 	bl	8000280 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4b8c      	ldr	r3, [pc, #560]	; (80024e0 <UART_SetConfig+0x38c>)
 80022b0:	fba3 1302 	umull	r1, r3, r3, r2
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	2164      	movs	r1, #100	; 0x64
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	3332      	adds	r3, #50	; 0x32
 80022c2:	4a87      	ldr	r2, [pc, #540]	; (80024e0 <UART_SetConfig+0x38c>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022d0:	441e      	add	r6, r3
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	4618      	mov	r0, r3
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	1894      	adds	r4, r2, r2
 80022e0:	623c      	str	r4, [r7, #32]
 80022e2:	415b      	adcs	r3, r3
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ea:	1812      	adds	r2, r2, r0
 80022ec:	eb41 0303 	adc.w	r3, r1, r3
 80022f0:	f04f 0400 	mov.w	r4, #0
 80022f4:	f04f 0500 	mov.w	r5, #0
 80022f8:	00dd      	lsls	r5, r3, #3
 80022fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022fe:	00d4      	lsls	r4, r2, #3
 8002300:	4622      	mov	r2, r4
 8002302:	462b      	mov	r3, r5
 8002304:	1814      	adds	r4, r2, r0
 8002306:	653c      	str	r4, [r7, #80]	; 0x50
 8002308:	414b      	adcs	r3, r1
 800230a:	657b      	str	r3, [r7, #84]	; 0x54
 800230c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	461a      	mov	r2, r3
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	1891      	adds	r1, r2, r2
 8002318:	61b9      	str	r1, [r7, #24]
 800231a:	415b      	adcs	r3, r3
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002322:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002326:	f7fd ffab 	bl	8000280 <__aeabi_uldivmod>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4b6c      	ldr	r3, [pc, #432]	; (80024e0 <UART_SetConfig+0x38c>)
 8002330:	fba3 1302 	umull	r1, r3, r3, r2
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	2164      	movs	r1, #100	; 0x64
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	3332      	adds	r3, #50	; 0x32
 8002342:	4a67      	ldr	r2, [pc, #412]	; (80024e0 <UART_SetConfig+0x38c>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	f003 0207 	and.w	r2, r3, #7
 800234e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4432      	add	r2, r6
 8002354:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002356:	e0b9      	b.n	80024cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235a:	461c      	mov	r4, r3
 800235c:	f04f 0500 	mov.w	r5, #0
 8002360:	4622      	mov	r2, r4
 8002362:	462b      	mov	r3, r5
 8002364:	1891      	adds	r1, r2, r2
 8002366:	6139      	str	r1, [r7, #16]
 8002368:	415b      	adcs	r3, r3
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002370:	1912      	adds	r2, r2, r4
 8002372:	eb45 0303 	adc.w	r3, r5, r3
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	00d9      	lsls	r1, r3, #3
 8002380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002384:	00d0      	lsls	r0, r2, #3
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	eb12 0804 	adds.w	r8, r2, r4
 800238e:	eb43 0905 	adc.w	r9, r3, r5
 8002392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	008b      	lsls	r3, r1, #2
 80023a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023aa:	0082      	lsls	r2, r0, #2
 80023ac:	4640      	mov	r0, r8
 80023ae:	4649      	mov	r1, r9
 80023b0:	f7fd ff66 	bl	8000280 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <UART_SetConfig+0x38c>)
 80023ba:	fba3 2302 	umull	r2, r3, r3, r2
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	011e      	lsls	r6, r3, #4
 80023c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c4:	4618      	mov	r0, r3
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	1894      	adds	r4, r2, r2
 80023d0:	60bc      	str	r4, [r7, #8]
 80023d2:	415b      	adcs	r3, r3
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023da:	1812      	adds	r2, r2, r0
 80023dc:	eb41 0303 	adc.w	r3, r1, r3
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	f04f 0500 	mov.w	r5, #0
 80023e8:	00dd      	lsls	r5, r3, #3
 80023ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023ee:	00d4      	lsls	r4, r2, #3
 80023f0:	4622      	mov	r2, r4
 80023f2:	462b      	mov	r3, r5
 80023f4:	1814      	adds	r4, r2, r0
 80023f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80023f8:	414b      	adcs	r3, r1
 80023fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	008b      	lsls	r3, r1, #2
 8002410:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002414:	0082      	lsls	r2, r0, #2
 8002416:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800241a:	f7fd ff31 	bl	8000280 <__aeabi_uldivmod>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <UART_SetConfig+0x38c>)
 8002424:	fba3 1302 	umull	r1, r3, r3, r2
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	2164      	movs	r1, #100	; 0x64
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	3332      	adds	r3, #50	; 0x32
 8002436:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <UART_SetConfig+0x38c>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	441e      	add	r6, r3
 8002444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002446:	4618      	mov	r0, r3
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	1894      	adds	r4, r2, r2
 8002452:	603c      	str	r4, [r7, #0]
 8002454:	415b      	adcs	r3, r3
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800245c:	1812      	adds	r2, r2, r0
 800245e:	eb41 0303 	adc.w	r3, r1, r3
 8002462:	f04f 0400 	mov.w	r4, #0
 8002466:	f04f 0500 	mov.w	r5, #0
 800246a:	00dd      	lsls	r5, r3, #3
 800246c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002470:	00d4      	lsls	r4, r2, #3
 8002472:	4622      	mov	r2, r4
 8002474:	462b      	mov	r3, r5
 8002476:	eb12 0a00 	adds.w	sl, r2, r0
 800247a:	eb43 0b01 	adc.w	fp, r3, r1
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4618      	mov	r0, r3
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	008b      	lsls	r3, r1, #2
 8002492:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002496:	0082      	lsls	r2, r0, #2
 8002498:	4650      	mov	r0, sl
 800249a:	4659      	mov	r1, fp
 800249c:	f7fd fef0 	bl	8000280 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <UART_SetConfig+0x38c>)
 80024a6:	fba3 1302 	umull	r1, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2164      	movs	r1, #100	; 0x64
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	3332      	adds	r3, #50	; 0x32
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <UART_SetConfig+0x38c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4432      	add	r2, r6
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	377c      	adds	r7, #124	; 0x7c
 80024d0:	46bd      	mov	sp, r7
 80024d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024d6:	bf00      	nop
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40011400 	.word	0x40011400
 80024e0:	51eb851f 	.word	0x51eb851f

080024e4 <__NVIC_SetPriority>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db0a      	blt.n	800250e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	490c      	ldr	r1, [pc, #48]	; (8002530 <__NVIC_SetPriority+0x4c>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	440b      	add	r3, r1
 8002508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800250c:	e00a      	b.n	8002524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4908      	ldr	r1, [pc, #32]	; (8002534 <__NVIC_SetPriority+0x50>)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3b04      	subs	r3, #4
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	440b      	add	r3, r1
 8002522:	761a      	strb	r2, [r3, #24]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Handler+0x1c>)
 800253e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002540:	f001 fcfe 	bl	8003f40 <xTaskGetSchedulerState>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800254a:	f002 fae5 	bl	8004b18 <xPortSysTickHandler>
  }
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800255c:	2100      	movs	r1, #0
 800255e:	f06f 0004 	mvn.w	r0, #4
 8002562:	f7ff ffbf 	bl	80024e4 <__NVIC_SetPriority>
#endif
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002572:	f3ef 8305 	mrs	r3, IPSR
 8002576:	603b      	str	r3, [r7, #0]
  return(result);
 8002578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800257e:	f06f 0305 	mvn.w	r3, #5
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	e00c      	b.n	80025a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <osKernelInitialize+0x44>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <osKernelInitialize+0x44>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	e002      	b.n	80025a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000094 	.word	0x20000094

080025b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ba:	f3ef 8305 	mrs	r3, IPSR
 80025be:	603b      	str	r3, [r7, #0]
  return(result);
 80025c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80025c6:	f06f 0305 	mvn.w	r3, #5
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	e010      	b.n	80025f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <osKernelStart+0x48>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d109      	bne.n	80025ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025d6:	f7ff ffbf 	bl	8002558 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <osKernelStart+0x48>)
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025e0:	f001 f866 	bl	80036b0 <vTaskStartScheduler>
      stat = osOK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	e002      	b.n	80025f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025f0:	687b      	ldr	r3, [r7, #4]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000094 	.word	0x20000094

08002600 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b08e      	sub	sp, #56	; 0x38
 8002604:	af04      	add	r7, sp, #16
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002610:	f3ef 8305 	mrs	r3, IPSR
 8002614:	617b      	str	r3, [r7, #20]
  return(result);
 8002616:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002618:	2b00      	cmp	r3, #0
 800261a:	d17e      	bne.n	800271a <osThreadNew+0x11a>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d07b      	beq.n	800271a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002626:	2318      	movs	r3, #24
 8002628:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d045      	beq.n	80026c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <osThreadNew+0x48>
        name = attr->name;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <osThreadNew+0x6e>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b38      	cmp	r3, #56	; 0x38
 8002660:	d805      	bhi.n	800266e <osThreadNew+0x6e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <osThreadNew+0x72>
        return (NULL);
 800266e:	2300      	movs	r3, #0
 8002670:	e054      	b.n	800271c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00e      	beq.n	80026a8 <osThreadNew+0xa8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b5b      	cmp	r3, #91	; 0x5b
 8002690:	d90a      	bls.n	80026a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <osThreadNew+0xa8>
        mem = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e010      	b.n	80026ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10c      	bne.n	80026ca <osThreadNew+0xca>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d108      	bne.n	80026ca <osThreadNew+0xca>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <osThreadNew+0xca>
          mem = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	e001      	b.n	80026ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d110      	bne.n	80026f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026d8:	9202      	str	r2, [sp, #8]
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6a3a      	ldr	r2, [r7, #32]
 80026e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fe0c 	bl	8003304 <xTaskCreateStatic>
 80026ec:	4603      	mov	r3, r0
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e013      	b.n	800271a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d110      	bne.n	800271a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fe57 	bl	80033be <xTaskCreate>
 8002710:	4603      	mov	r3, r0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d001      	beq.n	800271a <osThreadNew+0x11a>
            hTask = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800271a:	693b      	ldr	r3, [r7, #16]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800272c:	f3ef 8305 	mrs	r3, IPSR
 8002730:	60bb      	str	r3, [r7, #8]
  return(result);
 8002732:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <osDelay+0x1c>
    stat = osErrorISR;
 8002738:	f06f 0305 	mvn.w	r3, #5
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e007      	b.n	8002750 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <osDelay+0x2c>
      vTaskDelay(ticks);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 ff7c 	bl	8003648 <vTaskDelay>
    }
  }

  return (stat);
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <vApplicationGetIdleTaskMemory+0x2c>)
 800276c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4a06      	ldr	r2, [pc, #24]	; (800278c <vApplicationGetIdleTaskMemory+0x30>)
 8002772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000098 	.word	0x20000098
 800278c:	200000f4 	.word	0x200000f4

08002790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <vApplicationGetTimerTaskMemory+0x2c>)
 80027a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <vApplicationGetTimerTaskMemory+0x30>)
 80027a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	200002f4 	.word	0x200002f4
 80027c0:	20000350 	.word	0x20000350

080027c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f103 0208 	add.w	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f103 0208 	add.w	r2, r3, #8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f103 0208 	add.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d103      	bne.n	8002886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e00c      	b.n	80028a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3308      	adds	r3, #8
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	e002      	b.n	8002894 <vListInsert+0x2e>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d2f6      	bcs.n	800288e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6852      	ldr	r2, [r2, #4]
 80028f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d103      	bne.n	800290c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002956:	f002 f84d 	bl	80049f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	441a      	add	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	3b01      	subs	r3, #1
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	441a      	add	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d114      	bne.n	80029d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01a      	beq.n	80029ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3310      	adds	r3, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f903 	bl	8003bc4 <xTaskRemoveFromEventList>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <xQueueGenericReset+0xcc>)
 80029c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	e009      	b.n	80029ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3310      	adds	r3, #16
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fef2 	bl	80027c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3324      	adds	r3, #36	; 0x24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff feed 	bl	80027c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029ea:	f002 f833 	bl	8004a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <xQueueGenericCreateStatic+0x52>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <xQueueGenericCreateStatic+0x56>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <xQueueGenericCreateStatic+0x58>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	623b      	str	r3, [r7, #32]
}
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <xQueueGenericCreateStatic+0x7e>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <xQueueGenericCreateStatic+0x82>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <xQueueGenericCreateStatic+0x84>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	61fb      	str	r3, [r7, #28]
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a9a:	2350      	movs	r3, #80	; 0x50
 8002a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d00a      	beq.n	8002aba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61bb      	str	r3, [r7, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002aba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f805 	bl	8002aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3730      	adds	r7, #48	; 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d103      	bne.n	8002b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e002      	b.n	8002b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	69b8      	ldr	r0, [r7, #24]
 8002b1e:	f7ff ff05 	bl	800292c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08e      	sub	sp, #56	; 0x38
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <xQueueGenericSend+0x32>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d103      	bne.n	8002b74 <xQueueGenericSend+0x40>
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <xQueueGenericSend+0x44>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <xQueueGenericSend+0x46>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <xQueueGenericSend+0x60>
	__asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b90:	bf00      	nop
 8002b92:	e7fe      	b.n	8002b92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d103      	bne.n	8002ba2 <xQueueGenericSend+0x6e>
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <xQueueGenericSend+0x72>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueGenericSend+0x74>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	623b      	str	r3, [r7, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bc2:	f001 f9bd 	bl	8003f40 <xTaskGetSchedulerState>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <xQueueGenericSend+0x9e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <xQueueGenericSend+0xa2>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueGenericSend+0xa4>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	61fb      	str	r3, [r7, #28]
}
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bf2:	f001 feff 	bl	80049f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <xQueueGenericSend+0xd4>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d129      	bne.n	8002c5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0e:	f000 fa0b 	bl	8003028 <prvCopyDataToQueue>
 8002c12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	3324      	adds	r3, #36	; 0x24
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 ffcf 	bl	8003bc4 <xTaskRemoveFromEventList>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c2c:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <xQueueGenericSend+0x1f8>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	e00a      	b.n	8002c54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c44:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <xQueueGenericSend+0x1f8>)
 8002c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c54:	f001 fefe 	bl	8004a54 <vPortExitCritical>
				return pdPASS;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e063      	b.n	8002d24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c62:	f001 fef7 	bl	8004a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e05c      	b.n	8002d24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 f809 	bl	8003c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c7e:	f001 fee9 	bl	8004a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c82:	f000 fd7b 	bl	800377c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c86:	f001 feb5 	bl	80049f4 <vPortEnterCritical>
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d103      	bne.n	8002ca0 <xQueueGenericSend+0x16c>
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d103      	bne.n	8002cb6 <xQueueGenericSend+0x182>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cb6:	f001 fecd 	bl	8004a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cba:	1d3a      	adds	r2, r7, #4
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fff8 	bl	8003cb8 <xTaskCheckForTimeOut>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d124      	bne.n	8002d18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd0:	f000 faa2 	bl	8003218 <prvIsQueueFull>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d018      	beq.n	8002d0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	3310      	adds	r3, #16
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 ff1e 	bl	8003b24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cea:	f000 fa2d 	bl	8003148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cee:	f000 fd53 	bl	8003798 <xTaskResumeAll>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f af7c 	bne.w	8002bf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <xQueueGenericSend+0x1f8>)
 8002cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	e772      	b.n	8002bf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d0e:	f000 fa1b 	bl	8003148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d12:	f000 fd41 	bl	8003798 <xTaskResumeAll>
 8002d16:	e76c      	b.n	8002bf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d1a:	f000 fa15 	bl	8003148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d1e:	f000 fd3b 	bl	8003798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3738      	adds	r7, #56	; 0x38
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b090      	sub	sp, #64	; 0x40
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <xQueueGenericSendFromISR+0x3c>
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <xQueueGenericSendFromISR+0x40>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <xQueueGenericSendFromISR+0x42>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d103      	bne.n	8002d9a <xQueueGenericSendFromISR+0x6a>
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <xQueueGenericSendFromISR+0x6e>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <xQueueGenericSendFromISR+0x70>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	623b      	str	r3, [r7, #32]
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dba:	f001 fefd 	bl	8004bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	61fa      	str	r2, [r7, #28]
 8002dd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <xQueueGenericSendFromISR+0xbc>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d12f      	bne.n	8002e4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e02:	f000 f911 	bl	8003028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	d112      	bne.n	8002e36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d016      	beq.n	8002e46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	3324      	adds	r3, #36	; 0x24
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fed1 	bl	8003bc4 <xTaskRemoveFromEventList>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00e      	beq.n	8002e46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e007      	b.n	8002e46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	b25a      	sxtb	r2, r3
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e46:	2301      	movs	r3, #1
 8002e48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e4a:	e001      	b.n	8002e50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3740      	adds	r7, #64	; 0x40
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	; 0x30
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <xQueueReceive+0x30>
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	623b      	str	r3, [r7, #32]
}
 8002e94:	bf00      	nop
 8002e96:	e7fe      	b.n	8002e96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d103      	bne.n	8002ea6 <xQueueReceive+0x3e>
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <xQueueReceive+0x42>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <xQueueReceive+0x44>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueReceive+0x5e>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	61fb      	str	r3, [r7, #28]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ec6:	f001 f83b 	bl	8003f40 <xTaskGetSchedulerState>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <xQueueReceive+0x6e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <xQueueReceive+0x72>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <xQueueReceive+0x74>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <xQueueReceive+0x8e>
	__asm volatile
 8002ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee4:	f383 8811 	msr	BASEPRI, r3
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	61bb      	str	r3, [r7, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	e7fe      	b.n	8002ef4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ef6:	f001 fd7d 	bl	80049f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01f      	beq.n	8002f46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0a:	f000 f8f7 	bl	80030fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00f      	beq.n	8002f3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	3310      	adds	r3, #16
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fe4e 	bl	8003bc4 <xTaskRemoveFromEventList>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <xQueueReceive+0x1bc>)
 8002f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f3e:	f001 fd89 	bl	8004a54 <vPortExitCritical>
				return pdPASS;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e069      	b.n	800301a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d103      	bne.n	8002f54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f4c:	f001 fd82 	bl	8004a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e062      	b.n	800301a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f5a:	f107 0310 	add.w	r3, r7, #16
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fe94 	bl	8003c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f68:	f001 fd74 	bl	8004a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f6c:	f000 fc06 	bl	800377c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f70:	f001 fd40 	bl	80049f4 <vPortEnterCritical>
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f7a:	b25b      	sxtb	r3, r3
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d103      	bne.n	8002f8a <xQueueReceive+0x122>
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f96:	d103      	bne.n	8002fa0 <xQueueReceive+0x138>
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fa0:	f001 fd58 	bl	8004a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fa4:	1d3a      	adds	r2, r7, #4
 8002fa6:	f107 0310 	add.w	r3, r7, #16
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fe83 	bl	8003cb8 <xTaskCheckForTimeOut>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d123      	bne.n	8003000 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fba:	f000 f917 	bl	80031ec <prvIsQueueEmpty>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fda9 	bl	8003b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fd4:	f000 f8b8 	bl	8003148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fd8:	f000 fbde 	bl	8003798 <xTaskResumeAll>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d189      	bne.n	8002ef6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <xQueueReceive+0x1bc>)
 8002fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	e780      	b.n	8002ef6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff6:	f000 f8a7 	bl	8003148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ffa:	f000 fbcd 	bl	8003798 <xTaskResumeAll>
 8002ffe:	e77a      	b.n	8002ef6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003002:	f000 f8a1 	bl	8003148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003006:	f000 fbc7 	bl	8003798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800300a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800300c:	f000 f8ee 	bl	80031ec <prvIsQueueEmpty>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	f43f af6f 	beq.w	8002ef6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800301a:	4618      	mov	r0, r3
 800301c:	3730      	adds	r7, #48	; 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000ed04 	.word	0xe000ed04

08003028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10d      	bne.n	8003062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d14d      	bne.n	80030ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 ff92 	bl	8003f7c <xTaskPriorityDisinherit>
 8003058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	e043      	b.n	80030ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d119      	bne.n	800309c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6858      	ldr	r0, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	461a      	mov	r2, r3
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	f001 fff4 	bl	8005060 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	441a      	add	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d32b      	bcc.n	80030ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	e026      	b.n	80030ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68d8      	ldr	r0, [r3, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	461a      	mov	r2, r3
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	f001 ffda 	bl	8005060 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	425b      	negs	r3, r3
 80030b6:	441a      	add	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d207      	bcs.n	80030d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	425b      	negs	r3, r3
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d105      	bne.n	80030ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030f2:	697b      	ldr	r3, [r7, #20]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d018      	beq.n	8003140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	441a      	add	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	d303      	bcc.n	8003130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68d9      	ldr	r1, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	461a      	mov	r2, r3
 800313a:	6838      	ldr	r0, [r7, #0]
 800313c:	f001 ff90 	bl	8005060 <memcpy>
	}
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003150:	f001 fc50 	bl	80049f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800315a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800315c:	e011      	b.n	8003182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d012      	beq.n	800318c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3324      	adds	r3, #36	; 0x24
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fd2a 	bl	8003bc4 <xTaskRemoveFromEventList>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003176:	f000 fe01 	bl	8003d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	3b01      	subs	r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	dce9      	bgt.n	800315e <prvUnlockQueue+0x16>
 800318a:	e000      	b.n	800318e <prvUnlockQueue+0x46>
					break;
 800318c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003196:	f001 fc5d 	bl	8004a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800319a:	f001 fc2b 	bl	80049f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031a6:	e011      	b.n	80031cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3310      	adds	r3, #16
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fd05 	bl	8003bc4 <xTaskRemoveFromEventList>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031c0:	f000 fddc 	bl	8003d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031c4:	7bbb      	ldrb	r3, [r7, #14]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dce9      	bgt.n	80031a8 <prvUnlockQueue+0x60>
 80031d4:	e000      	b.n	80031d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031e0:	f001 fc38 	bl	8004a54 <vPortExitCritical>
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031f4:	f001 fbfe 	bl	80049f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003200:	2301      	movs	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e001      	b.n	800320a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800320a:	f001 fc23 	bl	8004a54 <vPortExitCritical>

	return xReturn;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003220:	f001 fbe8 	bl	80049f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	429a      	cmp	r2, r3
 800322e:	d102      	bne.n	8003236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e001      	b.n	800323a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800323a:	f001 fc0b 	bl	8004a54 <vPortExitCritical>

	return xReturn;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e014      	b.n	8003282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003258:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <vQueueAddToRegistry+0x50>)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003264:	490c      	ldr	r1, [pc, #48]	; (8003298 <vQueueAddToRegistry+0x50>)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <vQueueAddToRegistry+0x50>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800327a:	e006      	b.n	800328a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b07      	cmp	r3, #7
 8003286:	d9e7      	bls.n	8003258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20004a64 	.word	0x20004a64

0800329c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032ac:	f001 fba2 	bl	80049f4 <vPortEnterCritical>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <vQueueWaitForMessageRestricted+0x2a>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d103      	bne.n	80032dc <vQueueWaitForMessageRestricted+0x40>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032dc:	f001 fbba 	bl	8004a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3324      	adds	r3, #36	; 0x24
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fc3b 	bl	8003b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff ff26 	bl	8003148 <prvUnlockQueue>
	}
 80032fc:	bf00      	nop
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08e      	sub	sp, #56	; 0x38
 8003308:	af04      	add	r7, sp, #16
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	623b      	str	r3, [r7, #32]
}
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <xTaskCreateStatic+0x46>
	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	61fb      	str	r3, [r7, #28]
}
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800334a:	235c      	movs	r3, #92	; 0x5c
 800334c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b5c      	cmp	r3, #92	; 0x5c
 8003352:	d00a      	beq.n	800336a <xTaskCreateStatic+0x66>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61bb      	str	r3, [r7, #24]
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800336a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01e      	beq.n	80033b0 <xTaskCreateStatic+0xac>
 8003372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003380:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800338a:	2300      	movs	r3, #0
 800338c:	9303      	str	r3, [sp, #12]
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	9302      	str	r3, [sp, #8]
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f850 	bl	8003448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033aa:	f000 f8dd 	bl	8003568 <prvAddNewTaskToReadyList>
 80033ae:	e001      	b.n	80033b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033b4:	697b      	ldr	r3, [r7, #20]
	}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3728      	adds	r7, #40	; 0x28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b08c      	sub	sp, #48	; 0x30
 80033c2:	af04      	add	r7, sp, #16
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 fc30 	bl	8004c38 <pvPortMalloc>
 80033d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00e      	beq.n	80033fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033e0:	205c      	movs	r0, #92	; 0x5c
 80033e2:	f001 fc29 	bl	8004c38 <pvPortMalloc>
 80033e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
 80033f4:	e005      	b.n	8003402 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f001 fcea 	bl	8004dd0 <vPortFree>
 80033fc:	e001      	b.n	8003402 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d017      	beq.n	8003438 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	2300      	movs	r3, #0
 8003414:	9303      	str	r3, [sp, #12]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	9302      	str	r3, [sp, #8]
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f80e 	bl	8003448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800342c:	69f8      	ldr	r0, [r7, #28]
 800342e:	f000 f89b 	bl	8003568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003432:	2301      	movs	r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	e002      	b.n	800343e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
 800343c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800343e:	69bb      	ldr	r3, [r7, #24]
	}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	461a      	mov	r2, r3
 8003460:	21a5      	movs	r1, #165	; 0xa5
 8003462:	f001 fe0b 	bl	800507c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003470:	3b01      	subs	r3, #1
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f023 0307 	bic.w	r3, r3, #7
 800347e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	617b      	str	r3, [r7, #20]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01f      	beq.n	80034e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	e012      	b.n	80034d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	7819      	ldrb	r1, [r3, #0]
 80034b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	3334      	adds	r3, #52	; 0x34
 80034bc:	460a      	mov	r2, r1
 80034be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	4413      	add	r3, r2
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d006      	beq.n	80034da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	3301      	adds	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2b0f      	cmp	r3, #15
 80034d6:	d9e9      	bls.n	80034ac <prvInitialiseNewTask+0x64>
 80034d8:	e000      	b.n	80034dc <prvInitialiseNewTask+0x94>
			{
				break;
 80034da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e4:	e003      	b.n	80034ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	2b37      	cmp	r3, #55	; 0x37
 80034f2:	d901      	bls.n	80034f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034f4:	2337      	movs	r3, #55	; 0x37
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003502:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	2200      	movs	r2, #0
 8003508:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff f978 	bl	8002804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	3318      	adds	r3, #24
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f973 	bl	8002804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	69b8      	ldr	r0, [r7, #24]
 8003548:	f001 f928 	bl	800479c <pxPortInitialiseStack>
 800354c:	4602      	mov	r2, r0
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800355e:	bf00      	nop
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003570:	f001 fa40 	bl	80049f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003574:	4b2d      	ldr	r3, [pc, #180]	; (800362c <prvAddNewTaskToReadyList+0xc4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	4a2c      	ldr	r2, [pc, #176]	; (800362c <prvAddNewTaskToReadyList+0xc4>)
 800357c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003586:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <prvAddNewTaskToReadyList+0xc4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d110      	bne.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003594:	f000 fc16 	bl	8003dc4 <prvInitialiseTaskLists>
 8003598:	e00d      	b.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <prvAddNewTaskToReadyList+0xcc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d802      	bhi.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035b0:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035b6:	4b20      	ldr	r3, [pc, #128]	; (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <prvAddNewTaskToReadyList+0xd4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d903      	bls.n	80035dc <prvAddNewTaskToReadyList+0x74>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4a18      	ldr	r2, [pc, #96]	; (800363c <prvAddNewTaskToReadyList+0xd4>)
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <prvAddNewTaskToReadyList+0xd8>)
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f7ff f913 	bl	800281e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035f8:	f001 fa2c 	bl	8004a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <prvAddNewTaskToReadyList+0xcc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	429a      	cmp	r2, r3
 8003610:	d207      	bcs.n	8003622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <prvAddNewTaskToReadyList+0xdc>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000c24 	.word	0x20000c24
 8003630:	20000750 	.word	0x20000750
 8003634:	20000c30 	.word	0x20000c30
 8003638:	20000c40 	.word	0x20000c40
 800363c:	20000c2c 	.word	0x20000c2c
 8003640:	20000754 	.word	0x20000754
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d017      	beq.n	800368a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <vTaskDelay+0x60>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <vTaskDelay+0x30>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	60bb      	str	r3, [r7, #8]
}
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003678:	f000 f880 	bl	800377c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800367c:	2100      	movs	r1, #0
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fcea 	bl	8004058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003684:	f000 f888 	bl	8003798 <xTaskResumeAll>
 8003688:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <vTaskDelay+0x64>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000c4c 	.word	0x20000c4c
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036be:	463a      	mov	r2, r7
 80036c0:	1d39      	adds	r1, r7, #4
 80036c2:	f107 0308 	add.w	r3, r7, #8
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f848 	bl	800275c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036cc:	6839      	ldr	r1, [r7, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	9202      	str	r2, [sp, #8]
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2300      	movs	r3, #0
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2300      	movs	r3, #0
 80036dc:	460a      	mov	r2, r1
 80036de:	4921      	ldr	r1, [pc, #132]	; (8003764 <vTaskStartScheduler+0xb4>)
 80036e0:	4821      	ldr	r0, [pc, #132]	; (8003768 <vTaskStartScheduler+0xb8>)
 80036e2:	f7ff fe0f 	bl	8003304 <xTaskCreateStatic>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a20      	ldr	r2, [pc, #128]	; (800376c <vTaskStartScheduler+0xbc>)
 80036ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036ec:	4b1f      	ldr	r3, [pc, #124]	; (800376c <vTaskStartScheduler+0xbc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036f4:	2301      	movs	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e001      	b.n	80036fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003704:	f000 fcfc 	bl	8004100 <xTimerCreateTimerTask>
 8003708:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d116      	bne.n	800373e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	613b      	str	r3, [r7, #16]
}
 8003722:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <vTaskStartScheduler+0xc0>)
 8003726:	f04f 32ff 	mov.w	r2, #4294967295
 800372a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <vTaskStartScheduler+0xc4>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <vTaskStartScheduler+0xc8>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003738:	f001 f8ba 	bl	80048b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800373c:	e00e      	b.n	800375c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d10a      	bne.n	800375c <vTaskStartScheduler+0xac>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	60fb      	str	r3, [r7, #12]
}
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <vTaskStartScheduler+0xaa>
}
 800375c:	bf00      	nop
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	0800590c 	.word	0x0800590c
 8003768:	08003d95 	.word	0x08003d95
 800376c:	20000c48 	.word	0x20000c48
 8003770:	20000c44 	.word	0x20000c44
 8003774:	20000c30 	.word	0x20000c30
 8003778:	20000c28 	.word	0x20000c28

0800377c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <vTaskSuspendAll+0x18>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	4a03      	ldr	r2, [pc, #12]	; (8003794 <vTaskSuspendAll+0x18>)
 8003788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	20000c4c 	.word	0x20000c4c

08003798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037a6:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <xTaskResumeAll+0x118>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	603b      	str	r3, [r7, #0]
}
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037c4:	f001 f916 	bl	80049f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037c8:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <xTaskResumeAll+0x118>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	4a38      	ldr	r2, [pc, #224]	; (80038b0 <xTaskResumeAll+0x118>)
 80037d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d2:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <xTaskResumeAll+0x118>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d162      	bne.n	80038a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <xTaskResumeAll+0x11c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d05e      	beq.n	80038a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037e2:	e02f      	b.n	8003844 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <xTaskResumeAll+0x120>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3318      	adds	r3, #24
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f871 	bl	80028d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f86c 	bl	80028d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <xTaskResumeAll+0x124>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d903      	bls.n	8003814 <xTaskResumeAll+0x7c>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <xTaskResumeAll+0x124>)
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <xTaskResumeAll+0x128>)
 8003822:	441a      	add	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7fe fff7 	bl	800281e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <xTaskResumeAll+0x12c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <xTaskResumeAll+0x130>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <xTaskResumeAll+0x120>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1cb      	bne.n	80037e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003852:	f000 fb55 	bl	8003f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <xTaskResumeAll+0x134>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003862:	f000 f847 	bl	80038f4 <xTaskIncrementTick>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800386c:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <xTaskResumeAll+0x130>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3b01      	subs	r3, #1
 8003876:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f1      	bne.n	8003862 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <xTaskResumeAll+0x134>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <xTaskResumeAll+0x130>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <xTaskResumeAll+0x138>)
 8003892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038a0:	f001 f8d8 	bl	8004a54 <vPortExitCritical>

	return xAlreadyYielded;
 80038a4:	68bb      	ldr	r3, [r7, #8]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000c4c 	.word	0x20000c4c
 80038b4:	20000c24 	.word	0x20000c24
 80038b8:	20000be4 	.word	0x20000be4
 80038bc:	20000c2c 	.word	0x20000c2c
 80038c0:	20000754 	.word	0x20000754
 80038c4:	20000750 	.word	0x20000750
 80038c8:	20000c38 	.word	0x20000c38
 80038cc:	20000c34 	.word	0x20000c34
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <xTaskGetTickCount+0x1c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038e0:	687b      	ldr	r3, [r7, #4]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000c28 	.word	0x20000c28

080038f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038fe:	4b4f      	ldr	r3, [pc, #316]	; (8003a3c <xTaskIncrementTick+0x148>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 808f 	bne.w	8003a26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003908:	4b4d      	ldr	r3, [pc, #308]	; (8003a40 <xTaskIncrementTick+0x14c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003910:	4a4b      	ldr	r2, [pc, #300]	; (8003a40 <xTaskIncrementTick+0x14c>)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d120      	bne.n	800395e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800391c:	4b49      	ldr	r3, [pc, #292]	; (8003a44 <xTaskIncrementTick+0x150>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <xTaskIncrementTick+0x48>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	603b      	str	r3, [r7, #0]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <xTaskIncrementTick+0x46>
 800393c:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <xTaskIncrementTick+0x150>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	4b41      	ldr	r3, [pc, #260]	; (8003a48 <xTaskIncrementTick+0x154>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3f      	ldr	r2, [pc, #252]	; (8003a44 <xTaskIncrementTick+0x150>)
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <xTaskIncrementTick+0x154>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b3e      	ldr	r3, [pc, #248]	; (8003a4c <xTaskIncrementTick+0x158>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3301      	adds	r3, #1
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <xTaskIncrementTick+0x158>)
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	f000 fad1 	bl	8003f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800395e:	4b3c      	ldr	r3, [pc, #240]	; (8003a50 <xTaskIncrementTick+0x15c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	d349      	bcc.n	80039fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003968:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <xTaskIncrementTick+0x150>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003972:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <xTaskIncrementTick+0x15c>)
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	601a      	str	r2, [r3, #0]
					break;
 800397a:	e03f      	b.n	80039fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800397c:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <xTaskIncrementTick+0x150>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	d203      	bcs.n	800399c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003994:	4a2e      	ldr	r2, [pc, #184]	; (8003a50 <xTaskIncrementTick+0x15c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800399a:	e02f      	b.n	80039fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	3304      	adds	r3, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe ff99 	bl	80028d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3318      	adds	r3, #24
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe ff90 	bl	80028d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <xTaskIncrementTick+0x160>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d903      	bls.n	80039cc <xTaskIncrementTick+0xd8>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <xTaskIncrementTick+0x160>)
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <xTaskIncrementTick+0x164>)
 80039da:	441a      	add	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f7fe ff1b 	bl	800281e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <xTaskIncrementTick+0x168>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d3b8      	bcc.n	8003968 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039f6:	2301      	movs	r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039fa:	e7b5      	b.n	8003968 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <xTaskIncrementTick+0x168>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a02:	4915      	ldr	r1, [pc, #84]	; (8003a58 <xTaskIncrementTick+0x164>)
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d901      	bls.n	8003a18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a14:	2301      	movs	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <xTaskIncrementTick+0x16c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e004      	b.n	8003a30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <xTaskIncrementTick+0x170>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	; (8003a64 <xTaskIncrementTick+0x170>)
 8003a2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a30:	697b      	ldr	r3, [r7, #20]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000c4c 	.word	0x20000c4c
 8003a40:	20000c28 	.word	0x20000c28
 8003a44:	20000bdc 	.word	0x20000bdc
 8003a48:	20000be0 	.word	0x20000be0
 8003a4c:	20000c3c 	.word	0x20000c3c
 8003a50:	20000c44 	.word	0x20000c44
 8003a54:	20000c2c 	.word	0x20000c2c
 8003a58:	20000754 	.word	0x20000754
 8003a5c:	20000750 	.word	0x20000750
 8003a60:	20000c38 	.word	0x20000c38
 8003a64:	20000c34 	.word	0x20000c34

08003a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <vTaskSwitchContext+0xa8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <vTaskSwitchContext+0xac>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a7c:	e041      	b.n	8003b02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a7e:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <vTaskSwitchContext+0xac>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <vTaskSwitchContext+0xb0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e010      	b.n	8003aae <vTaskSwitchContext+0x46>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	607b      	str	r3, [r7, #4]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <vTaskSwitchContext+0x3e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	491b      	ldr	r1, [pc, #108]	; (8003b1c <vTaskSwitchContext+0xb4>)
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0e4      	beq.n	8003a8c <vTaskSwitchContext+0x24>
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <vTaskSwitchContext+0xb4>)
 8003ace:	4413      	add	r3, r2
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d104      	bne.n	8003af2 <vTaskSwitchContext+0x8a>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <vTaskSwitchContext+0xb8>)
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4a06      	ldr	r2, [pc, #24]	; (8003b18 <vTaskSwitchContext+0xb0>)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6013      	str	r3, [r2, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000c4c 	.word	0x20000c4c
 8003b14:	20000c38 	.word	0x20000c38
 8003b18:	20000c2c 	.word	0x20000c2c
 8003b1c:	20000754 	.word	0x20000754
 8003b20:	20000750 	.word	0x20000750

08003b24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	60fb      	str	r3, [r7, #12]
}
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <vTaskPlaceOnEventList+0x44>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fe fe87 	bl	8002866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b58:	2101      	movs	r1, #1
 8003b5a:	6838      	ldr	r0, [r7, #0]
 8003b5c:	f000 fa7c 	bl	8004058 <prvAddCurrentTaskToDelayedList>
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000750 	.word	0x20000750

08003b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	617b      	str	r3, [r7, #20]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7fe fe3e 	bl	800281e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	68b8      	ldr	r0, [r7, #8]
 8003bb2:	f000 fa51 	bl	8004058 <prvAddCurrentTaskToDelayedList>
	}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000750 	.word	0x20000750

08003bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60fb      	str	r3, [r7, #12]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fe6f 	bl	80028d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <xTaskRemoveFromEventList+0xb0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11d      	bne.n	8003c3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fe66 	bl	80028d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <xTaskRemoveFromEventList+0xb4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d903      	bls.n	8003c20 <xTaskRemoveFromEventList+0x5c>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <xTaskRemoveFromEventList+0xb4>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <xTaskRemoveFromEventList+0xb8>)
 8003c2e:	441a      	add	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f7fe fdf1 	bl	800281e <vListInsertEnd>
 8003c3c:	e005      	b.n	8003c4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3318      	adds	r3, #24
 8003c42:	4619      	mov	r1, r3
 8003c44:	480e      	ldr	r0, [pc, #56]	; (8003c80 <xTaskRemoveFromEventList+0xbc>)
 8003c46:	f7fe fdea 	bl	800281e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <xTaskRemoveFromEventList+0xc0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d905      	bls.n	8003c64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <xTaskRemoveFromEventList+0xc4>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e001      	b.n	8003c68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c68:	697b      	ldr	r3, [r7, #20]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000c4c 	.word	0x20000c4c
 8003c78:	20000c2c 	.word	0x20000c2c
 8003c7c:	20000754 	.word	0x20000754
 8003c80:	20000be4 	.word	0x20000be4
 8003c84:	20000750 	.word	0x20000750
 8003c88:	20000c38 	.word	0x20000c38

08003c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <vTaskInternalSetTimeOutState+0x24>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <vTaskInternalSetTimeOutState+0x28>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	605a      	str	r2, [r3, #4]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	20000c3c 	.word	0x20000c3c
 8003cb4:	20000c28 	.word	0x20000c28

08003cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	613b      	str	r3, [r7, #16]
}
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60fb      	str	r3, [r7, #12]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cfa:	f000 fe7b 	bl	80049f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <xTaskCheckForTimeOut+0xbc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d102      	bne.n	8003d1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e023      	b.n	8003d66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <xTaskCheckForTimeOut+0xc0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d007      	beq.n	8003d3a <xTaskCheckForTimeOut+0x82>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d302      	bcc.n	8003d3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	e015      	b.n	8003d66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d20b      	bcs.n	8003d5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff9b 	bl	8003c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e004      	b.n	8003d66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d66:	f000 fe75 	bl	8004a54 <vPortExitCritical>

	return xReturn;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000c28 	.word	0x20000c28
 8003d78:	20000c3c 	.word	0x20000c3c

08003d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <vTaskMissedYield+0x14>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
}
 8003d86:	bf00      	nop
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	20000c38 	.word	0x20000c38

08003d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d9c:	f000 f852 	bl	8003e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <prvIdleTask+0x28>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d9f9      	bls.n	8003d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <prvIdleTask+0x2c>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003db8:	e7f0      	b.n	8003d9c <prvIdleTask+0x8>
 8003dba:	bf00      	nop
 8003dbc:	20000754 	.word	0x20000754
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	e00c      	b.n	8003dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <prvInitialiseTaskLists+0x60>)
 8003ddc:	4413      	add	r3, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fcf0 	bl	80027c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3301      	adds	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b37      	cmp	r3, #55	; 0x37
 8003dee:	d9ef      	bls.n	8003dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003df0:	480d      	ldr	r0, [pc, #52]	; (8003e28 <prvInitialiseTaskLists+0x64>)
 8003df2:	f7fe fce7 	bl	80027c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003df6:	480d      	ldr	r0, [pc, #52]	; (8003e2c <prvInitialiseTaskLists+0x68>)
 8003df8:	f7fe fce4 	bl	80027c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dfc:	480c      	ldr	r0, [pc, #48]	; (8003e30 <prvInitialiseTaskLists+0x6c>)
 8003dfe:	f7fe fce1 	bl	80027c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e02:	480c      	ldr	r0, [pc, #48]	; (8003e34 <prvInitialiseTaskLists+0x70>)
 8003e04:	f7fe fcde 	bl	80027c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e08:	480b      	ldr	r0, [pc, #44]	; (8003e38 <prvInitialiseTaskLists+0x74>)
 8003e0a:	f7fe fcdb 	bl	80027c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <prvInitialiseTaskLists+0x78>)
 8003e10:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <prvInitialiseTaskLists+0x64>)
 8003e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <prvInitialiseTaskLists+0x7c>)
 8003e16:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <prvInitialiseTaskLists+0x68>)
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000754 	.word	0x20000754
 8003e28:	20000bb4 	.word	0x20000bb4
 8003e2c:	20000bc8 	.word	0x20000bc8
 8003e30:	20000be4 	.word	0x20000be4
 8003e34:	20000bf8 	.word	0x20000bf8
 8003e38:	20000c10 	.word	0x20000c10
 8003e3c:	20000bdc 	.word	0x20000bdc
 8003e40:	20000be0 	.word	0x20000be0

08003e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e4a:	e019      	b.n	8003e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e4c:	f000 fdd2 	bl	80049f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e50:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <prvCheckTasksWaitingTermination+0x50>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fd3b 	bl	80028d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <prvCheckTasksWaitingTermination+0x54>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <prvCheckTasksWaitingTermination+0x54>)
 8003e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <prvCheckTasksWaitingTermination+0x58>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <prvCheckTasksWaitingTermination+0x58>)
 8003e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e76:	f000 fded 	bl	8004a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f810 	bl	8003ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <prvCheckTasksWaitingTermination+0x58>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e1      	bne.n	8003e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000bf8 	.word	0x20000bf8
 8003e98:	20000c24 	.word	0x20000c24
 8003e9c:	20000c0c 	.word	0x20000c0c

08003ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 ff8a 	bl	8004dd0 <vPortFree>
				vPortFree( pxTCB );
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 ff87 	bl	8004dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ec2:	e018      	b.n	8003ef6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d103      	bne.n	8003ed6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 ff7e 	bl	8004dd0 <vPortFree>
	}
 8003ed4:	e00f      	b.n	8003ef6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d00a      	beq.n	8003ef6 <prvDeleteTCB+0x56>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60fb      	str	r3, [r7, #12]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <prvDeleteTCB+0x54>
	}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <prvResetNextTaskUnblockTime+0x38>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <prvResetNextTaskUnblockTime+0x3c>)
 8003f12:	f04f 32ff 	mov.w	r2, #4294967295
 8003f16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f18:	e008      	b.n	8003f2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <prvResetNextTaskUnblockTime+0x38>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <prvResetNextTaskUnblockTime+0x3c>)
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	20000bdc 	.word	0x20000bdc
 8003f3c:	20000c44 	.word	0x20000c44

08003f40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <xTaskGetSchedulerState+0x34>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	e008      	b.n	8003f66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f54:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <xTaskGetSchedulerState+0x38>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	e001      	b.n	8003f66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f66:	687b      	ldr	r3, [r7, #4]
	}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20000c30 	.word	0x20000c30
 8003f78:	20000c4c 	.word	0x20000c4c

08003f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d056      	beq.n	8004040 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <xTaskPriorityDisinherit+0xd0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d00a      	beq.n	8003fb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	60fb      	str	r3, [r7, #12]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60bb      	str	r3, [r7, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	1e5a      	subs	r2, r3, #1
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d02c      	beq.n	8004040 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d128      	bne.n	8004040 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe fc70 	bl	80028d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <xTaskPriorityDisinherit+0xd4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d903      	bls.n	8004020 <xTaskPriorityDisinherit+0xa4>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <xTaskPriorityDisinherit+0xd4>)
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4a09      	ldr	r2, [pc, #36]	; (8004054 <xTaskPriorityDisinherit+0xd8>)
 800402e:	441a      	add	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f7fe fbf1 	bl	800281e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004040:	697b      	ldr	r3, [r7, #20]
	}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000750 	.word	0x20000750
 8004050:	20000c2c 	.word	0x20000c2c
 8004054:	20000754 	.word	0x20000754

08004058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004062:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004068:	4b20      	ldr	r3, [pc, #128]	; (80040ec <prvAddCurrentTaskToDelayedList+0x94>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fc32 	bl	80028d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d10a      	bne.n	8004092 <prvAddCurrentTaskToDelayedList+0x3a>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004082:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4819      	ldr	r0, [pc, #100]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800408c:	f7fe fbc7 	bl	800281e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004090:	e026      	b.n	80040e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <prvAddCurrentTaskToDelayedList+0x94>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d209      	bcs.n	80040be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <prvAddCurrentTaskToDelayedList+0x94>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f7fe fbd5 	bl	8002866 <vListInsert>
}
 80040bc:	e010      	b.n	80040e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040be:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <prvAddCurrentTaskToDelayedList+0x94>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7fe fbcb 	bl	8002866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d202      	bcs.n	80040e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040da:	4a08      	ldr	r2, [pc, #32]	; (80040fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6013      	str	r3, [r2, #0]
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000c28 	.word	0x20000c28
 80040ec:	20000750 	.word	0x20000750
 80040f0:	20000c10 	.word	0x20000c10
 80040f4:	20000be0 	.word	0x20000be0
 80040f8:	20000bdc 	.word	0x20000bdc
 80040fc:	20000c44 	.word	0x20000c44

08004100 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800410a:	f000 fb07 	bl	800471c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <xTimerCreateTimerTask+0x80>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800411e:	1d3a      	adds	r2, r7, #4
 8004120:	f107 0108 	add.w	r1, r7, #8
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fb31 	bl	8002790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	9202      	str	r2, [sp, #8]
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	2302      	movs	r3, #2
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2300      	movs	r3, #0
 800413e:	460a      	mov	r2, r1
 8004140:	4910      	ldr	r1, [pc, #64]	; (8004184 <xTimerCreateTimerTask+0x84>)
 8004142:	4811      	ldr	r0, [pc, #68]	; (8004188 <xTimerCreateTimerTask+0x88>)
 8004144:	f7ff f8de 	bl	8003304 <xTaskCreateStatic>
 8004148:	4603      	mov	r3, r0
 800414a:	4a10      	ldr	r2, [pc, #64]	; (800418c <xTimerCreateTimerTask+0x8c>)
 800414c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <xTimerCreateTimerTask+0x8c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004156:	2301      	movs	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	613b      	str	r3, [r7, #16]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004176:	697b      	ldr	r3, [r7, #20]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000c80 	.word	0x20000c80
 8004184:	08005914 	.word	0x08005914
 8004188:	080042c5 	.word	0x080042c5
 800418c:	20000c84 	.word	0x20000c84

08004190 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <xTimerGenericCommand+0x2e>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	623b      	str	r3, [r7, #32]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041be:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <xTimerGenericCommand+0x98>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d02a      	beq.n	800421c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b05      	cmp	r3, #5
 80041d6:	dc18      	bgt.n	800420a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041d8:	f7ff feb2 	bl	8003f40 <xTaskGetSchedulerState>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d109      	bne.n	80041f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <xTimerGenericCommand+0x98>)
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	f107 0110 	add.w	r1, r7, #16
 80041ea:	2300      	movs	r3, #0
 80041ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ee:	f7fe fca1 	bl	8002b34 <xQueueGenericSend>
 80041f2:	6278      	str	r0, [r7, #36]	; 0x24
 80041f4:	e012      	b.n	800421c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <xTimerGenericCommand+0x98>)
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	f107 0110 	add.w	r1, r7, #16
 80041fe:	2300      	movs	r3, #0
 8004200:	2200      	movs	r2, #0
 8004202:	f7fe fc97 	bl	8002b34 <xQueueGenericSend>
 8004206:	6278      	str	r0, [r7, #36]	; 0x24
 8004208:	e008      	b.n	800421c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <xTimerGenericCommand+0x98>)
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	f107 0110 	add.w	r1, r7, #16
 8004212:	2300      	movs	r3, #0
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	f7fe fd8b 	bl	8002d30 <xQueueGenericSendFromISR>
 800421a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800421e:	4618      	mov	r0, r3
 8004220:	3728      	adds	r7, #40	; 0x28
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000c80 	.word	0x20000c80

0800422c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <prvProcessExpiredTimer+0x94>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3304      	adds	r3, #4
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe fb47 	bl	80028d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d022      	beq.n	800429e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	18d1      	adds	r1, r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	6978      	ldr	r0, [r7, #20]
 8004266:	f000 f8d1 	bl	800440c <prvInsertTimerInActiveList>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01f      	beq.n	80042b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004270:	2300      	movs	r3, #0
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	2100      	movs	r1, #0
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7ff ff88 	bl	8004190 <xTimerGenericCommand>
 8004280:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d113      	bne.n	80042b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	6978      	ldr	r0, [r7, #20]
 80042b6:	4798      	blx	r3
}
 80042b8:	bf00      	nop
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000c78 	.word	0x20000c78

080042c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042cc:	f107 0308 	add.w	r3, r7, #8
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f857 	bl	8004384 <prvGetNextExpireTime>
 80042d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4619      	mov	r1, r3
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f803 	bl	80042e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042e2:	f000 f8d5 	bl	8004490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042e6:	e7f1      	b.n	80042cc <prvTimerTask+0x8>

080042e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042f2:	f7ff fa43 	bl	800377c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f866 	bl	80043cc <prvSampleTimeNow>
 8004300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d130      	bne.n	800436a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <prvProcessTimerOrBlockTask+0x3c>
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	429a      	cmp	r2, r3
 8004314:	d806      	bhi.n	8004324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004316:	f7ff fa3f 	bl	8003798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ff85 	bl	800422c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004322:	e024      	b.n	800436e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <prvProcessTimerOrBlockTask+0x90>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <prvProcessTimerOrBlockTask+0x50>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <prvProcessTimerOrBlockTask+0x52>
 8004338:	2300      	movs	r3, #0
 800433a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <prvProcessTimerOrBlockTask+0x94>)
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	4619      	mov	r1, r3
 800434a:	f7fe ffa7 	bl	800329c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800434e:	f7ff fa23 	bl	8003798 <xTaskResumeAll>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <prvProcessTimerOrBlockTask+0x98>)
 800435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	f3bf 8f6f 	isb	sy
}
 8004368:	e001      	b.n	800436e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800436a:	f7ff fa15 	bl	8003798 <xTaskResumeAll>
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000c7c 	.word	0x20000c7c
 800437c:	20000c80 	.word	0x20000c80
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <prvGetNextExpireTime+0x44>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <prvGetNextExpireTime+0x16>
 8004396:	2201      	movs	r2, #1
 8004398:	e000      	b.n	800439c <prvGetNextExpireTime+0x18>
 800439a:	2200      	movs	r2, #0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <prvGetNextExpireTime+0x44>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e001      	b.n	80043b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80043b8:	68fb      	ldr	r3, [r7, #12]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000c78 	.word	0x20000c78

080043cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80043d4:	f7ff fa7e 	bl	80038d4 <xTaskGetTickCount>
 80043d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <prvSampleTimeNow+0x3c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d205      	bcs.n	80043f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043e4:	f000 f936 	bl	8004654 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e002      	b.n	80043f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043f6:	4a04      	ldr	r2, [pc, #16]	; (8004408 <prvSampleTimeNow+0x3c>)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043fc:	68fb      	ldr	r3, [r7, #12]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000c88 	.word	0x20000c88

0800440c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d812      	bhi.n	8004458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e01b      	b.n	800447e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <prvInsertTimerInActiveList+0x7c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3304      	adds	r3, #4
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f7fe fa08 	bl	8002866 <vListInsert>
 8004456:	e012      	b.n	800447e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d206      	bcs.n	800446e <prvInsertTimerInActiveList+0x62>
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d302      	bcc.n	800446e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004468:	2301      	movs	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e007      	b.n	800447e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <prvInsertTimerInActiveList+0x80>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f7fe f9f4 	bl	8002866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800447e:	697b      	ldr	r3, [r7, #20]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000c7c 	.word	0x20000c7c
 800448c:	20000c78 	.word	0x20000c78

08004490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	; 0x38
 8004494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004496:	e0ca      	b.n	800462e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	da18      	bge.n	80044d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800449e:	1d3b      	adds	r3, r7, #4
 80044a0:	3304      	adds	r3, #4
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80044a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61fb      	str	r3, [r7, #28]
}
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c6:	6850      	ldr	r0, [r2, #4]
 80044c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ca:	6892      	ldr	r2, [r2, #8]
 80044cc:	4611      	mov	r1, r2
 80044ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f2c0 80aa 	blt.w	800462c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	3304      	adds	r3, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe f9f5 	bl	80028d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044ee:	463b      	mov	r3, r7
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff6b 	bl	80043cc <prvSampleTimeNow>
 80044f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b09      	cmp	r3, #9
 80044fc:	f200 8097 	bhi.w	800462e <prvProcessReceivedCommands+0x19e>
 8004500:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <prvProcessReceivedCommands+0x78>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	08004531 	.word	0x08004531
 800450c:	08004531 	.word	0x08004531
 8004510:	08004531 	.word	0x08004531
 8004514:	080045a5 	.word	0x080045a5
 8004518:	080045b9 	.word	0x080045b9
 800451c:	08004603 	.word	0x08004603
 8004520:	08004531 	.word	0x08004531
 8004524:	08004531 	.word	0x08004531
 8004528:	080045a5 	.word	0x080045a5
 800452c:	080045b9 	.word	0x080045b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	18d1      	adds	r1, r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004550:	f7ff ff5c 	bl	800440c <prvInsertTimerInActiveList>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d069      	beq.n	800462e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004560:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05e      	beq.n	800462e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	441a      	add	r2, r3
 8004578:	2300      	movs	r3, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	2100      	movs	r1, #0
 8004580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004582:	f7ff fe05 	bl	8004190 <xTimerGenericCommand>
 8004586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d14f      	bne.n	800462e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	61bb      	str	r3, [r7, #24]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80045b6:	e03a      	b.n	800462e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	617b      	str	r3, [r7, #20]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	18d1      	adds	r1, r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fc:	f7ff ff06 	bl	800440c <prvInsertTimerInActiveList>
					break;
 8004600:	e015      	b.n	800462e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d103      	bne.n	8004618 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004612:	f000 fbdd 	bl	8004dd0 <vPortFree>
 8004616:	e00a      	b.n	800462e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800462a:	e000      	b.n	800462e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800462c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <prvProcessReceivedCommands+0x1c0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1d39      	adds	r1, r7, #4
 8004634:	2200      	movs	r2, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fc16 	bl	8002e68 <xQueueReceive>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	f47f af2a 	bne.w	8004498 <prvProcessReceivedCommands+0x8>
	}
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	3730      	adds	r7, #48	; 0x30
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20000c80 	.word	0x20000c80

08004654 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800465a:	e048      	b.n	80046ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800465c:	4b2d      	ldr	r3, [pc, #180]	; (8004714 <prvSwitchTimerLists+0xc0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004666:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <prvSwitchTimerLists+0xc0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe f92f 	bl	80028d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d02e      	beq.n	80046ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d90e      	bls.n	80046c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046ae:	4b19      	ldr	r3, [pc, #100]	; (8004714 <prvSwitchTimerLists+0xc0>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fe f8d4 	bl	8002866 <vListInsert>
 80046be:	e016      	b.n	80046ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046c0:	2300      	movs	r3, #0
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	2100      	movs	r1, #0
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fd60 	bl	8004190 <xTimerGenericCommand>
 80046d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	603b      	str	r3, [r7, #0]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <prvSwitchTimerLists+0xc0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1b1      	bne.n	800465c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <prvSwitchTimerLists+0xc0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <prvSwitchTimerLists+0xc4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a04      	ldr	r2, [pc, #16]	; (8004714 <prvSwitchTimerLists+0xc0>)
 8004704:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004706:	4a04      	ldr	r2, [pc, #16]	; (8004718 <prvSwitchTimerLists+0xc4>)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	bf00      	nop
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000c78 	.word	0x20000c78
 8004718:	20000c7c 	.word	0x20000c7c

0800471c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004722:	f000 f967 	bl	80049f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004726:	4b15      	ldr	r3, [pc, #84]	; (800477c <prvCheckForValidListAndQueue+0x60>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d120      	bne.n	8004770 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800472e:	4814      	ldr	r0, [pc, #80]	; (8004780 <prvCheckForValidListAndQueue+0x64>)
 8004730:	f7fe f848 	bl	80027c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004734:	4813      	ldr	r0, [pc, #76]	; (8004784 <prvCheckForValidListAndQueue+0x68>)
 8004736:	f7fe f845 	bl	80027c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <prvCheckForValidListAndQueue+0x6c>)
 800473c:	4a10      	ldr	r2, [pc, #64]	; (8004780 <prvCheckForValidListAndQueue+0x64>)
 800473e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004740:	4b12      	ldr	r3, [pc, #72]	; (800478c <prvCheckForValidListAndQueue+0x70>)
 8004742:	4a10      	ldr	r2, [pc, #64]	; (8004784 <prvCheckForValidListAndQueue+0x68>)
 8004744:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004746:	2300      	movs	r3, #0
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <prvCheckForValidListAndQueue+0x74>)
 800474c:	4a11      	ldr	r2, [pc, #68]	; (8004794 <prvCheckForValidListAndQueue+0x78>)
 800474e:	2110      	movs	r1, #16
 8004750:	200a      	movs	r0, #10
 8004752:	f7fe f953 	bl	80029fc <xQueueGenericCreateStatic>
 8004756:	4603      	mov	r3, r0
 8004758:	4a08      	ldr	r2, [pc, #32]	; (800477c <prvCheckForValidListAndQueue+0x60>)
 800475a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <prvCheckForValidListAndQueue+0x60>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <prvCheckForValidListAndQueue+0x60>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	490b      	ldr	r1, [pc, #44]	; (8004798 <prvCheckForValidListAndQueue+0x7c>)
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fd6c 	bl	8003248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004770:	f000 f970 	bl	8004a54 <vPortExitCritical>
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000c80 	.word	0x20000c80
 8004780:	20000c50 	.word	0x20000c50
 8004784:	20000c64 	.word	0x20000c64
 8004788:	20000c78 	.word	0x20000c78
 800478c:	20000c7c 	.word	0x20000c7c
 8004790:	20000d2c 	.word	0x20000d2c
 8004794:	20000c8c 	.word	0x20000c8c
 8004798:	0800591c 	.word	0x0800591c

0800479c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3b04      	subs	r3, #4
 80047ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b04      	subs	r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3b04      	subs	r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <pxPortInitialiseStack+0x64>)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3b14      	subs	r3, #20
 80047d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f06f 0202 	mvn.w	r2, #2
 80047ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b20      	subs	r3, #32
 80047f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	08004805 	.word	0x08004805

08004804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <prvTaskExitError+0x54>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d00a      	beq.n	800482e <prvTaskExitError+0x2a>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <prvTaskExitError+0x28>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	60bb      	str	r3, [r7, #8]
}
 8004840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004842:	bf00      	nop
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0fc      	beq.n	8004844 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	2000000c 	.word	0x2000000c
 800485c:	00000000 	.word	0x00000000

08004860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <pxCurrentTCBConst2>)
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	6808      	ldr	r0, [r1, #0]
 8004866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	f380 8809 	msr	PSP, r0
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f380 8811 	msr	BASEPRI, r0
 800487a:	4770      	bx	lr
 800487c:	f3af 8000 	nop.w

08004880 <pxCurrentTCBConst2>:
 8004880:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop

08004888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004888:	4808      	ldr	r0, [pc, #32]	; (80048ac <prvPortStartFirstTask+0x24>)
 800488a:	6800      	ldr	r0, [r0, #0]
 800488c:	6800      	ldr	r0, [r0, #0]
 800488e:	f380 8808 	msr	MSP, r0
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8814 	msr	CONTROL, r0
 800489a:	b662      	cpsie	i
 800489c:	b661      	cpsie	f
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	df00      	svc	0
 80048a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048aa:	bf00      	nop
 80048ac:	e000ed08 	.word	0xe000ed08

080048b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048b6:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <xPortStartScheduler+0x120>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a46      	ldr	r2, [pc, #280]	; (80049d4 <xPortStartScheduler+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10a      	bne.n	80048d6 <xPortStartScheduler+0x26>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	613b      	str	r3, [r7, #16]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <xPortStartScheduler+0x120>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3f      	ldr	r2, [pc, #252]	; (80049d8 <xPortStartScheduler+0x128>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10a      	bne.n	80048f6 <xPortStartScheduler+0x46>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048f6:	4b39      	ldr	r3, [pc, #228]	; (80049dc <xPortStartScheduler+0x12c>)
 80048f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	22ff      	movs	r2, #255	; 0xff
 8004906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <xPortStartScheduler+0x130>)
 800491c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800491e:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <xPortStartScheduler+0x134>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004924:	e009      	b.n	800493a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004926:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <xPortStartScheduler+0x134>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3b01      	subs	r3, #1
 800492c:	4a2d      	ldr	r2, [pc, #180]	; (80049e4 <xPortStartScheduler+0x134>)
 800492e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d0ef      	beq.n	8004926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004946:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <xPortStartScheduler+0x134>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f1c3 0307 	rsb	r3, r3, #7
 800494e:	2b04      	cmp	r3, #4
 8004950:	d00a      	beq.n	8004968 <xPortStartScheduler+0xb8>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60bb      	str	r3, [r7, #8]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004968:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <xPortStartScheduler+0x134>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <xPortStartScheduler+0x134>)
 8004970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004972:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <xPortStartScheduler+0x134>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <xPortStartScheduler+0x134>)
 800497c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <xPortStartScheduler+0x138>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <xPortStartScheduler+0x138>)
 800498c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <xPortStartScheduler+0x138>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <xPortStartScheduler+0x138>)
 8004998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800499c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800499e:	f000 f8dd 	bl	8004b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <xPortStartScheduler+0x13c>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049a8:	f000 f8fc 	bl	8004ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <xPortStartScheduler+0x140>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <xPortStartScheduler+0x140>)
 80049b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049b8:	f7ff ff66 	bl	8004888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049bc:	f7ff f854 	bl	8003a68 <vTaskSwitchContext>
	prvTaskExitError();
 80049c0:	f7ff ff20 	bl	8004804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	410fc271 	.word	0x410fc271
 80049d8:	410fc270 	.word	0x410fc270
 80049dc:	e000e400 	.word	0xe000e400
 80049e0:	20000d7c 	.word	0x20000d7c
 80049e4:	20000d80 	.word	0x20000d80
 80049e8:	e000ed20 	.word	0xe000ed20
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	e000ef34 	.word	0xe000ef34

080049f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	607b      	str	r3, [r7, #4]
}
 8004a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <vPortEnterCritical+0x58>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <vPortEnterCritical+0x58>)
 8004a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <vPortEnterCritical+0x58>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d10f      	bne.n	8004a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortEnterCritical+0x5c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	603b      	str	r3, [r7, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <vPortEnterCritical+0x4a>
	}
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	2000000c 	.word	0x2000000c
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <vPortExitCritical+0x50>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <vPortExitCritical+0x24>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	607b      	str	r3, [r7, #4]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <vPortExitCritical+0x50>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <vPortExitCritical+0x50>)
 8004a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <vPortExitCritical+0x50>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <vPortExitCritical+0x42>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f383 8811 	msr	BASEPRI, r3
}
 8004a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
	...

08004ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ab0:	f3ef 8009 	mrs	r0, PSP
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <pxCurrentTCBConst>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	f01e 0f10 	tst.w	lr, #16
 8004ac0:	bf08      	it	eq
 8004ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	6010      	str	r0, [r2, #0]
 8004acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ad4:	f380 8811 	msr	BASEPRI, r0
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f7fe ffc2 	bl	8003a68 <vTaskSwitchContext>
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f380 8811 	msr	BASEPRI, r0
 8004aec:	bc09      	pop	{r0, r3}
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	6808      	ldr	r0, [r1, #0]
 8004af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af6:	f01e 0f10 	tst.w	lr, #16
 8004afa:	bf08      	it	eq
 8004afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b00:	f380 8809 	msr	PSP, r0
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w

08004b10 <pxCurrentTCBConst>:
 8004b10:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop

08004b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	607b      	str	r3, [r7, #4]
}
 8004b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b32:	f7fe fedf 	bl	80038f4 <xTaskIncrementTick>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <xPortSysTickHandler+0x40>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f383 8811 	msr	BASEPRI, r3
}
 8004b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <vPortSetupTimerInterrupt+0x34>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <vPortSetupTimerInterrupt+0x38>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <vPortSetupTimerInterrupt+0x3c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <vPortSetupTimerInterrupt+0x40>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <vPortSetupTimerInterrupt+0x44>)
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b7e:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <vPortSetupTimerInterrupt+0x34>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	e000e010 	.word	0xe000e010
 8004b94:	e000e018 	.word	0xe000e018
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	10624dd3 	.word	0x10624dd3
 8004ba0:	e000e014 	.word	0xe000e014

08004ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bb4 <vPortEnableVFP+0x10>
 8004ba8:	6801      	ldr	r1, [r0, #0]
 8004baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bae:	6001      	str	r1, [r0, #0]
 8004bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bb2:	bf00      	nop
 8004bb4:	e000ed88 	.word	0xe000ed88

08004bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bbe:	f3ef 8305 	mrs	r3, IPSR
 8004bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d914      	bls.n	8004bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bca:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <vPortValidateInterruptPriority+0x70>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bd4:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <vPortValidateInterruptPriority+0x74>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	7afa      	ldrb	r2, [r7, #11]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d20a      	bcs.n	8004bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	607b      	str	r3, [r7, #4]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <vPortValidateInterruptPriority+0x78>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <vPortValidateInterruptPriority+0x7c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d90a      	bls.n	8004c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	603b      	str	r3, [r7, #0]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <vPortValidateInterruptPriority+0x60>
	}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	e000e3f0 	.word	0xe000e3f0
 8004c2c:	20000d7c 	.word	0x20000d7c
 8004c30:	e000ed0c 	.word	0xe000ed0c
 8004c34:	20000d80 	.word	0x20000d80

08004c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c44:	f7fe fd9a 	bl	800377c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c48:	4b5b      	ldr	r3, [pc, #364]	; (8004db8 <pvPortMalloc+0x180>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c50:	f000 f920 	bl	8004e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c54:	4b59      	ldr	r3, [pc, #356]	; (8004dbc <pvPortMalloc+0x184>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f040 8093 	bne.w	8004d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01d      	beq.n	8004ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c68:	2208      	movs	r2, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d014      	beq.n	8004ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f023 0307 	bic.w	r3, r3, #7
 8004c80:	3308      	adds	r3, #8
 8004c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	617b      	str	r3, [r7, #20]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d06e      	beq.n	8004d88 <pvPortMalloc+0x150>
 8004caa:	4b45      	ldr	r3, [pc, #276]	; (8004dc0 <pvPortMalloc+0x188>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d869      	bhi.n	8004d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cb4:	4b43      	ldr	r3, [pc, #268]	; (8004dc4 <pvPortMalloc+0x18c>)
 8004cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cb8:	4b42      	ldr	r3, [pc, #264]	; (8004dc4 <pvPortMalloc+0x18c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cbe:	e004      	b.n	8004cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d903      	bls.n	8004cdc <pvPortMalloc+0xa4>
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f1      	bne.n	8004cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cdc:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <pvPortMalloc+0x180>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d050      	beq.n	8004d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2208      	movs	r2, #8
 8004cec:	4413      	add	r3, r2
 8004cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	2308      	movs	r3, #8
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d91f      	bls.n	8004d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <pvPortMalloc+0xf8>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	613b      	str	r3, [r7, #16]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	1ad2      	subs	r2, r2, r3
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d42:	69b8      	ldr	r0, [r7, #24]
 8004d44:	f000 f908 	bl	8004f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <pvPortMalloc+0x188>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <pvPortMalloc+0x188>)
 8004d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <pvPortMalloc+0x188>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <pvPortMalloc+0x190>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d203      	bcs.n	8004d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d62:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <pvPortMalloc+0x188>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <pvPortMalloc+0x190>)
 8004d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <pvPortMalloc+0x184>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <pvPortMalloc+0x194>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <pvPortMalloc+0x194>)
 8004d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d88:	f7fe fd06 	bl	8003798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <pvPortMalloc+0x174>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	60fb      	str	r3, [r7, #12]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <pvPortMalloc+0x172>
	return pvReturn;
 8004dac:	69fb      	ldr	r3, [r7, #28]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	2000498c 	.word	0x2000498c
 8004dbc:	200049a0 	.word	0x200049a0
 8004dc0:	20004990 	.word	0x20004990
 8004dc4:	20004984 	.word	0x20004984
 8004dc8:	20004994 	.word	0x20004994
 8004dcc:	20004998 	.word	0x20004998

08004dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d04d      	beq.n	8004e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004de2:	2308      	movs	r3, #8
 8004de4:	425b      	negs	r3, r3
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4413      	add	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <vPortFree+0xb8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <vPortFree+0x44>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60fb      	str	r3, [r7, #12]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <vPortFree+0x62>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60bb      	str	r3, [r7, #8]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <vPortFree+0xb8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01e      	beq.n	8004e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11a      	bne.n	8004e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <vPortFree+0xb8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e58:	f7fe fc90 	bl	800377c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <vPortFree+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4413      	add	r3, r2
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <vPortFree+0xbc>)
 8004e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e6a:	6938      	ldr	r0, [r7, #16]
 8004e6c:	f000 f874 	bl	8004f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <vPortFree+0xc0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	4a06      	ldr	r2, [pc, #24]	; (8004e90 <vPortFree+0xc0>)
 8004e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e7a:	f7fe fc8d 	bl	8003798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e7e:	bf00      	nop
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200049a0 	.word	0x200049a0
 8004e8c:	20004990 	.word	0x20004990
 8004e90:	2000499c 	.word	0x2000499c

08004e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ea0:	4b27      	ldr	r3, [pc, #156]	; (8004f40 <prvHeapInit+0xac>)
 8004ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3307      	adds	r3, #7
 8004eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0307 	bic.w	r3, r3, #7
 8004eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	; (8004f40 <prvHeapInit+0xac>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <prvHeapInit+0xb0>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <prvHeapInit+0xb0>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4413      	add	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0307 	bic.w	r3, r3, #7
 8004eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <prvHeapInit+0xb4>)
 8004ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <prvHeapInit+0xb4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <prvHeapInit+0xb4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <prvHeapInit+0xb4>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <prvHeapInit+0xb8>)
 8004f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <prvHeapInit+0xbc>)
 8004f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <prvHeapInit+0xc0>)
 8004f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	20000d84 	.word	0x20000d84
 8004f44:	20004984 	.word	0x20004984
 8004f48:	2000498c 	.word	0x2000498c
 8004f4c:	20004994 	.word	0x20004994
 8004f50:	20004990 	.word	0x20004990
 8004f54:	200049a0 	.word	0x200049a0

08004f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f60:	4b28      	ldr	r3, [pc, #160]	; (8005004 <prvInsertBlockIntoFreeList+0xac>)
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e002      	b.n	8004f6c <prvInsertBlockIntoFreeList+0x14>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d8f7      	bhi.n	8004f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4413      	add	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d108      	bne.n	8004f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	441a      	add	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d118      	bne.n	8004fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b15      	ldr	r3, [pc, #84]	; (8005008 <prvInsertBlockIntoFreeList+0xb0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d00d      	beq.n	8004fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e008      	b.n	8004fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <prvInsertBlockIntoFreeList+0xb0>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e003      	b.n	8004fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d002      	beq.n	8004ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20004984 	.word	0x20004984
 8005008:	2000498c 	.word	0x2000498c

0800500c <__errno>:
 800500c:	4b01      	ldr	r3, [pc, #4]	; (8005014 <__errno+0x8>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000010 	.word	0x20000010

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4d0d      	ldr	r5, [pc, #52]	; (8005050 <__libc_init_array+0x38>)
 800501c:	4c0d      	ldr	r4, [pc, #52]	; (8005054 <__libc_init_array+0x3c>)
 800501e:	1b64      	subs	r4, r4, r5
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	2600      	movs	r6, #0
 8005024:	42a6      	cmp	r6, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	4d0b      	ldr	r5, [pc, #44]	; (8005058 <__libc_init_array+0x40>)
 800502a:	4c0c      	ldr	r4, [pc, #48]	; (800505c <__libc_init_array+0x44>)
 800502c:	f000 fc4e 	bl	80058cc <_init>
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	2600      	movs	r6, #0
 8005036:	42a6      	cmp	r6, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005040:	4798      	blx	r3
 8005042:	3601      	adds	r6, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	f855 3b04 	ldr.w	r3, [r5], #4
 800504a:	4798      	blx	r3
 800504c:	3601      	adds	r6, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	080059c0 	.word	0x080059c0
 8005054:	080059c0 	.word	0x080059c0
 8005058:	080059c0 	.word	0x080059c0
 800505c:	080059c4 	.word	0x080059c4

08005060 <memcpy>:
 8005060:	440a      	add	r2, r1
 8005062:	4291      	cmp	r1, r2
 8005064:	f100 33ff 	add.w	r3, r0, #4294967295
 8005068:	d100      	bne.n	800506c <memcpy+0xc>
 800506a:	4770      	bx	lr
 800506c:	b510      	push	{r4, lr}
 800506e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005076:	4291      	cmp	r1, r2
 8005078:	d1f9      	bne.n	800506e <memcpy+0xe>
 800507a:	bd10      	pop	{r4, pc}

0800507c <memset>:
 800507c:	4402      	add	r2, r0
 800507e:	4603      	mov	r3, r0
 8005080:	4293      	cmp	r3, r2
 8005082:	d100      	bne.n	8005086 <memset+0xa>
 8005084:	4770      	bx	lr
 8005086:	f803 1b01 	strb.w	r1, [r3], #1
 800508a:	e7f9      	b.n	8005080 <memset+0x4>

0800508c <siprintf>:
 800508c:	b40e      	push	{r1, r2, r3}
 800508e:	b500      	push	{lr}
 8005090:	b09c      	sub	sp, #112	; 0x70
 8005092:	ab1d      	add	r3, sp, #116	; 0x74
 8005094:	9002      	str	r0, [sp, #8]
 8005096:	9006      	str	r0, [sp, #24]
 8005098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800509c:	4809      	ldr	r0, [pc, #36]	; (80050c4 <siprintf+0x38>)
 800509e:	9107      	str	r1, [sp, #28]
 80050a0:	9104      	str	r1, [sp, #16]
 80050a2:	4909      	ldr	r1, [pc, #36]	; (80050c8 <siprintf+0x3c>)
 80050a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a8:	9105      	str	r1, [sp, #20]
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	a902      	add	r1, sp, #8
 80050b0:	f000 f868 	bl	8005184 <_svfiprintf_r>
 80050b4:	9b02      	ldr	r3, [sp, #8]
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	b01c      	add	sp, #112	; 0x70
 80050bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80050c0:	b003      	add	sp, #12
 80050c2:	4770      	bx	lr
 80050c4:	20000010 	.word	0x20000010
 80050c8:	ffff0208 	.word	0xffff0208

080050cc <__ssputs_r>:
 80050cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d0:	688e      	ldr	r6, [r1, #8]
 80050d2:	429e      	cmp	r6, r3
 80050d4:	4682      	mov	sl, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	4690      	mov	r8, r2
 80050da:	461f      	mov	r7, r3
 80050dc:	d838      	bhi.n	8005150 <__ssputs_r+0x84>
 80050de:	898a      	ldrh	r2, [r1, #12]
 80050e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050e4:	d032      	beq.n	800514c <__ssputs_r+0x80>
 80050e6:	6825      	ldr	r5, [r4, #0]
 80050e8:	6909      	ldr	r1, [r1, #16]
 80050ea:	eba5 0901 	sub.w	r9, r5, r1
 80050ee:	6965      	ldr	r5, [r4, #20]
 80050f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050f8:	3301      	adds	r3, #1
 80050fa:	444b      	add	r3, r9
 80050fc:	106d      	asrs	r5, r5, #1
 80050fe:	429d      	cmp	r5, r3
 8005100:	bf38      	it	cc
 8005102:	461d      	movcc	r5, r3
 8005104:	0553      	lsls	r3, r2, #21
 8005106:	d531      	bpl.n	800516c <__ssputs_r+0xa0>
 8005108:	4629      	mov	r1, r5
 800510a:	f000 fb39 	bl	8005780 <_malloc_r>
 800510e:	4606      	mov	r6, r0
 8005110:	b950      	cbnz	r0, 8005128 <__ssputs_r+0x5c>
 8005112:	230c      	movs	r3, #12
 8005114:	f8ca 3000 	str.w	r3, [sl]
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511e:	81a3      	strh	r3, [r4, #12]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005128:	6921      	ldr	r1, [r4, #16]
 800512a:	464a      	mov	r2, r9
 800512c:	f7ff ff98 	bl	8005060 <memcpy>
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	6126      	str	r6, [r4, #16]
 800513e:	6165      	str	r5, [r4, #20]
 8005140:	444e      	add	r6, r9
 8005142:	eba5 0509 	sub.w	r5, r5, r9
 8005146:	6026      	str	r6, [r4, #0]
 8005148:	60a5      	str	r5, [r4, #8]
 800514a:	463e      	mov	r6, r7
 800514c:	42be      	cmp	r6, r7
 800514e:	d900      	bls.n	8005152 <__ssputs_r+0x86>
 8005150:	463e      	mov	r6, r7
 8005152:	4632      	mov	r2, r6
 8005154:	6820      	ldr	r0, [r4, #0]
 8005156:	4641      	mov	r1, r8
 8005158:	f000 faa8 	bl	80056ac <memmove>
 800515c:	68a3      	ldr	r3, [r4, #8]
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	1b9b      	subs	r3, r3, r6
 8005162:	4432      	add	r2, r6
 8005164:	60a3      	str	r3, [r4, #8]
 8005166:	6022      	str	r2, [r4, #0]
 8005168:	2000      	movs	r0, #0
 800516a:	e7db      	b.n	8005124 <__ssputs_r+0x58>
 800516c:	462a      	mov	r2, r5
 800516e:	f000 fb61 	bl	8005834 <_realloc_r>
 8005172:	4606      	mov	r6, r0
 8005174:	2800      	cmp	r0, #0
 8005176:	d1e1      	bne.n	800513c <__ssputs_r+0x70>
 8005178:	6921      	ldr	r1, [r4, #16]
 800517a:	4650      	mov	r0, sl
 800517c:	f000 fab0 	bl	80056e0 <_free_r>
 8005180:	e7c7      	b.n	8005112 <__ssputs_r+0x46>
	...

08005184 <_svfiprintf_r>:
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	4698      	mov	r8, r3
 800518a:	898b      	ldrh	r3, [r1, #12]
 800518c:	061b      	lsls	r3, r3, #24
 800518e:	b09d      	sub	sp, #116	; 0x74
 8005190:	4607      	mov	r7, r0
 8005192:	460d      	mov	r5, r1
 8005194:	4614      	mov	r4, r2
 8005196:	d50e      	bpl.n	80051b6 <_svfiprintf_r+0x32>
 8005198:	690b      	ldr	r3, [r1, #16]
 800519a:	b963      	cbnz	r3, 80051b6 <_svfiprintf_r+0x32>
 800519c:	2140      	movs	r1, #64	; 0x40
 800519e:	f000 faef 	bl	8005780 <_malloc_r>
 80051a2:	6028      	str	r0, [r5, #0]
 80051a4:	6128      	str	r0, [r5, #16]
 80051a6:	b920      	cbnz	r0, 80051b2 <_svfiprintf_r+0x2e>
 80051a8:	230c      	movs	r3, #12
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e0d1      	b.n	8005356 <_svfiprintf_r+0x1d2>
 80051b2:	2340      	movs	r3, #64	; 0x40
 80051b4:	616b      	str	r3, [r5, #20]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ba:	2320      	movs	r3, #32
 80051bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c4:	2330      	movs	r3, #48	; 0x30
 80051c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005370 <_svfiprintf_r+0x1ec>
 80051ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ce:	f04f 0901 	mov.w	r9, #1
 80051d2:	4623      	mov	r3, r4
 80051d4:	469a      	mov	sl, r3
 80051d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051da:	b10a      	cbz	r2, 80051e0 <_svfiprintf_r+0x5c>
 80051dc:	2a25      	cmp	r2, #37	; 0x25
 80051de:	d1f9      	bne.n	80051d4 <_svfiprintf_r+0x50>
 80051e0:	ebba 0b04 	subs.w	fp, sl, r4
 80051e4:	d00b      	beq.n	80051fe <_svfiprintf_r+0x7a>
 80051e6:	465b      	mov	r3, fp
 80051e8:	4622      	mov	r2, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7ff ff6d 	bl	80050cc <__ssputs_r>
 80051f2:	3001      	adds	r0, #1
 80051f4:	f000 80aa 	beq.w	800534c <_svfiprintf_r+0x1c8>
 80051f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fa:	445a      	add	r2, fp
 80051fc:	9209      	str	r2, [sp, #36]	; 0x24
 80051fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80a2 	beq.w	800534c <_svfiprintf_r+0x1c8>
 8005208:	2300      	movs	r3, #0
 800520a:	f04f 32ff 	mov.w	r2, #4294967295
 800520e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005212:	f10a 0a01 	add.w	sl, sl, #1
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	9307      	str	r3, [sp, #28]
 800521a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800521e:	931a      	str	r3, [sp, #104]	; 0x68
 8005220:	4654      	mov	r4, sl
 8005222:	2205      	movs	r2, #5
 8005224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005228:	4851      	ldr	r0, [pc, #324]	; (8005370 <_svfiprintf_r+0x1ec>)
 800522a:	f7fa ffd9 	bl	80001e0 <memchr>
 800522e:	9a04      	ldr	r2, [sp, #16]
 8005230:	b9d8      	cbnz	r0, 800526a <_svfiprintf_r+0xe6>
 8005232:	06d0      	lsls	r0, r2, #27
 8005234:	bf44      	itt	mi
 8005236:	2320      	movmi	r3, #32
 8005238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800523c:	0711      	lsls	r1, r2, #28
 800523e:	bf44      	itt	mi
 8005240:	232b      	movmi	r3, #43	; 0x2b
 8005242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005246:	f89a 3000 	ldrb.w	r3, [sl]
 800524a:	2b2a      	cmp	r3, #42	; 0x2a
 800524c:	d015      	beq.n	800527a <_svfiprintf_r+0xf6>
 800524e:	9a07      	ldr	r2, [sp, #28]
 8005250:	4654      	mov	r4, sl
 8005252:	2000      	movs	r0, #0
 8005254:	f04f 0c0a 	mov.w	ip, #10
 8005258:	4621      	mov	r1, r4
 800525a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525e:	3b30      	subs	r3, #48	; 0x30
 8005260:	2b09      	cmp	r3, #9
 8005262:	d94e      	bls.n	8005302 <_svfiprintf_r+0x17e>
 8005264:	b1b0      	cbz	r0, 8005294 <_svfiprintf_r+0x110>
 8005266:	9207      	str	r2, [sp, #28]
 8005268:	e014      	b.n	8005294 <_svfiprintf_r+0x110>
 800526a:	eba0 0308 	sub.w	r3, r0, r8
 800526e:	fa09 f303 	lsl.w	r3, r9, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	46a2      	mov	sl, r4
 8005278:	e7d2      	b.n	8005220 <_svfiprintf_r+0x9c>
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	1d19      	adds	r1, r3, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	9103      	str	r1, [sp, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	bfbb      	ittet	lt
 8005286:	425b      	neglt	r3, r3
 8005288:	f042 0202 	orrlt.w	r2, r2, #2
 800528c:	9307      	strge	r3, [sp, #28]
 800528e:	9307      	strlt	r3, [sp, #28]
 8005290:	bfb8      	it	lt
 8005292:	9204      	strlt	r2, [sp, #16]
 8005294:	7823      	ldrb	r3, [r4, #0]
 8005296:	2b2e      	cmp	r3, #46	; 0x2e
 8005298:	d10c      	bne.n	80052b4 <_svfiprintf_r+0x130>
 800529a:	7863      	ldrb	r3, [r4, #1]
 800529c:	2b2a      	cmp	r3, #42	; 0x2a
 800529e:	d135      	bne.n	800530c <_svfiprintf_r+0x188>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	9203      	str	r2, [sp, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bfb8      	it	lt
 80052ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80052b0:	3402      	adds	r4, #2
 80052b2:	9305      	str	r3, [sp, #20]
 80052b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005380 <_svfiprintf_r+0x1fc>
 80052b8:	7821      	ldrb	r1, [r4, #0]
 80052ba:	2203      	movs	r2, #3
 80052bc:	4650      	mov	r0, sl
 80052be:	f7fa ff8f 	bl	80001e0 <memchr>
 80052c2:	b140      	cbz	r0, 80052d6 <_svfiprintf_r+0x152>
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	eba0 000a 	sub.w	r0, r0, sl
 80052ca:	fa03 f000 	lsl.w	r0, r3, r0
 80052ce:	9b04      	ldr	r3, [sp, #16]
 80052d0:	4303      	orrs	r3, r0
 80052d2:	3401      	adds	r4, #1
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052da:	4826      	ldr	r0, [pc, #152]	; (8005374 <_svfiprintf_r+0x1f0>)
 80052dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052e0:	2206      	movs	r2, #6
 80052e2:	f7fa ff7d 	bl	80001e0 <memchr>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d038      	beq.n	800535c <_svfiprintf_r+0x1d8>
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <_svfiprintf_r+0x1f4>)
 80052ec:	bb1b      	cbnz	r3, 8005336 <_svfiprintf_r+0x1b2>
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	3307      	adds	r3, #7
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	3308      	adds	r3, #8
 80052f8:	9303      	str	r3, [sp, #12]
 80052fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fc:	4433      	add	r3, r6
 80052fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005300:	e767      	b.n	80051d2 <_svfiprintf_r+0x4e>
 8005302:	fb0c 3202 	mla	r2, ip, r2, r3
 8005306:	460c      	mov	r4, r1
 8005308:	2001      	movs	r0, #1
 800530a:	e7a5      	b.n	8005258 <_svfiprintf_r+0xd4>
 800530c:	2300      	movs	r3, #0
 800530e:	3401      	adds	r4, #1
 8005310:	9305      	str	r3, [sp, #20]
 8005312:	4619      	mov	r1, r3
 8005314:	f04f 0c0a 	mov.w	ip, #10
 8005318:	4620      	mov	r0, r4
 800531a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800531e:	3a30      	subs	r2, #48	; 0x30
 8005320:	2a09      	cmp	r2, #9
 8005322:	d903      	bls.n	800532c <_svfiprintf_r+0x1a8>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0c5      	beq.n	80052b4 <_svfiprintf_r+0x130>
 8005328:	9105      	str	r1, [sp, #20]
 800532a:	e7c3      	b.n	80052b4 <_svfiprintf_r+0x130>
 800532c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005330:	4604      	mov	r4, r0
 8005332:	2301      	movs	r3, #1
 8005334:	e7f0      	b.n	8005318 <_svfiprintf_r+0x194>
 8005336:	ab03      	add	r3, sp, #12
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	462a      	mov	r2, r5
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <_svfiprintf_r+0x1f8>)
 800533e:	a904      	add	r1, sp, #16
 8005340:	4638      	mov	r0, r7
 8005342:	f3af 8000 	nop.w
 8005346:	1c42      	adds	r2, r0, #1
 8005348:	4606      	mov	r6, r0
 800534a:	d1d6      	bne.n	80052fa <_svfiprintf_r+0x176>
 800534c:	89ab      	ldrh	r3, [r5, #12]
 800534e:	065b      	lsls	r3, r3, #25
 8005350:	f53f af2c 	bmi.w	80051ac <_svfiprintf_r+0x28>
 8005354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005356:	b01d      	add	sp, #116	; 0x74
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	ab03      	add	r3, sp, #12
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	462a      	mov	r2, r5
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <_svfiprintf_r+0x1f8>)
 8005364:	a904      	add	r1, sp, #16
 8005366:	4638      	mov	r0, r7
 8005368:	f000 f87a 	bl	8005460 <_printf_i>
 800536c:	e7eb      	b.n	8005346 <_svfiprintf_r+0x1c2>
 800536e:	bf00      	nop
 8005370:	08005984 	.word	0x08005984
 8005374:	0800598e 	.word	0x0800598e
 8005378:	00000000 	.word	0x00000000
 800537c:	080050cd 	.word	0x080050cd
 8005380:	0800598a 	.word	0x0800598a

08005384 <_printf_common>:
 8005384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	4616      	mov	r6, r2
 800538a:	4699      	mov	r9, r3
 800538c:	688a      	ldr	r2, [r1, #8]
 800538e:	690b      	ldr	r3, [r1, #16]
 8005390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005394:	4293      	cmp	r3, r2
 8005396:	bfb8      	it	lt
 8005398:	4613      	movlt	r3, r2
 800539a:	6033      	str	r3, [r6, #0]
 800539c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053a0:	4607      	mov	r7, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	b10a      	cbz	r2, 80053aa <_printf_common+0x26>
 80053a6:	3301      	adds	r3, #1
 80053a8:	6033      	str	r3, [r6, #0]
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	0699      	lsls	r1, r3, #26
 80053ae:	bf42      	ittt	mi
 80053b0:	6833      	ldrmi	r3, [r6, #0]
 80053b2:	3302      	addmi	r3, #2
 80053b4:	6033      	strmi	r3, [r6, #0]
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	f015 0506 	ands.w	r5, r5, #6
 80053bc:	d106      	bne.n	80053cc <_printf_common+0x48>
 80053be:	f104 0a19 	add.w	sl, r4, #25
 80053c2:	68e3      	ldr	r3, [r4, #12]
 80053c4:	6832      	ldr	r2, [r6, #0]
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	42ab      	cmp	r3, r5
 80053ca:	dc26      	bgt.n	800541a <_printf_common+0x96>
 80053cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053d0:	1e13      	subs	r3, r2, #0
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	bf18      	it	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	0692      	lsls	r2, r2, #26
 80053da:	d42b      	bmi.n	8005434 <_printf_common+0xb0>
 80053dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e0:	4649      	mov	r1, r9
 80053e2:	4638      	mov	r0, r7
 80053e4:	47c0      	blx	r8
 80053e6:	3001      	adds	r0, #1
 80053e8:	d01e      	beq.n	8005428 <_printf_common+0xa4>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	68e5      	ldr	r5, [r4, #12]
 80053ee:	6832      	ldr	r2, [r6, #0]
 80053f0:	f003 0306 	and.w	r3, r3, #6
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	bf08      	it	eq
 80053f8:	1aad      	subeq	r5, r5, r2
 80053fa:	68a3      	ldr	r3, [r4, #8]
 80053fc:	6922      	ldr	r2, [r4, #16]
 80053fe:	bf0c      	ite	eq
 8005400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005404:	2500      	movne	r5, #0
 8005406:	4293      	cmp	r3, r2
 8005408:	bfc4      	itt	gt
 800540a:	1a9b      	subgt	r3, r3, r2
 800540c:	18ed      	addgt	r5, r5, r3
 800540e:	2600      	movs	r6, #0
 8005410:	341a      	adds	r4, #26
 8005412:	42b5      	cmp	r5, r6
 8005414:	d11a      	bne.n	800544c <_printf_common+0xc8>
 8005416:	2000      	movs	r0, #0
 8005418:	e008      	b.n	800542c <_printf_common+0xa8>
 800541a:	2301      	movs	r3, #1
 800541c:	4652      	mov	r2, sl
 800541e:	4649      	mov	r1, r9
 8005420:	4638      	mov	r0, r7
 8005422:	47c0      	blx	r8
 8005424:	3001      	adds	r0, #1
 8005426:	d103      	bne.n	8005430 <_printf_common+0xac>
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005430:	3501      	adds	r5, #1
 8005432:	e7c6      	b.n	80053c2 <_printf_common+0x3e>
 8005434:	18e1      	adds	r1, r4, r3
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	2030      	movs	r0, #48	; 0x30
 800543a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800543e:	4422      	add	r2, r4
 8005440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005448:	3302      	adds	r3, #2
 800544a:	e7c7      	b.n	80053dc <_printf_common+0x58>
 800544c:	2301      	movs	r3, #1
 800544e:	4622      	mov	r2, r4
 8005450:	4649      	mov	r1, r9
 8005452:	4638      	mov	r0, r7
 8005454:	47c0      	blx	r8
 8005456:	3001      	adds	r0, #1
 8005458:	d0e6      	beq.n	8005428 <_printf_common+0xa4>
 800545a:	3601      	adds	r6, #1
 800545c:	e7d9      	b.n	8005412 <_printf_common+0x8e>
	...

08005460 <_printf_i>:
 8005460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005464:	460c      	mov	r4, r1
 8005466:	4691      	mov	r9, r2
 8005468:	7e27      	ldrb	r7, [r4, #24]
 800546a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800546c:	2f78      	cmp	r7, #120	; 0x78
 800546e:	4680      	mov	r8, r0
 8005470:	469a      	mov	sl, r3
 8005472:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005476:	d807      	bhi.n	8005488 <_printf_i+0x28>
 8005478:	2f62      	cmp	r7, #98	; 0x62
 800547a:	d80a      	bhi.n	8005492 <_printf_i+0x32>
 800547c:	2f00      	cmp	r7, #0
 800547e:	f000 80d8 	beq.w	8005632 <_printf_i+0x1d2>
 8005482:	2f58      	cmp	r7, #88	; 0x58
 8005484:	f000 80a3 	beq.w	80055ce <_printf_i+0x16e>
 8005488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800548c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005490:	e03a      	b.n	8005508 <_printf_i+0xa8>
 8005492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005496:	2b15      	cmp	r3, #21
 8005498:	d8f6      	bhi.n	8005488 <_printf_i+0x28>
 800549a:	a001      	add	r0, pc, #4	; (adr r0, 80054a0 <_printf_i+0x40>)
 800549c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054a0:	080054f9 	.word	0x080054f9
 80054a4:	0800550d 	.word	0x0800550d
 80054a8:	08005489 	.word	0x08005489
 80054ac:	08005489 	.word	0x08005489
 80054b0:	08005489 	.word	0x08005489
 80054b4:	08005489 	.word	0x08005489
 80054b8:	0800550d 	.word	0x0800550d
 80054bc:	08005489 	.word	0x08005489
 80054c0:	08005489 	.word	0x08005489
 80054c4:	08005489 	.word	0x08005489
 80054c8:	08005489 	.word	0x08005489
 80054cc:	08005619 	.word	0x08005619
 80054d0:	0800553d 	.word	0x0800553d
 80054d4:	080055fb 	.word	0x080055fb
 80054d8:	08005489 	.word	0x08005489
 80054dc:	08005489 	.word	0x08005489
 80054e0:	0800563b 	.word	0x0800563b
 80054e4:	08005489 	.word	0x08005489
 80054e8:	0800553d 	.word	0x0800553d
 80054ec:	08005489 	.word	0x08005489
 80054f0:	08005489 	.word	0x08005489
 80054f4:	08005603 	.word	0x08005603
 80054f8:	680b      	ldr	r3, [r1, #0]
 80054fa:	1d1a      	adds	r2, r3, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	600a      	str	r2, [r1, #0]
 8005500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005508:	2301      	movs	r3, #1
 800550a:	e0a3      	b.n	8005654 <_printf_i+0x1f4>
 800550c:	6825      	ldr	r5, [r4, #0]
 800550e:	6808      	ldr	r0, [r1, #0]
 8005510:	062e      	lsls	r6, r5, #24
 8005512:	f100 0304 	add.w	r3, r0, #4
 8005516:	d50a      	bpl.n	800552e <_printf_i+0xce>
 8005518:	6805      	ldr	r5, [r0, #0]
 800551a:	600b      	str	r3, [r1, #0]
 800551c:	2d00      	cmp	r5, #0
 800551e:	da03      	bge.n	8005528 <_printf_i+0xc8>
 8005520:	232d      	movs	r3, #45	; 0x2d
 8005522:	426d      	negs	r5, r5
 8005524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005528:	485e      	ldr	r0, [pc, #376]	; (80056a4 <_printf_i+0x244>)
 800552a:	230a      	movs	r3, #10
 800552c:	e019      	b.n	8005562 <_printf_i+0x102>
 800552e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005532:	6805      	ldr	r5, [r0, #0]
 8005534:	600b      	str	r3, [r1, #0]
 8005536:	bf18      	it	ne
 8005538:	b22d      	sxthne	r5, r5
 800553a:	e7ef      	b.n	800551c <_printf_i+0xbc>
 800553c:	680b      	ldr	r3, [r1, #0]
 800553e:	6825      	ldr	r5, [r4, #0]
 8005540:	1d18      	adds	r0, r3, #4
 8005542:	6008      	str	r0, [r1, #0]
 8005544:	0628      	lsls	r0, r5, #24
 8005546:	d501      	bpl.n	800554c <_printf_i+0xec>
 8005548:	681d      	ldr	r5, [r3, #0]
 800554a:	e002      	b.n	8005552 <_printf_i+0xf2>
 800554c:	0669      	lsls	r1, r5, #25
 800554e:	d5fb      	bpl.n	8005548 <_printf_i+0xe8>
 8005550:	881d      	ldrh	r5, [r3, #0]
 8005552:	4854      	ldr	r0, [pc, #336]	; (80056a4 <_printf_i+0x244>)
 8005554:	2f6f      	cmp	r7, #111	; 0x6f
 8005556:	bf0c      	ite	eq
 8005558:	2308      	moveq	r3, #8
 800555a:	230a      	movne	r3, #10
 800555c:	2100      	movs	r1, #0
 800555e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005562:	6866      	ldr	r6, [r4, #4]
 8005564:	60a6      	str	r6, [r4, #8]
 8005566:	2e00      	cmp	r6, #0
 8005568:	bfa2      	ittt	ge
 800556a:	6821      	ldrge	r1, [r4, #0]
 800556c:	f021 0104 	bicge.w	r1, r1, #4
 8005570:	6021      	strge	r1, [r4, #0]
 8005572:	b90d      	cbnz	r5, 8005578 <_printf_i+0x118>
 8005574:	2e00      	cmp	r6, #0
 8005576:	d04d      	beq.n	8005614 <_printf_i+0x1b4>
 8005578:	4616      	mov	r6, r2
 800557a:	fbb5 f1f3 	udiv	r1, r5, r3
 800557e:	fb03 5711 	mls	r7, r3, r1, r5
 8005582:	5dc7      	ldrb	r7, [r0, r7]
 8005584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005588:	462f      	mov	r7, r5
 800558a:	42bb      	cmp	r3, r7
 800558c:	460d      	mov	r5, r1
 800558e:	d9f4      	bls.n	800557a <_printf_i+0x11a>
 8005590:	2b08      	cmp	r3, #8
 8005592:	d10b      	bne.n	80055ac <_printf_i+0x14c>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	07df      	lsls	r7, r3, #31
 8005598:	d508      	bpl.n	80055ac <_printf_i+0x14c>
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	6861      	ldr	r1, [r4, #4]
 800559e:	4299      	cmp	r1, r3
 80055a0:	bfde      	ittt	le
 80055a2:	2330      	movle	r3, #48	; 0x30
 80055a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055ac:	1b92      	subs	r2, r2, r6
 80055ae:	6122      	str	r2, [r4, #16]
 80055b0:	f8cd a000 	str.w	sl, [sp]
 80055b4:	464b      	mov	r3, r9
 80055b6:	aa03      	add	r2, sp, #12
 80055b8:	4621      	mov	r1, r4
 80055ba:	4640      	mov	r0, r8
 80055bc:	f7ff fee2 	bl	8005384 <_printf_common>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d14c      	bne.n	800565e <_printf_i+0x1fe>
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	b004      	add	sp, #16
 80055ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ce:	4835      	ldr	r0, [pc, #212]	; (80056a4 <_printf_i+0x244>)
 80055d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	680e      	ldr	r6, [r1, #0]
 80055d8:	061f      	lsls	r7, r3, #24
 80055da:	f856 5b04 	ldr.w	r5, [r6], #4
 80055de:	600e      	str	r6, [r1, #0]
 80055e0:	d514      	bpl.n	800560c <_printf_i+0x1ac>
 80055e2:	07d9      	lsls	r1, r3, #31
 80055e4:	bf44      	itt	mi
 80055e6:	f043 0320 	orrmi.w	r3, r3, #32
 80055ea:	6023      	strmi	r3, [r4, #0]
 80055ec:	b91d      	cbnz	r5, 80055f6 <_printf_i+0x196>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f023 0320 	bic.w	r3, r3, #32
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	2310      	movs	r3, #16
 80055f8:	e7b0      	b.n	800555c <_printf_i+0xfc>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	f043 0320 	orr.w	r3, r3, #32
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	2378      	movs	r3, #120	; 0x78
 8005604:	4828      	ldr	r0, [pc, #160]	; (80056a8 <_printf_i+0x248>)
 8005606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800560a:	e7e3      	b.n	80055d4 <_printf_i+0x174>
 800560c:	065e      	lsls	r6, r3, #25
 800560e:	bf48      	it	mi
 8005610:	b2ad      	uxthmi	r5, r5
 8005612:	e7e6      	b.n	80055e2 <_printf_i+0x182>
 8005614:	4616      	mov	r6, r2
 8005616:	e7bb      	b.n	8005590 <_printf_i+0x130>
 8005618:	680b      	ldr	r3, [r1, #0]
 800561a:	6826      	ldr	r6, [r4, #0]
 800561c:	6960      	ldr	r0, [r4, #20]
 800561e:	1d1d      	adds	r5, r3, #4
 8005620:	600d      	str	r5, [r1, #0]
 8005622:	0635      	lsls	r5, r6, #24
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	d501      	bpl.n	800562c <_printf_i+0x1cc>
 8005628:	6018      	str	r0, [r3, #0]
 800562a:	e002      	b.n	8005632 <_printf_i+0x1d2>
 800562c:	0671      	lsls	r1, r6, #25
 800562e:	d5fb      	bpl.n	8005628 <_printf_i+0x1c8>
 8005630:	8018      	strh	r0, [r3, #0]
 8005632:	2300      	movs	r3, #0
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	4616      	mov	r6, r2
 8005638:	e7ba      	b.n	80055b0 <_printf_i+0x150>
 800563a:	680b      	ldr	r3, [r1, #0]
 800563c:	1d1a      	adds	r2, r3, #4
 800563e:	600a      	str	r2, [r1, #0]
 8005640:	681e      	ldr	r6, [r3, #0]
 8005642:	6862      	ldr	r2, [r4, #4]
 8005644:	2100      	movs	r1, #0
 8005646:	4630      	mov	r0, r6
 8005648:	f7fa fdca 	bl	80001e0 <memchr>
 800564c:	b108      	cbz	r0, 8005652 <_printf_i+0x1f2>
 800564e:	1b80      	subs	r0, r0, r6
 8005650:	6060      	str	r0, [r4, #4]
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	2300      	movs	r3, #0
 8005658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800565c:	e7a8      	b.n	80055b0 <_printf_i+0x150>
 800565e:	6923      	ldr	r3, [r4, #16]
 8005660:	4632      	mov	r2, r6
 8005662:	4649      	mov	r1, r9
 8005664:	4640      	mov	r0, r8
 8005666:	47d0      	blx	sl
 8005668:	3001      	adds	r0, #1
 800566a:	d0ab      	beq.n	80055c4 <_printf_i+0x164>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	079b      	lsls	r3, r3, #30
 8005670:	d413      	bmi.n	800569a <_printf_i+0x23a>
 8005672:	68e0      	ldr	r0, [r4, #12]
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	4298      	cmp	r0, r3
 8005678:	bfb8      	it	lt
 800567a:	4618      	movlt	r0, r3
 800567c:	e7a4      	b.n	80055c8 <_printf_i+0x168>
 800567e:	2301      	movs	r3, #1
 8005680:	4632      	mov	r2, r6
 8005682:	4649      	mov	r1, r9
 8005684:	4640      	mov	r0, r8
 8005686:	47d0      	blx	sl
 8005688:	3001      	adds	r0, #1
 800568a:	d09b      	beq.n	80055c4 <_printf_i+0x164>
 800568c:	3501      	adds	r5, #1
 800568e:	68e3      	ldr	r3, [r4, #12]
 8005690:	9903      	ldr	r1, [sp, #12]
 8005692:	1a5b      	subs	r3, r3, r1
 8005694:	42ab      	cmp	r3, r5
 8005696:	dcf2      	bgt.n	800567e <_printf_i+0x21e>
 8005698:	e7eb      	b.n	8005672 <_printf_i+0x212>
 800569a:	2500      	movs	r5, #0
 800569c:	f104 0619 	add.w	r6, r4, #25
 80056a0:	e7f5      	b.n	800568e <_printf_i+0x22e>
 80056a2:	bf00      	nop
 80056a4:	08005995 	.word	0x08005995
 80056a8:	080059a6 	.word	0x080059a6

080056ac <memmove>:
 80056ac:	4288      	cmp	r0, r1
 80056ae:	b510      	push	{r4, lr}
 80056b0:	eb01 0402 	add.w	r4, r1, r2
 80056b4:	d902      	bls.n	80056bc <memmove+0x10>
 80056b6:	4284      	cmp	r4, r0
 80056b8:	4623      	mov	r3, r4
 80056ba:	d807      	bhi.n	80056cc <memmove+0x20>
 80056bc:	1e43      	subs	r3, r0, #1
 80056be:	42a1      	cmp	r1, r4
 80056c0:	d008      	beq.n	80056d4 <memmove+0x28>
 80056c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ca:	e7f8      	b.n	80056be <memmove+0x12>
 80056cc:	4402      	add	r2, r0
 80056ce:	4601      	mov	r1, r0
 80056d0:	428a      	cmp	r2, r1
 80056d2:	d100      	bne.n	80056d6 <memmove+0x2a>
 80056d4:	bd10      	pop	{r4, pc}
 80056d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056de:	e7f7      	b.n	80056d0 <memmove+0x24>

080056e0 <_free_r>:
 80056e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056e2:	2900      	cmp	r1, #0
 80056e4:	d048      	beq.n	8005778 <_free_r+0x98>
 80056e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ea:	9001      	str	r0, [sp, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f1a1 0404 	sub.w	r4, r1, #4
 80056f2:	bfb8      	it	lt
 80056f4:	18e4      	addlt	r4, r4, r3
 80056f6:	f000 f8d3 	bl	80058a0 <__malloc_lock>
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <_free_r+0x9c>)
 80056fc:	9801      	ldr	r0, [sp, #4]
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	4615      	mov	r5, r2
 8005702:	b933      	cbnz	r3, 8005712 <_free_r+0x32>
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	6014      	str	r4, [r2, #0]
 8005708:	b003      	add	sp, #12
 800570a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800570e:	f000 b8cd 	b.w	80058ac <__malloc_unlock>
 8005712:	42a3      	cmp	r3, r4
 8005714:	d90b      	bls.n	800572e <_free_r+0x4e>
 8005716:	6821      	ldr	r1, [r4, #0]
 8005718:	1862      	adds	r2, r4, r1
 800571a:	4293      	cmp	r3, r2
 800571c:	bf04      	itt	eq
 800571e:	681a      	ldreq	r2, [r3, #0]
 8005720:	685b      	ldreq	r3, [r3, #4]
 8005722:	6063      	str	r3, [r4, #4]
 8005724:	bf04      	itt	eq
 8005726:	1852      	addeq	r2, r2, r1
 8005728:	6022      	streq	r2, [r4, #0]
 800572a:	602c      	str	r4, [r5, #0]
 800572c:	e7ec      	b.n	8005708 <_free_r+0x28>
 800572e:	461a      	mov	r2, r3
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	b10b      	cbz	r3, 8005738 <_free_r+0x58>
 8005734:	42a3      	cmp	r3, r4
 8005736:	d9fa      	bls.n	800572e <_free_r+0x4e>
 8005738:	6811      	ldr	r1, [r2, #0]
 800573a:	1855      	adds	r5, r2, r1
 800573c:	42a5      	cmp	r5, r4
 800573e:	d10b      	bne.n	8005758 <_free_r+0x78>
 8005740:	6824      	ldr	r4, [r4, #0]
 8005742:	4421      	add	r1, r4
 8005744:	1854      	adds	r4, r2, r1
 8005746:	42a3      	cmp	r3, r4
 8005748:	6011      	str	r1, [r2, #0]
 800574a:	d1dd      	bne.n	8005708 <_free_r+0x28>
 800574c:	681c      	ldr	r4, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	6053      	str	r3, [r2, #4]
 8005752:	4421      	add	r1, r4
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	e7d7      	b.n	8005708 <_free_r+0x28>
 8005758:	d902      	bls.n	8005760 <_free_r+0x80>
 800575a:	230c      	movs	r3, #12
 800575c:	6003      	str	r3, [r0, #0]
 800575e:	e7d3      	b.n	8005708 <_free_r+0x28>
 8005760:	6825      	ldr	r5, [r4, #0]
 8005762:	1961      	adds	r1, r4, r5
 8005764:	428b      	cmp	r3, r1
 8005766:	bf04      	itt	eq
 8005768:	6819      	ldreq	r1, [r3, #0]
 800576a:	685b      	ldreq	r3, [r3, #4]
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	bf04      	itt	eq
 8005770:	1949      	addeq	r1, r1, r5
 8005772:	6021      	streq	r1, [r4, #0]
 8005774:	6054      	str	r4, [r2, #4]
 8005776:	e7c7      	b.n	8005708 <_free_r+0x28>
 8005778:	b003      	add	sp, #12
 800577a:	bd30      	pop	{r4, r5, pc}
 800577c:	200049a4 	.word	0x200049a4

08005780 <_malloc_r>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	1ccd      	adds	r5, r1, #3
 8005784:	f025 0503 	bic.w	r5, r5, #3
 8005788:	3508      	adds	r5, #8
 800578a:	2d0c      	cmp	r5, #12
 800578c:	bf38      	it	cc
 800578e:	250c      	movcc	r5, #12
 8005790:	2d00      	cmp	r5, #0
 8005792:	4606      	mov	r6, r0
 8005794:	db01      	blt.n	800579a <_malloc_r+0x1a>
 8005796:	42a9      	cmp	r1, r5
 8005798:	d903      	bls.n	80057a2 <_malloc_r+0x22>
 800579a:	230c      	movs	r3, #12
 800579c:	6033      	str	r3, [r6, #0]
 800579e:	2000      	movs	r0, #0
 80057a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a2:	f000 f87d 	bl	80058a0 <__malloc_lock>
 80057a6:	4921      	ldr	r1, [pc, #132]	; (800582c <_malloc_r+0xac>)
 80057a8:	680a      	ldr	r2, [r1, #0]
 80057aa:	4614      	mov	r4, r2
 80057ac:	b99c      	cbnz	r4, 80057d6 <_malloc_r+0x56>
 80057ae:	4f20      	ldr	r7, [pc, #128]	; (8005830 <_malloc_r+0xb0>)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	b923      	cbnz	r3, 80057be <_malloc_r+0x3e>
 80057b4:	4621      	mov	r1, r4
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f862 	bl	8005880 <_sbrk_r>
 80057bc:	6038      	str	r0, [r7, #0]
 80057be:	4629      	mov	r1, r5
 80057c0:	4630      	mov	r0, r6
 80057c2:	f000 f85d 	bl	8005880 <_sbrk_r>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d123      	bne.n	8005812 <_malloc_r+0x92>
 80057ca:	230c      	movs	r3, #12
 80057cc:	6033      	str	r3, [r6, #0]
 80057ce:	4630      	mov	r0, r6
 80057d0:	f000 f86c 	bl	80058ac <__malloc_unlock>
 80057d4:	e7e3      	b.n	800579e <_malloc_r+0x1e>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	1b5b      	subs	r3, r3, r5
 80057da:	d417      	bmi.n	800580c <_malloc_r+0x8c>
 80057dc:	2b0b      	cmp	r3, #11
 80057de:	d903      	bls.n	80057e8 <_malloc_r+0x68>
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	441c      	add	r4, r3
 80057e4:	6025      	str	r5, [r4, #0]
 80057e6:	e004      	b.n	80057f2 <_malloc_r+0x72>
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	42a2      	cmp	r2, r4
 80057ec:	bf0c      	ite	eq
 80057ee:	600b      	streq	r3, [r1, #0]
 80057f0:	6053      	strne	r3, [r2, #4]
 80057f2:	4630      	mov	r0, r6
 80057f4:	f000 f85a 	bl	80058ac <__malloc_unlock>
 80057f8:	f104 000b 	add.w	r0, r4, #11
 80057fc:	1d23      	adds	r3, r4, #4
 80057fe:	f020 0007 	bic.w	r0, r0, #7
 8005802:	1ac2      	subs	r2, r0, r3
 8005804:	d0cc      	beq.n	80057a0 <_malloc_r+0x20>
 8005806:	1a1b      	subs	r3, r3, r0
 8005808:	50a3      	str	r3, [r4, r2]
 800580a:	e7c9      	b.n	80057a0 <_malloc_r+0x20>
 800580c:	4622      	mov	r2, r4
 800580e:	6864      	ldr	r4, [r4, #4]
 8005810:	e7cc      	b.n	80057ac <_malloc_r+0x2c>
 8005812:	1cc4      	adds	r4, r0, #3
 8005814:	f024 0403 	bic.w	r4, r4, #3
 8005818:	42a0      	cmp	r0, r4
 800581a:	d0e3      	beq.n	80057e4 <_malloc_r+0x64>
 800581c:	1a21      	subs	r1, r4, r0
 800581e:	4630      	mov	r0, r6
 8005820:	f000 f82e 	bl	8005880 <_sbrk_r>
 8005824:	3001      	adds	r0, #1
 8005826:	d1dd      	bne.n	80057e4 <_malloc_r+0x64>
 8005828:	e7cf      	b.n	80057ca <_malloc_r+0x4a>
 800582a:	bf00      	nop
 800582c:	200049a4 	.word	0x200049a4
 8005830:	200049a8 	.word	0x200049a8

08005834 <_realloc_r>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	4607      	mov	r7, r0
 8005838:	4614      	mov	r4, r2
 800583a:	460e      	mov	r6, r1
 800583c:	b921      	cbnz	r1, 8005848 <_realloc_r+0x14>
 800583e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005842:	4611      	mov	r1, r2
 8005844:	f7ff bf9c 	b.w	8005780 <_malloc_r>
 8005848:	b922      	cbnz	r2, 8005854 <_realloc_r+0x20>
 800584a:	f7ff ff49 	bl	80056e0 <_free_r>
 800584e:	4625      	mov	r5, r4
 8005850:	4628      	mov	r0, r5
 8005852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005854:	f000 f830 	bl	80058b8 <_malloc_usable_size_r>
 8005858:	42a0      	cmp	r0, r4
 800585a:	d20f      	bcs.n	800587c <_realloc_r+0x48>
 800585c:	4621      	mov	r1, r4
 800585e:	4638      	mov	r0, r7
 8005860:	f7ff ff8e 	bl	8005780 <_malloc_r>
 8005864:	4605      	mov	r5, r0
 8005866:	2800      	cmp	r0, #0
 8005868:	d0f2      	beq.n	8005850 <_realloc_r+0x1c>
 800586a:	4631      	mov	r1, r6
 800586c:	4622      	mov	r2, r4
 800586e:	f7ff fbf7 	bl	8005060 <memcpy>
 8005872:	4631      	mov	r1, r6
 8005874:	4638      	mov	r0, r7
 8005876:	f7ff ff33 	bl	80056e0 <_free_r>
 800587a:	e7e9      	b.n	8005850 <_realloc_r+0x1c>
 800587c:	4635      	mov	r5, r6
 800587e:	e7e7      	b.n	8005850 <_realloc_r+0x1c>

08005880 <_sbrk_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d06      	ldr	r5, [pc, #24]	; (800589c <_sbrk_r+0x1c>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	f7fb f8de 	bl	8000a4c <_sbrk>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_sbrk_r+0x1a>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_sbrk_r+0x1a>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	20004aa4 	.word	0x20004aa4

080058a0 <__malloc_lock>:
 80058a0:	4801      	ldr	r0, [pc, #4]	; (80058a8 <__malloc_lock+0x8>)
 80058a2:	f000 b811 	b.w	80058c8 <__retarget_lock_acquire_recursive>
 80058a6:	bf00      	nop
 80058a8:	20004aac 	.word	0x20004aac

080058ac <__malloc_unlock>:
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <__malloc_unlock+0x8>)
 80058ae:	f000 b80c 	b.w	80058ca <__retarget_lock_release_recursive>
 80058b2:	bf00      	nop
 80058b4:	20004aac 	.word	0x20004aac

080058b8 <_malloc_usable_size_r>:
 80058b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058bc:	1f18      	subs	r0, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bfbc      	itt	lt
 80058c2:	580b      	ldrlt	r3, [r1, r0]
 80058c4:	18c0      	addlt	r0, r0, r3
 80058c6:	4770      	bx	lr

080058c8 <__retarget_lock_acquire_recursive>:
 80058c8:	4770      	bx	lr

080058ca <__retarget_lock_release_recursive>:
 80058ca:	4770      	bx	lr

080058cc <_init>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr

080058d8 <_fini>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	bf00      	nop
 80058dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058de:	bc08      	pop	{r3}
 80058e0:	469e      	mov	lr, r3
 80058e2:	4770      	bx	lr
