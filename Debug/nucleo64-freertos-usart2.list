
nucleo64-freertos-usart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ddc  08005ddc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de4  08005de4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a8c  20000084  08005e70  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b10  08005e70  00024b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019103  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003278  00000000  00000000  000391b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0003c430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000389f  00000000  00000000  0003ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141c8  00000000  00000000  00042327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976ce  00000000  00000000  000564ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edbbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056dc  00000000  00000000  000edc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c6c 	.word	0x08005c6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08005c6c 	.word	0x08005c6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fc6c 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f834 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8c6 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f89a 	bl	80006d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f002 f9b4 	bl	8002908 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of buttonControl */
  buttonControlHandle = osThreadNew(StartButtonControl, NULL, &buttonControl_attributes);
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <main+0x50>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x54>)
 80005a6:	f002 f9f9 	bl	800299c <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <main+0x58>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of ledControl */
  ledControlHandle = osThreadNew(StartLedControl, NULL, &ledControl_attributes);
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <main+0x5c>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <main+0x60>)
 80005b6:	f002 f9f1 	bl	800299c <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <main+0x64>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of serialControl */
  serialControlHandle = osThreadNew(StartSerialControl, NULL, &serialControl_attributes);
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <main+0x68>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <main+0x6c>)
 80005c6:	f002 f9e9 	bl	800299c <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <main+0x70>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f002 f9be 	bl	8002950 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x4c>
 80005d6:	bf00      	nop
 80005d8:	08005d24 	.word	0x08005d24
 80005dc:	08000849 	.word	0x08000849
 80005e0:	20004a70 	.word	0x20004a70
 80005e4:	08005d48 	.word	0x08005d48
 80005e8:	080009b1 	.word	0x080009b1
 80005ec:	20004a24 	.word	0x20004a24
 80005f0:	08005d6c 	.word	0x08005d6c
 80005f4:	08000af1 	.word	0x08000af1
 80005f8:	20004a28 	.word	0x20004a28

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 ff06 	bl	800541c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800066c:	2310      	movs	r3, #16
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067a:	2304      	movs	r3, #4
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fee4 	bl	8001450 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068e:	f000 fa85 	bl	8000b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f946 	bl	8001940 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ba:	f000 fa6f 	bl	8000b9c <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 fdc8 	bl	800229c <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 fa43 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20004a2c 	.word	0x20004a2c
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <MX_GPIO_Init+0x110>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a3c      	ldr	r2, [pc, #240]	; (8000834 <MX_GPIO_Init+0x110>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <MX_GPIO_Init+0x110>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <MX_GPIO_Init+0x110>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a35      	ldr	r2, [pc, #212]	; (8000834 <MX_GPIO_Init+0x110>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b33      	ldr	r3, [pc, #204]	; (8000834 <MX_GPIO_Init+0x110>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <MX_GPIO_Init+0x110>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a2e      	ldr	r2, [pc, #184]	; (8000834 <MX_GPIO_Init+0x110>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <MX_GPIO_Init+0x110>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_GPIO_Init+0x110>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a27      	ldr	r2, [pc, #156]	; (8000834 <MX_GPIO_Init+0x110>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_GPIO_Init+0x110>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4822      	ldr	r0, [pc, #136]	; (8000838 <MX_GPIO_Init+0x114>)
 80007b0:	f000 fe1a 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f24e 0102 	movw	r1, #57346	; 0xe002
 80007ba:	4820      	ldr	r0, [pc, #128]	; (800083c <MX_GPIO_Init+0x118>)
 80007bc:	f000 fe14 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_GPIO_Init+0x11c>)
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	481b      	ldr	r0, [pc, #108]	; (8000844 <MX_GPIO_Init+0x120>)
 80007d6:	f000 fc6b 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOT1_Pin BOT2_Pin BOT3_Pin BOT4_Pin */
  GPIO_InitStruct.Pin = BOT1_Pin|BOT2_Pin|BOT3_Pin|BOT4_Pin;
 80007da:	230f      	movs	r3, #15
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4815      	ldr	r0, [pc, #84]	; (8000844 <MX_GPIO_Init+0x120>)
 80007ee:	f000 fc5f 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f2:	2320      	movs	r3, #32
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_GPIO_Init+0x114>)
 800080a:	f000 fc51 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800080e:	f24e 0302 	movw	r3, #57346	; 0xe002
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_GPIO_Init+0x118>)
 8000828:	f000 fc42 	bl	80010b0 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400
 8000840:	10210000 	.word	0x10210000
 8000844:	40020800 	.word	0x40020800

08000848 <StartButtonControl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonControl */
void StartButtonControl(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int wrongSequence;
  /* Infinite loop */
  for(;;)
  {
    if(isReading)
 8000850:	4b53      	ldr	r3, [pc, #332]	; (80009a0 <StartButtonControl+0x158>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0fb      	beq.n	8000850 <StartButtonControl+0x8>
    {
      wrongSequence = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
      for(int i = 0; i<gameLevel && !wrongSequence && gameLevel!=MAX_LEVEL+1;)
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	e07e      	b.n	8000960 <StartButtonControl+0x118>
      {
        if(HAL_GPIO_ReadPin(GPIOC, BOT1_Pin))
 8000862:	2101      	movs	r1, #1
 8000864:	484f      	ldr	r0, [pc, #316]	; (80009a4 <StartButtonControl+0x15c>)
 8000866:	f000 fda7 	bl	80013b8 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d017      	beq.n	80008a0 <StartButtonControl+0x58>
        {
            if(game[i]!=4)
 8000870:	4a4d      	ldr	r2, [pc, #308]	; (80009a8 <StartButtonControl+0x160>)
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d002      	beq.n	8000882 <StartButtonControl+0x3a>
            	wrongSequence = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e006      	b.n	8000890 <StartButtonControl+0x48>
            else
            	i++;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	3301      	adds	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
            while (HAL_GPIO_ReadPin(GPIOC, BOT1_Pin)){osDelay(30);}
 8000888:	e002      	b.n	8000890 <StartButtonControl+0x48>
 800088a:	201e      	movs	r0, #30
 800088c:	f002 f918 	bl	8002ac0 <osDelay>
 8000890:	2101      	movs	r1, #1
 8000892:	4844      	ldr	r0, [pc, #272]	; (80009a4 <StartButtonControl+0x15c>)
 8000894:	f000 fd90 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1f5      	bne.n	800088a <StartButtonControl+0x42>
 800089e:	e05f      	b.n	8000960 <StartButtonControl+0x118>
        }
        else if(HAL_GPIO_ReadPin(GPIOC, BOT2_Pin))
 80008a0:	2102      	movs	r1, #2
 80008a2:	4840      	ldr	r0, [pc, #256]	; (80009a4 <StartButtonControl+0x15c>)
 80008a4:	f000 fd88 	bl	80013b8 <HAL_GPIO_ReadPin>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d017      	beq.n	80008de <StartButtonControl+0x96>
        {
            if(game[i]!=3)
 80008ae:	4a3e      	ldr	r2, [pc, #248]	; (80009a8 <StartButtonControl+0x160>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d002      	beq.n	80008c0 <StartButtonControl+0x78>
            	wrongSequence = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e006      	b.n	80008ce <StartButtonControl+0x86>
            else
            	i++;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
            while (HAL_GPIO_ReadPin(GPIOC, BOT2_Pin)){osDelay(30);}
 80008c6:	e002      	b.n	80008ce <StartButtonControl+0x86>
 80008c8:	201e      	movs	r0, #30
 80008ca:	f002 f8f9 	bl	8002ac0 <osDelay>
 80008ce:	2102      	movs	r1, #2
 80008d0:	4834      	ldr	r0, [pc, #208]	; (80009a4 <StartButtonControl+0x15c>)
 80008d2:	f000 fd71 	bl	80013b8 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f5      	bne.n	80008c8 <StartButtonControl+0x80>
 80008dc:	e040      	b.n	8000960 <StartButtonControl+0x118>
        }
        else if(HAL_GPIO_ReadPin(GPIOC, BOT3_Pin))
 80008de:	2104      	movs	r1, #4
 80008e0:	4830      	ldr	r0, [pc, #192]	; (80009a4 <StartButtonControl+0x15c>)
 80008e2:	f000 fd69 	bl	80013b8 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d017      	beq.n	800091c <StartButtonControl+0xd4>
        {
            if(game[i]!=2)
 80008ec:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <StartButtonControl+0x160>)
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d002      	beq.n	80008fe <StartButtonControl+0xb6>
            	wrongSequence = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	e006      	b.n	800090c <StartButtonControl+0xc4>
            else
            	i++;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3301      	adds	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
            while (HAL_GPIO_ReadPin(GPIOC, BOT3_Pin)){osDelay(30);}
 8000904:	e002      	b.n	800090c <StartButtonControl+0xc4>
 8000906:	201e      	movs	r0, #30
 8000908:	f002 f8da 	bl	8002ac0 <osDelay>
 800090c:	2104      	movs	r1, #4
 800090e:	4825      	ldr	r0, [pc, #148]	; (80009a4 <StartButtonControl+0x15c>)
 8000910:	f000 fd52 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f5      	bne.n	8000906 <StartButtonControl+0xbe>
 800091a:	e021      	b.n	8000960 <StartButtonControl+0x118>
        }
        else if(HAL_GPIO_ReadPin(GPIOC, BOT4_Pin))
 800091c:	2108      	movs	r1, #8
 800091e:	4821      	ldr	r0, [pc, #132]	; (80009a4 <StartButtonControl+0x15c>)
 8000920:	f000 fd4a 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d017      	beq.n	800095a <StartButtonControl+0x112>
        {
            if(game[i]!=1)
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <StartButtonControl+0x160>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d002      	beq.n	800093c <StartButtonControl+0xf4>
            	wrongSequence = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e006      	b.n	800094a <StartButtonControl+0x102>
            else
            	i++;
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	3301      	adds	r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
            while (HAL_GPIO_ReadPin(GPIOC, BOT4_Pin)){osDelay(30);}
 8000942:	e002      	b.n	800094a <StartButtonControl+0x102>
 8000944:	201e      	movs	r0, #30
 8000946:	f002 f8bb 	bl	8002ac0 <osDelay>
 800094a:	2108      	movs	r1, #8
 800094c:	4815      	ldr	r0, [pc, #84]	; (80009a4 <StartButtonControl+0x15c>)
 800094e:	f000 fd33 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <StartButtonControl+0xfc>
 8000958:	e002      	b.n	8000960 <StartButtonControl+0x118>
        }
        else{osDelay(30);}
 800095a:	201e      	movs	r0, #30
 800095c:	f002 f8b0 	bl	8002ac0 <osDelay>
      for(int i = 0; i<gameLevel && !wrongSequence && gameLevel!=MAX_LEVEL+1;)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <StartButtonControl+0x164>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	4293      	cmp	r3, r2
 800096a:	da07      	bge.n	800097c <StartButtonControl+0x134>
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d104      	bne.n	800097c <StartButtonControl+0x134>
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <StartButtonControl+0x164>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b06      	cmp	r3, #6
 8000978:	f47f af73 	bne.w	8000862 <StartButtonControl+0x1a>
      }
      gameLevel = wrongSequence ? 1 : (gameLevel+1);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d104      	bne.n	800098c <StartButtonControl+0x144>
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <StartButtonControl+0x164>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	e000      	b.n	800098e <StartButtonControl+0x146>
 800098c:	2301      	movs	r3, #1
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <StartButtonControl+0x164>)
 8000990:	7013      	strb	r3, [r2, #0]
      isReading = 0;
 8000992:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <StartButtonControl+0x158>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
      osDelay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f002 f891 	bl	8002ac0 <osDelay>
    if(isReading)
 800099e:	e757      	b.n	8000850 <StartButtonControl+0x8>
 80009a0:	200000a0 	.word	0x200000a0
 80009a4:	40020800 	.word	0x40020800
 80009a8:	20000000 	.word	0x20000000
 80009ac:	2000000f 	.word	0x2000000f

080009b0 <StartLedControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedControl */
void StartLedControl(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedControl */
  /* Infinite loop */
  for(;;)
  {
    if (!isReading){
 80009b8:	4b49      	ldr	r3, [pc, #292]	; (8000ae0 <StartLedControl+0x130>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f040 808b 	bne.w	8000ad8 <StartLedControl+0x128>
      if(gameLevel!=MAX_LEVEL+1)
 80009c2:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <StartLedControl+0x134>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d06f      	beq.n	8000aaa <StartLedControl+0xfa>
      {
          for(int x=0;x<gameLevel;x++){
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e04b      	b.n	8000a68 <StartLedControl+0xb8>
            HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d6:	4844      	ldr	r0, [pc, #272]	; (8000ae8 <StartLedControl+0x138>)
 80009d8:	f000 fd06 	bl	80013e8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e2:	4841      	ldr	r0, [pc, #260]	; (8000ae8 <StartLedControl+0x138>)
 80009e4:	f000 fd00 	bl	80013e8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ee:	483e      	ldr	r0, [pc, #248]	; (8000ae8 <StartLedControl+0x138>)
 80009f0:	f000 fcfa 	bl	80013e8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	483b      	ldr	r0, [pc, #236]	; (8000ae8 <StartLedControl+0x138>)
 80009fa:	f000 fcf5 	bl	80013e8 <HAL_GPIO_WritePin>
            switch (game[x])
 80009fe:	4a3b      	ldr	r2, [pc, #236]	; (8000aec <StartLedControl+0x13c>)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d826      	bhi.n	8000a5a <StartLedControl+0xaa>
 8000a0c:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <StartLedControl+0x64>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000a33 	.word	0x08000a33
 8000a1c:	08000a41 	.word	0x08000a41
 8000a20:	08000a4f 	.word	0x08000a4f
            {
            case 1:
              HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	482f      	ldr	r0, [pc, #188]	; (8000ae8 <StartLedControl+0x138>)
 8000a2c:	f000 fcdc 	bl	80013e8 <HAL_GPIO_WritePin>
              break;
 8000a30:	e013      	b.n	8000a5a <StartLedControl+0xaa>
            case 2:
              HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a38:	482b      	ldr	r0, [pc, #172]	; (8000ae8 <StartLedControl+0x138>)
 8000a3a:	f000 fcd5 	bl	80013e8 <HAL_GPIO_WritePin>
              break;
 8000a3e:	e00c      	b.n	8000a5a <StartLedControl+0xaa>
            case 3:
              HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a46:	4828      	ldr	r0, [pc, #160]	; (8000ae8 <StartLedControl+0x138>)
 8000a48:	f000 fcce 	bl	80013e8 <HAL_GPIO_WritePin>
              break;
 8000a4c:	e005      	b.n	8000a5a <StartLedControl+0xaa>
            case 4:
              HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2102      	movs	r1, #2
 8000a52:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <StartLedControl+0x138>)
 8000a54:	f000 fcc8 	bl	80013e8 <HAL_GPIO_WritePin>
              break;
 8000a58:	bf00      	nop
            }
            osDelay(1000);
 8000a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5e:	f002 f82f 	bl	8002ac0 <osDelay>
          for(int x=0;x<gameLevel;x++){
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3301      	adds	r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <StartLedControl+0x134>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4293      	cmp	r3, r2
 8000a72:	dbad      	blt.n	80009d0 <StartLedControl+0x20>
          }
          HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <StartLedControl+0x138>)
 8000a7c:	f000 fcb4 	bl	80013e8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <StartLedControl+0x138>)
 8000a88:	f000 fcae 	bl	80013e8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <StartLedControl+0x138>)
 8000a94:	f000 fca8 	bl	80013e8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <StartLedControl+0x138>)
 8000a9e:	f000 fca3 	bl	80013e8 <HAL_GPIO_WritePin>
          isReading=1;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <StartLedControl+0x130>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	e016      	b.n	8000ad8 <StartLedControl+0x128>
      }
      else
      {
    	  HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <StartLedControl+0x138>)
 8000ab0:	f000 fcb3 	bl	800141a <HAL_GPIO_TogglePin>
    	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <StartLedControl+0x138>)
 8000aba:	f000 fcae 	bl	800141a <HAL_GPIO_TogglePin>
    	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <StartLedControl+0x138>)
 8000ac4:	f000 fca9 	bl	800141a <HAL_GPIO_TogglePin>
    	  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <StartLedControl+0x138>)
 8000acc:	f000 fca5 	bl	800141a <HAL_GPIO_TogglePin>
          osDelay(500);
 8000ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad4:	f001 fff4 	bl	8002ac0 <osDelay>
      }
    }
    osDelay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f001 fff1 	bl	8002ac0 <osDelay>
    if (!isReading){
 8000ade:	e76b      	b.n	80009b8 <StartLedControl+0x8>
 8000ae0:	200000a0 	.word	0x200000a0
 8000ae4:	2000000f 	.word	0x2000000f
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	20000000 	.word	0x20000000

08000af0 <StartSerialControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialControl */
void StartSerialControl(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialControl */
  int level = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	if(level!=gameLevel)
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <StartSerialControl+0x74>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d028      	beq.n	8000b5a <StartSerialControl+0x6a>
	{
		if(gameLevel!=MAX_LEVEL+1)
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <StartSerialControl+0x74>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b06      	cmp	r3, #6
 8000b0e:	d011      	beq.n	8000b34 <StartSerialControl+0x44>
		{
			sprintf((char *) msg, "Dificuldade: %d\r\n", gameLevel);
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <StartSerialControl+0x74>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4914      	ldr	r1, [pc, #80]	; (8000b68 <StartSerialControl+0x78>)
 8000b18:	4814      	ldr	r0, [pc, #80]	; (8000b6c <StartSerialControl+0x7c>)
 8000b1a:	f004 fc87 	bl	800542c <siprintf>
			HAL_UART_Transmit(&huart2, msg, strlen((const char *)msg), 10);
 8000b1e:	4813      	ldr	r0, [pc, #76]	; (8000b6c <StartSerialControl+0x7c>)
 8000b20:	f7ff fb5e 	bl	80001e0 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	230a      	movs	r3, #10
 8000b2a:	4910      	ldr	r1, [pc, #64]	; (8000b6c <StartSerialControl+0x7c>)
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <StartSerialControl+0x80>)
 8000b2e:	f001 fc02 	bl	8002336 <HAL_UART_Transmit>
 8000b32:	e00f      	b.n	8000b54 <StartSerialControl+0x64>
		}
		else
		{
			sprintf((char *) msg, "PARAB%cNS! Voc%c ganhou. Pressione Reset para iniciar um novo jogo.\r\n",144,136);
 8000b34:	2388      	movs	r3, #136	; 0x88
 8000b36:	2290      	movs	r2, #144	; 0x90
 8000b38:	490e      	ldr	r1, [pc, #56]	; (8000b74 <StartSerialControl+0x84>)
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <StartSerialControl+0x7c>)
 8000b3c:	f004 fc76 	bl	800542c <siprintf>
			HAL_UART_Transmit(&huart2, msg, strlen((const char *)msg), 10);
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <StartSerialControl+0x7c>)
 8000b42:	f7ff fb4d 	bl	80001e0 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <StartSerialControl+0x7c>)
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <StartSerialControl+0x80>)
 8000b50:	f001 fbf1 	bl	8002336 <HAL_UART_Transmit>
		}
		level = gameLevel;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <StartSerialControl+0x74>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
	}
    osDelay(1);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f001 ffb0 	bl	8002ac0 <osDelay>
	if(level!=gameLevel)
 8000b60:	e7cc      	b.n	8000afc <StartSerialControl+0xc>
 8000b62:	bf00      	nop
 8000b64:	2000000f 	.word	0x2000000f
 8000b68:	08005cb0 	.word	0x08005cb0
 8000b6c:	200049c0 	.word	0x200049c0
 8000b70:	20004a2c 	.word	0x20004a2c
 8000b74:	08005cc4 	.word	0x08005cc4

08000b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8a:	f000 f98f 	bl	8000eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40000c00 	.word	0x40000c00

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_MspInit+0x54>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_MspInit+0x54>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x54>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_MspInit+0x54>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_MspInit+0x54>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	210f      	movs	r1, #15
 8000bea:	f06f 0001 	mvn.w	r0, #1
 8000bee:	f000 fa35 	bl	800105c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_UART_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12b      	bne.n	8000c7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_UART_MspInit+0x88>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_UART_MspInit+0x88>)
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_UART_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_UART_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_UART_MspInit+0x88>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_UART_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c5a:	230c      	movs	r3, #12
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_UART_MspInit+0x8c>)
 8000c76:	f000 fa1b 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40004400 	.word	0x40004400
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	2032      	movs	r0, #50	; 0x32
 8000ca6:	f000 f9d9 	bl	800105c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000caa:	2032      	movs	r0, #50	; 0x32
 8000cac:	f000 f9f2 	bl	8001094 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ccc:	f107 0210 	add.w	r2, r7, #16
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f82e 	bl	8001d38 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cdc:	f001 f804 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <HAL_InitTick+0xa8>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	0c9b      	lsrs	r3, r3, #18
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_InitTick+0xac>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <HAL_InitTick+0xb0>)
 8000cf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_InitTick+0xac>)
 8000cfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d00:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_InitTick+0xac>)
 8000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d06:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_InitTick+0xac>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_InitTick+0xac>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <HAL_InitTick+0xac>)
 8000d16:	f001 f841 	bl	8001d9c <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d104      	bne.n	8000d2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <HAL_InitTick+0xac>)
 8000d22:	f001 f895 	bl	8001e50 <HAL_TIM_Base_Start_IT>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3730      	adds	r7, #48	; 0x30
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	20004a74 	.word	0x20004a74
 8000d40:	40000c00 	.word	0x40000c00

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM5_IRQHandler+0x10>)
 8000d76:	f001 f8cd 	bl	8001f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20004a74 	.word	0x20004a74

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f004 fafa 	bl	80053ac <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20020000 	.word	0x20020000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	200000a4 	.word	0x200000a4
 8000dec:	20004b10 	.word	0x20004b10

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1a:	490e      	ldr	r1, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e1c:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e30:	4c0b      	ldr	r4, [pc, #44]	; (8000e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e3e:	f7ff ffd7 	bl	8000df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f004 fab9 	bl	80053b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fb9f 	bl	8000588 <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e58:	08005dec 	.word	0x08005dec
  ldr r2, =_sbss
 8000e5c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000e60:	20004b10 	.word	0x20004b10

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_Init+0x40>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_Init+0x40>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x40>)
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f8d8 	bl	8001046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fefa 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fe84 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000018 	.word	0x20000018
 8000ed0:	20004abc 	.word	0x20004abc

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20004abc 	.word	0x20004abc

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff4c 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106e:	f7ff ff61 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 8001072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ffb1 	bl	8000fe0 <NVIC_EncodePriority>
 800107e:	4602      	mov	r2, r0
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff80 	bl	8000f8c <__NVIC_SetPriority>
}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff54 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e159      	b.n	8001380 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8148 	bne.w	800137a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80a2 	beq.w	800137a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b57      	ldr	r3, [pc, #348]	; (8001398 <HAL_GPIO_Init+0x2e8>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a56      	ldr	r2, [pc, #344]	; (8001398 <HAL_GPIO_Init+0x2e8>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <HAL_GPIO_Init+0x2e8>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_GPIO_Init+0x2ec>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a49      	ldr	r2, [pc, #292]	; (80013a0 <HAL_GPIO_Init+0x2f0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x202>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a48      	ldr	r2, [pc, #288]	; (80013a4 <HAL_GPIO_Init+0x2f4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x1fe>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <HAL_GPIO_Init+0x2f8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x1fa>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a46      	ldr	r2, [pc, #280]	; (80013ac <HAL_GPIO_Init+0x2fc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x1f6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <HAL_GPIO_Init+0x300>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x1f2>
 800129e:	2304      	movs	r3, #4
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012b2:	2300      	movs	r3, #0
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c4:	4935      	ldr	r1, [pc, #212]	; (800139c <HAL_GPIO_Init+0x2ec>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001320:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134a:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x304>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001374:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3301      	adds	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	f67f aea2 	bls.w	80010cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e001      	b.n	80013da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141a:	b480      	push	{r7}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142c:	887a      	ldrh	r2, [r7, #2]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	041a      	lsls	r2, r3, #16
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43d9      	mvns	r1, r3
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	400b      	ands	r3, r1
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	619a      	str	r2, [r3, #24]
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e264      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d075      	beq.n	800155a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146e:	4ba3      	ldr	r3, [pc, #652]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b04      	cmp	r3, #4
 8001478:	d00c      	beq.n	8001494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147a:	4ba0      	ldr	r3, [pc, #640]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001482:	2b08      	cmp	r3, #8
 8001484:	d112      	bne.n	80014ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001486:	4b9d      	ldr	r3, [pc, #628]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001492:	d10b      	bne.n	80014ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	4b99      	ldr	r3, [pc, #612]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d05b      	beq.n	8001558 <HAL_RCC_OscConfig+0x108>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d157      	bne.n	8001558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e23f      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x74>
 80014b6:	4b91      	ldr	r3, [pc, #580]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a90      	ldr	r2, [pc, #576]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0xb0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x98>
 80014ce:	4b8b      	ldr	r3, [pc, #556]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a8a      	ldr	r2, [pc, #552]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b88      	ldr	r3, [pc, #544]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a87      	ldr	r2, [pc, #540]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0xb0>
 80014e8:	4b84      	ldr	r3, [pc, #528]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a83      	ldr	r2, [pc, #524]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b81      	ldr	r3, [pc, #516]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a80      	ldr	r2, [pc, #512]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fce4 	bl	8000ed4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fce0 	bl	8000ed4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e204      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b76      	ldr	r3, [pc, #472]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0xc0>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fcd0 	bl	8000ed4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fccc 	bl	8000ed4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1f0      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	4b6c      	ldr	r3, [pc, #432]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0xe8>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d063      	beq.n	800162e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001572:	4b62      	ldr	r3, [pc, #392]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157a:	2b08      	cmp	r3, #8
 800157c:	d11c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157e:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x152>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1c4      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b56      	ldr	r3, [pc, #344]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4952      	ldr	r1, [pc, #328]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	e03a      	b.n	800162e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <HAL_RCC_OscConfig+0x2b0>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fc85 	bl	8000ed4 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fc81 	bl	8000ed4 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1a5      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4940      	ldr	r1, [pc, #256]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <HAL_RCC_OscConfig+0x2b0>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fc64 	bl	8000ed4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fc60 	bl	8000ed4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e184      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d030      	beq.n	800169c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d016      	beq.n	8001670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_RCC_OscConfig+0x2b4>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fc44 	bl	8000ed4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fc40 	bl	8000ed4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e164      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x200>
 800166e:	e015      	b.n	800169c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_RCC_OscConfig+0x2b4>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff fc2d 	bl	8000ed4 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167e:	f7ff fc29 	bl	8000ed4 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e14d      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 8001692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a0 	beq.w	80017ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d6:	2301      	movs	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x2b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d121      	bne.n	800172a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_RCC_OscConfig+0x2b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_RCC_OscConfig+0x2b8>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fbef 	bl	8000ed4 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	e011      	b.n	800171e <HAL_RCC_OscConfig+0x2ce>
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	42470000 	.word	0x42470000
 8001704:	42470e80 	.word	0x42470e80
 8001708:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170c:	f7ff fbe2 	bl	8000ed4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e106      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b85      	ldr	r3, [pc, #532]	; (8001934 <HAL_RCC_OscConfig+0x4e4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x2f0>
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a80      	ldr	r2, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	e01c      	b.n	800177a <HAL_RCC_OscConfig+0x32a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b05      	cmp	r3, #5
 8001746:	d10c      	bne.n	8001762 <HAL_RCC_OscConfig+0x312>
 8001748:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	4a7a      	ldr	r2, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6713      	str	r3, [r2, #112]	; 0x70
 8001754:	4b78      	ldr	r3, [pc, #480]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	4a77      	ldr	r2, [pc, #476]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6713      	str	r3, [r2, #112]	; 0x70
 8001760:	e00b      	b.n	800177a <HAL_RCC_OscConfig+0x32a>
 8001762:	4b75      	ldr	r3, [pc, #468]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	4a74      	ldr	r2, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	6713      	str	r3, [r2, #112]	; 0x70
 800176e:	4b72      	ldr	r3, [pc, #456]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	4a71      	ldr	r2, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 8001774:	f023 0304 	bic.w	r3, r3, #4
 8001778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d015      	beq.n	80017ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7ff fba7 	bl	8000ed4 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f7ff fba3 	bl	8000ed4 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0c5      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0ee      	beq.n	800178a <HAL_RCC_OscConfig+0x33a>
 80017ac:	e014      	b.n	80017d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fb91 	bl	8000ed4 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f7ff fb8d 	bl	8000ed4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0af      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1ee      	bne.n	80017b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d105      	bne.n	80017ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017de:	4b56      	ldr	r3, [pc, #344]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a55      	ldr	r2, [pc, #340]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 80017e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 809b 	beq.w	800192a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017f4:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d05c      	beq.n	80018ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d141      	bne.n	800188c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_OscConfig+0x4ec>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fb61 	bl	8000ed4 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff fb5d 	bl	8000ed4 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e081      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001828:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	019b      	lsls	r3, r3, #6
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	3b01      	subs	r3, #1
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	061b      	lsls	r3, r3, #24
 8001858:	4937      	ldr	r1, [pc, #220]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_OscConfig+0x4ec>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fb36 	bl	8000ed4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fb32 	bl	8000ed4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e056      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x41c>
 800188a:	e04e      	b.n	800192a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_OscConfig+0x4ec>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff fb1f 	bl	8000ed4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff fb1b 	bl	8000ed4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e03f      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x44a>
 80018b8:	e037      	b.n	800192a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e032      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_RCC_OscConfig+0x4e8>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d028      	beq.n	8001926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d121      	bne.n	8001926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d11a      	bne.n	8001926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fe:	4293      	cmp	r3, r2
 8001900:	d111      	bne.n	8001926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40007000 	.word	0x40007000
 8001938:	40023800 	.word	0x40023800
 800193c:	42470060 	.word	0x42470060

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0cc      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d90c      	bls.n	800197c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b63      	ldr	r3, [pc, #396]	; (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0b8      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001994:	4b59      	ldr	r3, [pc, #356]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800199e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ac:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	494d      	ldr	r1, [pc, #308]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d044      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d119      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e07f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fe:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e067      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4934      	ldr	r1, [pc, #208]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a30:	f7ff fa50 	bl	8000ed4 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7ff fa4c 	bl	8000ed4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e04f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d20c      	bcs.n	8001a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e032      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4916      	ldr	r1, [pc, #88]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	490e      	ldr	r1, [pc, #56]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ac6:	f000 f821 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	490a      	ldr	r1, [pc, #40]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	5ccb      	ldrb	r3, [r1, r3]
 8001ada:	fa22 f303 	lsr.w	r3, r2, r3
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f8d2 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023c00 	.word	0x40023c00
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08005d90 	.word	0x08005d90
 8001b04:	20000010 	.word	0x20000010
 8001b08:	20000014 	.word	0x20000014

08001b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b24:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d00d      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x40>
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	f200 80bd 	bhi.w	8001cb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b3e:	e0b7      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b42:	60bb      	str	r3, [r7, #8]
       break;
 8001b44:	e0b7      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b46:	4b61      	ldr	r3, [pc, #388]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b48:	60bb      	str	r3, [r7, #8]
      break;
 8001b4a:	e0b4      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b4c:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d04d      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b62:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b72:	f04f 0100 	mov.w	r1, #0
 8001b76:	ea02 0800 	and.w	r8, r2, r0
 8001b7a:	ea03 0901 	and.w	r9, r3, r1
 8001b7e:	4640      	mov	r0, r8
 8001b80:	4649      	mov	r1, r9
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	014b      	lsls	r3, r1, #5
 8001b8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b90:	0142      	lsls	r2, r0, #5
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	ebb0 0008 	subs.w	r0, r0, r8
 8001b9a:	eb61 0109 	sbc.w	r1, r1, r9
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	018b      	lsls	r3, r1, #6
 8001ba8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bac:	0182      	lsls	r2, r0, #6
 8001bae:	1a12      	subs	r2, r2, r0
 8001bb0:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb4:	f04f 0000 	mov.w	r0, #0
 8001bb8:	f04f 0100 	mov.w	r1, #0
 8001bbc:	00d9      	lsls	r1, r3, #3
 8001bbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bc2:	00d0      	lsls	r0, r2, #3
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	eb12 0208 	adds.w	r2, r2, r8
 8001bcc:	eb43 0309 	adc.w	r3, r3, r9
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	0259      	lsls	r1, r3, #9
 8001bda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bde:	0250      	lsls	r0, r2, #9
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	f7fe fb4e 	bl	8000290 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e04a      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	461a      	mov	r2, r3
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	ea02 0400 	and.w	r4, r2, r0
 8001c16:	ea03 0501 	and.w	r5, r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	014b      	lsls	r3, r1, #5
 8001c28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c2c:	0142      	lsls	r2, r0, #5
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	1b00      	subs	r0, r0, r4
 8001c34:	eb61 0105 	sbc.w	r1, r1, r5
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	018b      	lsls	r3, r1, #6
 8001c42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c46:	0182      	lsls	r2, r0, #6
 8001c48:	1a12      	subs	r2, r2, r0
 8001c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4e:	f04f 0000 	mov.w	r0, #0
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	00d9      	lsls	r1, r3, #3
 8001c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c5c:	00d0      	lsls	r0, r2, #3
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	1912      	adds	r2, r2, r4
 8001c64:	eb45 0303 	adc.w	r3, r5, r3
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0299      	lsls	r1, r3, #10
 8001c72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c76:	0290      	lsls	r0, r2, #10
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f7fe fb02 	bl	8000290 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	60bb      	str	r3, [r7, #8]
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cb2:	60bb      	str	r3, [r7, #8]
      break;
 8001cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	007a1200 	.word	0x007a1200

08001cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000010 	.word	0x20000010

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cec:	f7ff fff0 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	08005da0 	.word	0x08005da0

08001d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d14:	f7ff ffdc 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0b5b      	lsrs	r3, r3, #13
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08005da0 	.word	0x08005da0

08001d38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	220f      	movs	r2, #15
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_RCC_GetClockConfig+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0207 	and.w	r2, r3, #7
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e041      	b.n	8001e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f839 	bl	8001e3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f000 f9ca 	bl	8002174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d001      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e044      	b.n	8001ef2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d018      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x6c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d013      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x6c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00e      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x6c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x6c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_TIM_Base_Start_IT+0xbc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x6c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_TIM_Base_Start_IT+0xc0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d111      	bne.n	8001ee0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d010      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ede:	e007      	b.n	8001ef0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40000800 	.word	0x40000800
 8001f0c:	40000c00 	.word	0x40000c00
 8001f10:	40014000 	.word	0x40014000

08001f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d122      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d11b      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0202 	mvn.w	r2, #2
 8001f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8ee 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8e0 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8f1 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d122      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0204 	mvn.w	r2, #4
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8c4 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8b6 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8c7 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d11b      	bne.n	8002018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0208 	mvn.w	r2, #8
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f89a 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f88c 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f89d 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b10      	cmp	r3, #16
 8002024:	d122      	bne.n	800206c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b10      	cmp	r3, #16
 8002032:	d11b      	bne.n	800206c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0210 	mvn.w	r2, #16
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2208      	movs	r2, #8
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f870 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f862 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f873 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0201 	mvn.w	r2, #1
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fd70 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b80      	cmp	r3, #128	; 0x80
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8e2 	bl	8002288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b40      	cmp	r3, #64	; 0x40
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f838 	bl	8002160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b20      	cmp	r3, #32
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0220 	mvn.w	r2, #32
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8ac 	bl	8002274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a34      	ldr	r2, [pc, #208]	; (8002258 <TIM_Base_SetConfig+0xe4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00f      	beq.n	80021ac <TIM_Base_SetConfig+0x38>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d00b      	beq.n	80021ac <TIM_Base_SetConfig+0x38>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a31      	ldr	r2, [pc, #196]	; (800225c <TIM_Base_SetConfig+0xe8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d007      	beq.n	80021ac <TIM_Base_SetConfig+0x38>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a30      	ldr	r2, [pc, #192]	; (8002260 <TIM_Base_SetConfig+0xec>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d003      	beq.n	80021ac <TIM_Base_SetConfig+0x38>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <TIM_Base_SetConfig+0xf0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d108      	bne.n	80021be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a25      	ldr	r2, [pc, #148]	; (8002258 <TIM_Base_SetConfig+0xe4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01b      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021cc:	d017      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <TIM_Base_SetConfig+0xe8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a21      	ldr	r2, [pc, #132]	; (8002260 <TIM_Base_SetConfig+0xec>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00f      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a20      	ldr	r2, [pc, #128]	; (8002264 <TIM_Base_SetConfig+0xf0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00b      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <TIM_Base_SetConfig+0xf4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <TIM_Base_SetConfig+0xf8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <TIM_Base_SetConfig+0xfc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d108      	bne.n	8002210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <TIM_Base_SetConfig+0xe4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d103      	bne.n	8002244 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	615a      	str	r2, [r3, #20]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40000c00 	.word	0x40000c00
 8002268:	40014000 	.word	0x40014000
 800226c:	40014400 	.word	0x40014400
 8002270:	40014800 	.word	0x40014800

08002274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e03f      	b.n	800232e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fc9c 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f905 	bl	80024f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b08a      	sub	sp, #40	; 0x28
 800233a:	af02      	add	r7, sp, #8
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d17c      	bne.n	8002450 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_UART_Transmit+0x2c>
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e075      	b.n	8002452 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_UART_Transmit+0x3e>
 8002370:	2302      	movs	r3, #2
 8002372:	e06e      	b.n	8002452 <HAL_UART_Transmit+0x11c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2221      	movs	r2, #33	; 0x21
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238a:	f7fe fda3 	bl	8000ed4 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Transmit+0x82>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023c8:	e02a      	b.n	8002420 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f840 	bl	800245a <UART_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e036      	b.n	8002452 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	3302      	adds	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e007      	b.n	8002412 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cf      	bne.n	80023ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f810 	bl	800245a <UART_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e006      	b.n	8002452 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800246a:	e02c      	b.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002472:	d028      	beq.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <UART_WaitOnFlagUntilTimeout+0x30>
 800247a:	f7fe fd2b 	bl	8000ed4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	429a      	cmp	r2, r3
 8002488:	d21d      	bcs.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002498:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e00f      	b.n	80024e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d0c3      	beq.n	800246c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f4:	b09f      	sub	sp, #124	; 0x7c
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	68d9      	ldr	r1, [r3, #12]
 8002508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	ea40 0301 	orr.w	r3, r0, r1
 8002510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	431a      	orrs	r2, r3
 800251c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	431a      	orrs	r2, r3
 8002522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4313      	orrs	r3, r2
 8002528:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800252a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002534:	f021 010c 	bic.w	r1, r1, #12
 8002538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800253e:	430b      	orrs	r3, r1
 8002540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	6999      	ldr	r1, [r3, #24]
 8002550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	ea40 0301 	orr.w	r3, r0, r1
 8002558:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4bc5      	ldr	r3, [pc, #788]	; (8002874 <UART_SetConfig+0x384>)
 8002560:	429a      	cmp	r2, r3
 8002562:	d004      	beq.n	800256e <UART_SetConfig+0x7e>
 8002564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4bc3      	ldr	r3, [pc, #780]	; (8002878 <UART_SetConfig+0x388>)
 800256a:	429a      	cmp	r2, r3
 800256c:	d103      	bne.n	8002576 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800256e:	f7ff fbcf 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 8002572:	6778      	str	r0, [r7, #116]	; 0x74
 8002574:	e002      	b.n	800257c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002576:	f7ff fbb7 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 800257a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002584:	f040 80b6 	bne.w	80026f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258a:	461c      	mov	r4, r3
 800258c:	f04f 0500 	mov.w	r5, #0
 8002590:	4622      	mov	r2, r4
 8002592:	462b      	mov	r3, r5
 8002594:	1891      	adds	r1, r2, r2
 8002596:	6439      	str	r1, [r7, #64]	; 0x40
 8002598:	415b      	adcs	r3, r3
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
 800259c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025a0:	1912      	adds	r2, r2, r4
 80025a2:	eb45 0303 	adc.w	r3, r5, r3
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	00d9      	lsls	r1, r3, #3
 80025b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025b4:	00d0      	lsls	r0, r2, #3
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	1911      	adds	r1, r2, r4
 80025bc:	6639      	str	r1, [r7, #96]	; 0x60
 80025be:	416b      	adcs	r3, r5
 80025c0:	667b      	str	r3, [r7, #100]	; 0x64
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	1891      	adds	r1, r2, r2
 80025ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80025d0:	415b      	adcs	r3, r3
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025dc:	f7fd fe58 	bl	8000290 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4ba5      	ldr	r3, [pc, #660]	; (800287c <UART_SetConfig+0x38c>)
 80025e6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	011e      	lsls	r6, r3, #4
 80025ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f0:	461c      	mov	r4, r3
 80025f2:	f04f 0500 	mov.w	r5, #0
 80025f6:	4622      	mov	r2, r4
 80025f8:	462b      	mov	r3, r5
 80025fa:	1891      	adds	r1, r2, r2
 80025fc:	6339      	str	r1, [r7, #48]	; 0x30
 80025fe:	415b      	adcs	r3, r3
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
 8002602:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002606:	1912      	adds	r2, r2, r4
 8002608:	eb45 0303 	adc.w	r3, r5, r3
 800260c:	f04f 0000 	mov.w	r0, #0
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	00d9      	lsls	r1, r3, #3
 8002616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800261a:	00d0      	lsls	r0, r2, #3
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	1911      	adds	r1, r2, r4
 8002622:	65b9      	str	r1, [r7, #88]	; 0x58
 8002624:	416b      	adcs	r3, r5
 8002626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	461a      	mov	r2, r3
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	1891      	adds	r1, r2, r2
 8002634:	62b9      	str	r1, [r7, #40]	; 0x28
 8002636:	415b      	adcs	r3, r3
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800263e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002642:	f7fd fe25 	bl	8000290 <__aeabi_uldivmod>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4b8c      	ldr	r3, [pc, #560]	; (800287c <UART_SetConfig+0x38c>)
 800264c:	fba3 1302 	umull	r1, r3, r3, r2
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	2164      	movs	r1, #100	; 0x64
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	3332      	adds	r3, #50	; 0x32
 800265e:	4a87      	ldr	r2, [pc, #540]	; (800287c <UART_SetConfig+0x38c>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800266c:	441e      	add	r6, r3
 800266e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002670:	4618      	mov	r0, r3
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	1894      	adds	r4, r2, r2
 800267c:	623c      	str	r4, [r7, #32]
 800267e:	415b      	adcs	r3, r3
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002686:	1812      	adds	r2, r2, r0
 8002688:	eb41 0303 	adc.w	r3, r1, r3
 800268c:	f04f 0400 	mov.w	r4, #0
 8002690:	f04f 0500 	mov.w	r5, #0
 8002694:	00dd      	lsls	r5, r3, #3
 8002696:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800269a:	00d4      	lsls	r4, r2, #3
 800269c:	4622      	mov	r2, r4
 800269e:	462b      	mov	r3, r5
 80026a0:	1814      	adds	r4, r2, r0
 80026a2:	653c      	str	r4, [r7, #80]	; 0x50
 80026a4:	414b      	adcs	r3, r1
 80026a6:	657b      	str	r3, [r7, #84]	; 0x54
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	461a      	mov	r2, r3
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	1891      	adds	r1, r2, r2
 80026b4:	61b9      	str	r1, [r7, #24]
 80026b6:	415b      	adcs	r3, r3
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80026c2:	f7fd fde5 	bl	8000290 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4b6c      	ldr	r3, [pc, #432]	; (800287c <UART_SetConfig+0x38c>)
 80026cc:	fba3 1302 	umull	r1, r3, r3, r2
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	2164      	movs	r1, #100	; 0x64
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	3332      	adds	r3, #50	; 0x32
 80026de:	4a67      	ldr	r2, [pc, #412]	; (800287c <UART_SetConfig+0x38c>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	f003 0207 	and.w	r2, r3, #7
 80026ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4432      	add	r2, r6
 80026f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026f2:	e0b9      	b.n	8002868 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f6:	461c      	mov	r4, r3
 80026f8:	f04f 0500 	mov.w	r5, #0
 80026fc:	4622      	mov	r2, r4
 80026fe:	462b      	mov	r3, r5
 8002700:	1891      	adds	r1, r2, r2
 8002702:	6139      	str	r1, [r7, #16]
 8002704:	415b      	adcs	r3, r3
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800270c:	1912      	adds	r2, r2, r4
 800270e:	eb45 0303 	adc.w	r3, r5, r3
 8002712:	f04f 0000 	mov.w	r0, #0
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	00d9      	lsls	r1, r3, #3
 800271c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002720:	00d0      	lsls	r0, r2, #3
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	eb12 0804 	adds.w	r8, r2, r4
 800272a:	eb43 0905 	adc.w	r9, r3, r5
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	008b      	lsls	r3, r1, #2
 8002742:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002746:	0082      	lsls	r2, r0, #2
 8002748:	4640      	mov	r0, r8
 800274a:	4649      	mov	r1, r9
 800274c:	f7fd fda0 	bl	8000290 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4b49      	ldr	r3, [pc, #292]	; (800287c <UART_SetConfig+0x38c>)
 8002756:	fba3 2302 	umull	r2, r3, r3, r2
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	011e      	lsls	r6, r3, #4
 800275e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002760:	4618      	mov	r0, r3
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	1894      	adds	r4, r2, r2
 800276c:	60bc      	str	r4, [r7, #8]
 800276e:	415b      	adcs	r3, r3
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002776:	1812      	adds	r2, r2, r0
 8002778:	eb41 0303 	adc.w	r3, r1, r3
 800277c:	f04f 0400 	mov.w	r4, #0
 8002780:	f04f 0500 	mov.w	r5, #0
 8002784:	00dd      	lsls	r5, r3, #3
 8002786:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800278a:	00d4      	lsls	r4, r2, #3
 800278c:	4622      	mov	r2, r4
 800278e:	462b      	mov	r3, r5
 8002790:	1814      	adds	r4, r2, r0
 8002792:	64bc      	str	r4, [r7, #72]	; 0x48
 8002794:	414b      	adcs	r3, r1
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4618      	mov	r0, r3
 800279e:	f04f 0100 	mov.w	r1, #0
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	008b      	lsls	r3, r1, #2
 80027ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027b0:	0082      	lsls	r2, r0, #2
 80027b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80027b6:	f7fd fd6b 	bl	8000290 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <UART_SetConfig+0x38c>)
 80027c0:	fba3 1302 	umull	r1, r3, r3, r2
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	2164      	movs	r1, #100	; 0x64
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	3332      	adds	r3, #50	; 0x32
 80027d2:	4a2a      	ldr	r2, [pc, #168]	; (800287c <UART_SetConfig+0x38c>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027de:	441e      	add	r6, r3
 80027e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e2:	4618      	mov	r0, r3
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	1894      	adds	r4, r2, r2
 80027ee:	603c      	str	r4, [r7, #0]
 80027f0:	415b      	adcs	r3, r3
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027f8:	1812      	adds	r2, r2, r0
 80027fa:	eb41 0303 	adc.w	r3, r1, r3
 80027fe:	f04f 0400 	mov.w	r4, #0
 8002802:	f04f 0500 	mov.w	r5, #0
 8002806:	00dd      	lsls	r5, r3, #3
 8002808:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800280c:	00d4      	lsls	r4, r2, #3
 800280e:	4622      	mov	r2, r4
 8002810:	462b      	mov	r3, r5
 8002812:	eb12 0a00 	adds.w	sl, r2, r0
 8002816:	eb43 0b01 	adc.w	fp, r3, r1
 800281a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	008b      	lsls	r3, r1, #2
 800282e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002832:	0082      	lsls	r2, r0, #2
 8002834:	4650      	mov	r0, sl
 8002836:	4659      	mov	r1, fp
 8002838:	f7fd fd2a 	bl	8000290 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <UART_SetConfig+0x38c>)
 8002842:	fba3 1302 	umull	r1, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2164      	movs	r1, #100	; 0x64
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a09      	ldr	r2, [pc, #36]	; (800287c <UART_SetConfig+0x38c>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4432      	add	r2, r6
 8002866:	609a      	str	r2, [r3, #8]
}
 8002868:	bf00      	nop
 800286a:	377c      	adds	r7, #124	; 0x7c
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	40011000 	.word	0x40011000
 8002878:	40011400 	.word	0x40011400
 800287c:	51eb851f 	.word	0x51eb851f

08002880 <__NVIC_SetPriority>:
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <SysTick_Handler+0x1c>)
 80028da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028dc:	f001 fcfe 	bl	80042dc <xTaskGetSchedulerState>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d001      	beq.n	80028ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028e6:	f002 fae7 	bl	8004eb8 <xPortSysTickHandler>
  }
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	e000e010 	.word	0xe000e010

080028f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80028f8:	2100      	movs	r1, #0
 80028fa:	f06f 0004 	mvn.w	r0, #4
 80028fe:	f7ff ffbf 	bl	8002880 <__NVIC_SetPriority>
#endif
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800290e:	f3ef 8305 	mrs	r3, IPSR
 8002912:	603b      	str	r3, [r7, #0]
  return(result);
 8002914:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800291a:	f06f 0305 	mvn.w	r3, #5
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	e00c      	b.n	800293c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <osKernelInitialize+0x44>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <osKernelInitialize+0x44>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002930:	2300      	movs	r3, #0
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	e002      	b.n	800293c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	200000a8 	.word	0x200000a8

08002950 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002956:	f3ef 8305 	mrs	r3, IPSR
 800295a:	603b      	str	r3, [r7, #0]
  return(result);
 800295c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002962:	f06f 0305 	mvn.w	r3, #5
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	e010      	b.n	800298c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <osKernelStart+0x48>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d109      	bne.n	8002986 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002972:	f7ff ffbf 	bl	80028f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <osKernelStart+0x48>)
 8002978:	2202      	movs	r2, #2
 800297a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800297c:	f001 f866 	bl	8003a4c <vTaskStartScheduler>
      stat = osOK;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	e002      	b.n	800298c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800298c:	687b      	ldr	r3, [r7, #4]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200000a8 	.word	0x200000a8

0800299c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b08e      	sub	sp, #56	; 0x38
 80029a0:	af04      	add	r7, sp, #16
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ac:	f3ef 8305 	mrs	r3, IPSR
 80029b0:	617b      	str	r3, [r7, #20]
  return(result);
 80029b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d17e      	bne.n	8002ab6 <osThreadNew+0x11a>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d07b      	beq.n	8002ab6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80029c2:	2318      	movs	r3, #24
 80029c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d045      	beq.n	8002a62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <osThreadNew+0x48>
        name = attr->name;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <osThreadNew+0x6e>
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b38      	cmp	r3, #56	; 0x38
 80029fc:	d805      	bhi.n	8002a0a <osThreadNew+0x6e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <osThreadNew+0x72>
        return (NULL);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e054      	b.n	8002ab8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00e      	beq.n	8002a44 <osThreadNew+0xa8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b5b      	cmp	r3, #91	; 0x5b
 8002a2c:	d90a      	bls.n	8002a44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <osThreadNew+0xa8>
        mem = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	e010      	b.n	8002a66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10c      	bne.n	8002a66 <osThreadNew+0xca>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d108      	bne.n	8002a66 <osThreadNew+0xca>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <osThreadNew+0xca>
          mem = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e001      	b.n	8002a66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d110      	bne.n	8002a8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a74:	9202      	str	r2, [sp, #8]
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fe0c 	bl	80036a0 <xTaskCreateStatic>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	e013      	b.n	8002ab6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d110      	bne.n	8002ab6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fe57 	bl	800375a <xTaskCreate>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d001      	beq.n	8002ab6 <osThreadNew+0x11a>
            hTask = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ab6:	693b      	ldr	r3, [r7, #16]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3728      	adds	r7, #40	; 0x28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ac8:	f3ef 8305 	mrs	r3, IPSR
 8002acc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ace:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <osDelay+0x1c>
    stat = osErrorISR;
 8002ad4:	f06f 0305 	mvn.w	r3, #5
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e007      	b.n	8002aec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 ff7c 	bl	80039e4 <vTaskDelay>
    }
  }

  return (stat);
 8002aec:	68fb      	ldr	r3, [r7, #12]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <vApplicationGetIdleTaskMemory+0x30>)
 8002b0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	200000ac 	.word	0x200000ac
 8002b28:	20000108 	.word	0x20000108

08002b2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4a06      	ldr	r2, [pc, #24]	; (8002b5c <vApplicationGetTimerTaskMemory+0x30>)
 8002b42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	20000308 	.word	0x20000308
 8002b5c:	20000364 	.word	0x20000364

08002b60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f103 0208 	add.w	r2, r3, #8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f103 0208 	add.w	r2, r3, #8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f103 0208 	add.w	r2, r3, #8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d103      	bne.n	8002c22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e00c      	b.n	8002c3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3308      	adds	r3, #8
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e002      	b.n	8002c30 <vListInsert+0x2e>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d2f6      	bcs.n	8002c2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	601a      	str	r2, [r3, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6892      	ldr	r2, [r2, #8]
 8002c8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6852      	ldr	r2, [r2, #4]
 8002c94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d103      	bne.n	8002ca8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	1e5a      	subs	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cf2:	f002 f84f 	bl	8004d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	68f9      	ldr	r1, [r7, #12]
 8002d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	441a      	add	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	3b01      	subs	r3, #1
 8002d24:	68f9      	ldr	r1, [r7, #12]
 8002d26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	441a      	add	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	22ff      	movs	r2, #255	; 0xff
 8002d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d114      	bne.n	8002d72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01a      	beq.n	8002d86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3310      	adds	r3, #16
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 f903 	bl	8003f60 <xTaskRemoveFromEventList>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <xQueueGenericReset+0xcc>)
 8002d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	e009      	b.n	8002d86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3310      	adds	r3, #16
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fef2 	bl	8002b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3324      	adds	r3, #36	; 0x24
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff feed 	bl	8002b60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d86:	f002 f835 	bl	8004df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	e000ed04 	.word	0xe000ed04

08002d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	; 0x38
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <xQueueGenericCreateStatic+0x52>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <xQueueGenericCreateStatic+0x56>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <xQueueGenericCreateStatic+0x58>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	623b      	str	r3, [r7, #32]
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <xQueueGenericCreateStatic+0x7e>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <xQueueGenericCreateStatic+0x82>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <xQueueGenericCreateStatic+0x84>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	61fb      	str	r3, [r7, #28]
}
 8002e32:	bf00      	nop
 8002e34:	e7fe      	b.n	8002e34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e36:	2350      	movs	r3, #80	; 0x50
 8002e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b50      	cmp	r3, #80	; 0x50
 8002e3e:	d00a      	beq.n	8002e56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	61bb      	str	r3, [r7, #24]
}
 8002e52:	bf00      	nop
 8002e54:	e7fe      	b.n	8002e54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f805 	bl	8002e88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3730      	adds	r7, #48	; 0x30
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e002      	b.n	8002eaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	69b8      	ldr	r0, [r7, #24]
 8002eba:	f7ff ff05 	bl	8002cc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08e      	sub	sp, #56	; 0x38
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <xQueueGenericSend+0x32>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d103      	bne.n	8002f10 <xQueueGenericSend+0x40>
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <xQueueGenericSend+0x44>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <xQueueGenericSend+0x46>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <xQueueGenericSend+0x60>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d103      	bne.n	8002f3e <xQueueGenericSend+0x6e>
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <xQueueGenericSend+0x72>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueGenericSend+0x74>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueGenericSend+0x8e>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f5e:	f001 f9bd 	bl	80042dc <xTaskGetSchedulerState>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <xQueueGenericSend+0x9e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <xQueueGenericSend+0xa2>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <xQueueGenericSend+0xa4>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <xQueueGenericSend+0xbe>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	61fb      	str	r3, [r7, #28]
}
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f8e:	f001 ff01 	bl	8004d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <xQueueGenericSend+0xd4>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d129      	bne.n	8002ff8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002faa:	f000 fa0b 	bl	80033c4 <prvCopyDataToQueue>
 8002fae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	3324      	adds	r3, #36	; 0x24
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 ffcf 	bl	8003f60 <xTaskRemoveFromEventList>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <xQueueGenericSend+0x1f8>)
 8002fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	e00a      	b.n	8002ff0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fe0:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <xQueueGenericSend+0x1f8>)
 8002fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ff0:	f001 ff00 	bl	8004df4 <vPortExitCritical>
				return pdPASS;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e063      	b.n	80030c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ffe:	f001 fef9 	bl	8004df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003002:	2300      	movs	r3, #0
 8003004:	e05c      	b.n	80030c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	4618      	mov	r0, r3
 8003012:	f001 f809 	bl	8004028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003016:	2301      	movs	r3, #1
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800301a:	f001 feeb 	bl	8004df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800301e:	f000 fd7b 	bl	8003b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003022:	f001 feb7 	bl	8004d94 <vPortEnterCritical>
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800302c:	b25b      	sxtb	r3, r3
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d103      	bne.n	800303c <xQueueGenericSend+0x16c>
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003042:	b25b      	sxtb	r3, r3
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d103      	bne.n	8003052 <xQueueGenericSend+0x182>
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003052:	f001 fecf 	bl	8004df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003056:	1d3a      	adds	r2, r7, #4
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fff8 	bl	8004054 <xTaskCheckForTimeOut>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d124      	bne.n	80030b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800306a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800306c:	f000 faa2 	bl	80035b4 <prvIsQueueFull>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	3310      	adds	r3, #16
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f000 ff1e 	bl	8003ec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003086:	f000 fa2d 	bl	80034e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800308a:	f000 fd53 	bl	8003b34 <xTaskResumeAll>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	f47f af7c 	bne.w	8002f8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <xQueueGenericSend+0x1f8>)
 8003098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	e772      	b.n	8002f8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030aa:	f000 fa1b 	bl	80034e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030ae:	f000 fd41 	bl	8003b34 <xTaskResumeAll>
 80030b2:	e76c      	b.n	8002f8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030b6:	f000 fa15 	bl	80034e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ba:	f000 fd3b 	bl	8003b34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3738      	adds	r7, #56	; 0x38
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b090      	sub	sp, #64	; 0x40
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <xQueueGenericSendFromISR+0x3c>
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <xQueueGenericSendFromISR+0x40>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <xQueueGenericSendFromISR+0x42>
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d103      	bne.n	8003136 <xQueueGenericSendFromISR+0x6a>
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <xQueueGenericSendFromISR+0x6e>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <xQueueGenericSendFromISR+0x70>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	623b      	str	r3, [r7, #32]
}
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003156:	f001 feff 	bl	8004f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800315a:	f3ef 8211 	mrs	r2, BASEPRI
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	61fa      	str	r2, [r7, #28]
 8003170:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003172:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	429a      	cmp	r2, r3
 8003180:	d302      	bcc.n	8003188 <xQueueGenericSendFromISR+0xbc>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d12f      	bne.n	80031e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800318e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800319e:	f000 f911 	bl	80033c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d112      	bne.n	80031d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d016      	beq.n	80031e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	3324      	adds	r3, #36	; 0x24
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fed1 	bl	8003f60 <xTaskRemoveFromEventList>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00e      	beq.n	80031e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e007      	b.n	80031e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031d6:	3301      	adds	r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	b25a      	sxtb	r2, r3
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031e2:	2301      	movs	r3, #1
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031e6:	e001      	b.n	80031ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3740      	adds	r7, #64	; 0x40
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	; 0x30
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <xQueueReceive+0x30>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	623b      	str	r3, [r7, #32]
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <xQueueReceive+0x3e>
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <xQueueReceive+0x42>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <xQueueReceive+0x44>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xQueueReceive+0x5e>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61fb      	str	r3, [r7, #28]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003262:	f001 f83b 	bl	80042dc <xTaskGetSchedulerState>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <xQueueReceive+0x6e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <xQueueReceive+0x72>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <xQueueReceive+0x74>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <xQueueReceive+0x8e>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	61bb      	str	r3, [r7, #24]
}
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003292:	f001 fd7f 	bl	8004d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01f      	beq.n	80032e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a6:	f000 f8f7 	bl	8003498 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00f      	beq.n	80032da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	3310      	adds	r3, #16
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fe4e 	bl	8003f60 <xTaskRemoveFromEventList>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <xQueueReceive+0x1bc>)
 80032cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032da:	f001 fd8b 	bl	8004df4 <vPortExitCritical>
				return pdPASS;
 80032de:	2301      	movs	r3, #1
 80032e0:	e069      	b.n	80033b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d103      	bne.n	80032f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032e8:	f001 fd84 	bl	8004df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e062      	b.n	80033b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032f6:	f107 0310 	add.w	r3, r7, #16
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fe94 	bl	8004028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003300:	2301      	movs	r3, #1
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003304:	f001 fd76 	bl	8004df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003308:	f000 fc06 	bl	8003b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800330c:	f001 fd42 	bl	8004d94 <vPortEnterCritical>
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003316:	b25b      	sxtb	r3, r3
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d103      	bne.n	8003326 <xQueueReceive+0x122>
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d103      	bne.n	800333c <xQueueReceive+0x138>
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800333c:	f001 fd5a 	bl	8004df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003340:	1d3a      	adds	r2, r7, #4
 8003342:	f107 0310 	add.w	r3, r7, #16
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fe83 	bl	8004054 <xTaskCheckForTimeOut>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d123      	bne.n	800339c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003356:	f000 f917 	bl	8003588 <prvIsQueueEmpty>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003362:	3324      	adds	r3, #36	; 0x24
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fda9 	bl	8003ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800336e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003370:	f000 f8b8 	bl	80034e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003374:	f000 fbde 	bl	8003b34 <xTaskResumeAll>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d189      	bne.n	8003292 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <xQueueReceive+0x1bc>)
 8003380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	e780      	b.n	8003292 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003392:	f000 f8a7 	bl	80034e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003396:	f000 fbcd 	bl	8003b34 <xTaskResumeAll>
 800339a:	e77a      	b.n	8003292 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800339c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800339e:	f000 f8a1 	bl	80034e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033a2:	f000 fbc7 	bl	8003b34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a8:	f000 f8ee 	bl	8003588 <prvIsQueueEmpty>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f43f af6f 	beq.w	8003292 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3730      	adds	r7, #48	; 0x30
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	e000ed04 	.word	0xe000ed04

080033c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10d      	bne.n	80033fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d14d      	bne.n	8003486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 ff92 	bl	8004318 <xTaskPriorityDisinherit>
 80033f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	e043      	b.n	8003486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d119      	bne.n	8003438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6858      	ldr	r0, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	461a      	mov	r2, r3
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	f001 fff6 	bl	8005400 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d32b      	bcc.n	8003486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	e026      	b.n	8003486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68d8      	ldr	r0, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	461a      	mov	r2, r3
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	f001 ffdc 	bl	8005400 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	425b      	negs	r3, r3
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d207      	bcs.n	8003474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	425b      	negs	r3, r3
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d105      	bne.n	8003486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	3b01      	subs	r3, #1
 8003484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800348e:	697b      	ldr	r3, [r7, #20]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d018      	beq.n	80034dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d303      	bcc.n	80034cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68d9      	ldr	r1, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	461a      	mov	r2, r3
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f001 ff92 	bl	8005400 <memcpy>
	}
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034ec:	f001 fc52 	bl	8004d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034f8:	e011      	b.n	800351e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3324      	adds	r3, #36	; 0x24
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fd2a 	bl	8003f60 <xTaskRemoveFromEventList>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003512:	f000 fe01 	bl	8004118 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	3b01      	subs	r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	dce9      	bgt.n	80034fa <prvUnlockQueue+0x16>
 8003526:	e000      	b.n	800352a <prvUnlockQueue+0x46>
					break;
 8003528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003532:	f001 fc5f 	bl	8004df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003536:	f001 fc2d 	bl	8004d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003542:	e011      	b.n	8003568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3310      	adds	r3, #16
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fd05 	bl	8003f60 <xTaskRemoveFromEventList>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800355c:	f000 fddc 	bl	8004118 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003560:	7bbb      	ldrb	r3, [r7, #14]
 8003562:	3b01      	subs	r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800356c:	2b00      	cmp	r3, #0
 800356e:	dce9      	bgt.n	8003544 <prvUnlockQueue+0x60>
 8003570:	e000      	b.n	8003574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	22ff      	movs	r2, #255	; 0xff
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800357c:	f001 fc3a 	bl	8004df4 <vPortExitCritical>
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003590:	f001 fc00 	bl	8004d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800359c:	2301      	movs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e001      	b.n	80035a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035a6:	f001 fc25 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035bc:	f001 fbea 	bl	8004d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d102      	bne.n	80035d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e001      	b.n	80035d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035d6:	f001 fc0d 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e014      	b.n	800361e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035f4:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <vQueueAddToRegistry+0x50>)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003600:	490c      	ldr	r1, [pc, #48]	; (8003634 <vQueueAddToRegistry+0x50>)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <vQueueAddToRegistry+0x50>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003616:	e006      	b.n	8003626 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b07      	cmp	r3, #7
 8003622:	d9e7      	bls.n	80035f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20004ac0 	.word	0x20004ac0

08003638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003648:	f001 fba4 	bl	8004d94 <vPortEnterCritical>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003652:	b25b      	sxtb	r3, r3
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d103      	bne.n	8003662 <vQueueWaitForMessageRestricted+0x2a>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003668:	b25b      	sxtb	r3, r3
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d103      	bne.n	8003678 <vQueueWaitForMessageRestricted+0x40>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003678:	f001 fbbc 	bl	8004df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3324      	adds	r3, #36	; 0x24
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fc3b 	bl	8003f08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7ff ff26 	bl	80034e4 <prvUnlockQueue>
	}
 8003698:	bf00      	nop
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61fb      	str	r3, [r7, #28]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036e6:	235c      	movs	r3, #92	; 0x5c
 80036e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b5c      	cmp	r3, #92	; 0x5c
 80036ee:	d00a      	beq.n	8003706 <xTaskCreateStatic+0x66>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	61bb      	str	r3, [r7, #24]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003706:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01e      	beq.n	800374c <xTaskCreateStatic+0xac>
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003726:	2300      	movs	r3, #0
 8003728:	9303      	str	r3, [sp, #12]
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f850 	bl	80037e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003746:	f000 f8dd 	bl	8003904 <prvAddNewTaskToReadyList>
 800374a:	e001      	b.n	8003750 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003750:	697b      	ldr	r3, [r7, #20]
	}
 8003752:	4618      	mov	r0, r3
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08c      	sub	sp, #48	; 0x30
 800375e:	af04      	add	r7, sp, #16
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fc32 	bl	8004fd8 <pvPortMalloc>
 8003774:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800377c:	205c      	movs	r0, #92	; 0x5c
 800377e:	f001 fc2b 	bl	8004fd8 <pvPortMalloc>
 8003782:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
 8003790:	e005      	b.n	800379e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f001 fcec 	bl	8005170 <vPortFree>
 8003798:	e001      	b.n	800379e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d017      	beq.n	80037d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	2300      	movs	r3, #0
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	9302      	str	r3, [sp, #8]
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f80e 	bl	80037e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c8:	69f8      	ldr	r0, [r7, #28]
 80037ca:	f000 f89b 	bl	8003904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037ce:	2301      	movs	r3, #1
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	e002      	b.n	80037da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037da:	69bb      	ldr	r3, [r7, #24]
	}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	461a      	mov	r2, r3
 80037fc:	21a5      	movs	r1, #165	; 0xa5
 80037fe:	f001 fe0d 	bl	800541c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800380c:	3b01      	subs	r3, #1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	617b      	str	r3, [r7, #20]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01f      	beq.n	8003882 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e012      	b.n	800386e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	7819      	ldrb	r1, [r3, #0]
 8003850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	3334      	adds	r3, #52	; 0x34
 8003858:	460a      	mov	r2, r1
 800385a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3301      	adds	r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d9e9      	bls.n	8003848 <prvInitialiseNewTask+0x64>
 8003874:	e000      	b.n	8003878 <prvInitialiseNewTask+0x94>
			{
				break;
 8003876:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003880:	e003      	b.n	800388a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2b37      	cmp	r3, #55	; 0x37
 800388e:	d901      	bls.n	8003894 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003890:	2337      	movs	r3, #55	; 0x37
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	2200      	movs	r2, #0
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f978 	bl	8002ba0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	3318      	adds	r3, #24
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff f973 	bl	8002ba0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	68f9      	ldr	r1, [r7, #12]
 80038e2:	69b8      	ldr	r0, [r7, #24]
 80038e4:	f001 f928 	bl	8004b38 <pxPortInitialiseStack>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800390c:	f001 fa42 	bl	8004d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003910:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	4a2c      	ldr	r2, [pc, #176]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800391a:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003922:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003928:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d110      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003930:	f000 fc16 	bl	8004160 <prvInitialiseTaskLists>
 8003934:	e00d      	b.n	8003952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d802      	bhi.n	8003952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 800395a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <prvAddNewTaskToReadyList+0xd4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d903      	bls.n	8003978 <prvAddNewTaskToReadyList+0x74>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <prvAddNewTaskToReadyList+0xd4>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <prvAddNewTaskToReadyList+0xd8>)
 8003986:	441a      	add	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7ff f913 	bl	8002bba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003994:	f001 fa2e 	bl	8004df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d207      	bcs.n	80039be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <prvAddNewTaskToReadyList+0xdc>)
 80039b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000c38 	.word	0x20000c38
 80039cc:	20000764 	.word	0x20000764
 80039d0:	20000c44 	.word	0x20000c44
 80039d4:	20000c54 	.word	0x20000c54
 80039d8:	20000c40 	.word	0x20000c40
 80039dc:	20000768 	.word	0x20000768
 80039e0:	e000ed04 	.word	0xe000ed04

080039e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d017      	beq.n	8003a26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <vTaskDelay+0x60>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <vTaskDelay+0x30>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	60bb      	str	r3, [r7, #8]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a14:	f000 f880 	bl	8003b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a18:	2100      	movs	r1, #0
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fcea 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a20:	f000 f888 	bl	8003b34 <xTaskResumeAll>
 8003a24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <vTaskDelay+0x64>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000c60 	.word	0x20000c60
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	1d39      	adds	r1, r7, #4
 8003a5e:	f107 0308 	add.w	r3, r7, #8
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f848 	bl	8002af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	9202      	str	r2, [sp, #8]
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	460a      	mov	r2, r1
 8003a7a:	4921      	ldr	r1, [pc, #132]	; (8003b00 <vTaskStartScheduler+0xb4>)
 8003a7c:	4821      	ldr	r0, [pc, #132]	; (8003b04 <vTaskStartScheduler+0xb8>)
 8003a7e:	f7ff fe0f 	bl	80036a0 <xTaskCreateStatic>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <vTaskStartScheduler+0xbc>)
 8003a86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <vTaskStartScheduler+0xbc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e001      	b.n	8003a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d102      	bne.n	8003aa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003aa0:	f000 fcfc 	bl	800449c <xTimerCreateTimerTask>
 8003aa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d116      	bne.n	8003ada <vTaskStartScheduler+0x8e>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	613b      	str	r3, [r7, #16]
}
 8003abe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <vTaskStartScheduler+0xc0>)
 8003ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <vTaskStartScheduler+0xc4>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <vTaskStartScheduler+0xc8>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ad4:	f001 f8bc 	bl	8004c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ad8:	e00e      	b.n	8003af8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d10a      	bne.n	8003af8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	60fb      	str	r3, [r7, #12]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <vTaskStartScheduler+0xaa>
}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	08005d0c 	.word	0x08005d0c
 8003b04:	08004131 	.word	0x08004131
 8003b08:	20000c5c 	.word	0x20000c5c
 8003b0c:	20000c58 	.word	0x20000c58
 8003b10:	20000c44 	.word	0x20000c44
 8003b14:	20000c3c 	.word	0x20000c3c

08003b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <vTaskSuspendAll+0x18>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	4a03      	ldr	r2, [pc, #12]	; (8003b30 <vTaskSuspendAll+0x18>)
 8003b24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	20000c60 	.word	0x20000c60

08003b34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b42:	4b42      	ldr	r3, [pc, #264]	; (8003c4c <xTaskResumeAll+0x118>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	603b      	str	r3, [r7, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b60:	f001 f918 	bl	8004d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b64:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <xTaskResumeAll+0x118>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	4a38      	ldr	r2, [pc, #224]	; (8003c4c <xTaskResumeAll+0x118>)
 8003b6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <xTaskResumeAll+0x118>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d162      	bne.n	8003c3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b76:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <xTaskResumeAll+0x11c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d05e      	beq.n	8003c3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b7e:	e02f      	b.n	8003be0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <xTaskResumeAll+0x120>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f871 	bl	8002c74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff f86c 	bl	8002c74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <xTaskResumeAll+0x124>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d903      	bls.n	8003bb0 <xTaskResumeAll+0x7c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <xTaskResumeAll+0x124>)
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <xTaskResumeAll+0x128>)
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fe fff7 	bl	8002bba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <xTaskResumeAll+0x12c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <xTaskResumeAll+0x130>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <xTaskResumeAll+0x120>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1cb      	bne.n	8003b80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bee:	f000 fb55 	bl	800429c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <xTaskResumeAll+0x134>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d010      	beq.n	8003c20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bfe:	f000 f847 	bl	8003c90 <xTaskIncrementTick>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <xTaskResumeAll+0x130>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f1      	bne.n	8003bfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <xTaskResumeAll+0x134>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c20:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <xTaskResumeAll+0x130>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <xTaskResumeAll+0x138>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c3c:	f001 f8da 	bl	8004df4 <vPortExitCritical>

	return xAlreadyYielded;
 8003c40:	68bb      	ldr	r3, [r7, #8]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000c60 	.word	0x20000c60
 8003c50:	20000c38 	.word	0x20000c38
 8003c54:	20000bf8 	.word	0x20000bf8
 8003c58:	20000c40 	.word	0x20000c40
 8003c5c:	20000768 	.word	0x20000768
 8003c60:	20000764 	.word	0x20000764
 8003c64:	20000c4c 	.word	0x20000c4c
 8003c68:	20000c48 	.word	0x20000c48
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <xTaskGetTickCount+0x1c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c7c:	687b      	ldr	r3, [r7, #4]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000c3c 	.word	0x20000c3c

08003c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c9a:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <xTaskIncrementTick+0x148>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 808f 	bne.w	8003dc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ca4:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cac:	4a4b      	ldr	r2, [pc, #300]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d120      	bne.n	8003cfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cb8:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	603b      	str	r3, [r7, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xTaskIncrementTick+0x46>
 8003cd8:	4b41      	ldr	r3, [pc, #260]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <xTaskIncrementTick+0x154>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3f      	ldr	r2, [pc, #252]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4a3f      	ldr	r2, [pc, #252]	; (8003de4 <xTaskIncrementTick+0x154>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <xTaskIncrementTick+0x158>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	4a3d      	ldr	r2, [pc, #244]	; (8003de8 <xTaskIncrementTick+0x158>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	f000 fad1 	bl	800429c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cfa:	4b3c      	ldr	r3, [pc, #240]	; (8003dec <xTaskIncrementTick+0x15c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d349      	bcc.n	8003d98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d04:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d104      	bne.n	8003d18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0e:	4b37      	ldr	r3, [pc, #220]	; (8003dec <xTaskIncrementTick+0x15c>)
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	601a      	str	r2, [r3, #0]
					break;
 8003d16:	e03f      	b.n	8003d98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d203      	bcs.n	8003d38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d30:	4a2e      	ldr	r2, [pc, #184]	; (8003dec <xTaskIncrementTick+0x15c>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d36:	e02f      	b.n	8003d98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe ff99 	bl	8002c74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3318      	adds	r3, #24
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe ff90 	bl	8002c74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <xTaskIncrementTick+0x160>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d903      	bls.n	8003d68 <xTaskIncrementTick+0xd8>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <xTaskIncrementTick+0x160>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <xTaskIncrementTick+0x164>)
 8003d76:	441a      	add	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f7fe ff1b 	bl	8002bba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <xTaskIncrementTick+0x168>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d3b8      	bcc.n	8003d04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d96:	e7b5      	b.n	8003d04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <xTaskIncrementTick+0x168>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9e:	4915      	ldr	r1, [pc, #84]	; (8003df4 <xTaskIncrementTick+0x164>)
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d901      	bls.n	8003db4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <xTaskIncrementTick+0x16c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e004      	b.n	8003dcc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <xTaskIncrementTick+0x170>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <xTaskIncrementTick+0x170>)
 8003dca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000c60 	.word	0x20000c60
 8003ddc:	20000c3c 	.word	0x20000c3c
 8003de0:	20000bf0 	.word	0x20000bf0
 8003de4:	20000bf4 	.word	0x20000bf4
 8003de8:	20000c50 	.word	0x20000c50
 8003dec:	20000c58 	.word	0x20000c58
 8003df0:	20000c40 	.word	0x20000c40
 8003df4:	20000768 	.word	0x20000768
 8003df8:	20000764 	.word	0x20000764
 8003dfc:	20000c4c 	.word	0x20000c4c
 8003e00:	20000c48 	.word	0x20000c48

08003e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <vTaskSwitchContext+0xa8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <vTaskSwitchContext+0xac>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e18:	e041      	b.n	8003e9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003e1a:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <vTaskSwitchContext+0xac>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <vTaskSwitchContext+0xb0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e010      	b.n	8003e4a <vTaskSwitchContext+0x46>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <vTaskSwitchContext+0x40>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	607b      	str	r3, [r7, #4]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <vTaskSwitchContext+0x3e>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	491b      	ldr	r1, [pc, #108]	; (8003eb8 <vTaskSwitchContext+0xb4>)
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0e4      	beq.n	8003e28 <vTaskSwitchContext+0x24>
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <vTaskSwitchContext+0xb4>)
 8003e6a:	4413      	add	r3, r2
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d104      	bne.n	8003e8e <vTaskSwitchContext+0x8a>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <vTaskSwitchContext+0xb8>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4a06      	ldr	r2, [pc, #24]	; (8003eb4 <vTaskSwitchContext+0xb0>)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6013      	str	r3, [r2, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000c60 	.word	0x20000c60
 8003eb0:	20000c4c 	.word	0x20000c4c
 8003eb4:	20000c40 	.word	0x20000c40
 8003eb8:	20000768 	.word	0x20000768
 8003ebc:	20000764 	.word	0x20000764

08003ec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	60fb      	str	r3, [r7, #12]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <vTaskPlaceOnEventList+0x44>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3318      	adds	r3, #24
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe fe87 	bl	8002c02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	f000 fa7c 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000764 	.word	0x20000764

08003f08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	617b      	str	r3, [r7, #20]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <vTaskPlaceOnEventListRestricted+0x54>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3318      	adds	r3, #24
 8003f36:	4619      	mov	r1, r3
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7fe fe3e 	bl	8002bba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	68b8      	ldr	r0, [r7, #8]
 8003f4e:	f000 fa51 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
	}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000764 	.word	0x20000764

08003f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	60fb      	str	r3, [r7, #12]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fe6f 	bl	8002c74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <xTaskRemoveFromEventList+0xb0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11d      	bne.n	8003fda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fe66 	bl	8002c74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <xTaskRemoveFromEventList+0xb4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d903      	bls.n	8003fbc <xTaskRemoveFromEventList+0x5c>
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a16      	ldr	r2, [pc, #88]	; (8004014 <xTaskRemoveFromEventList+0xb4>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4a13      	ldr	r2, [pc, #76]	; (8004018 <xTaskRemoveFromEventList+0xb8>)
 8003fca:	441a      	add	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7fe fdf1 	bl	8002bba <vListInsertEnd>
 8003fd8:	e005      	b.n	8003fe6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3318      	adds	r3, #24
 8003fde:	4619      	mov	r1, r3
 8003fe0:	480e      	ldr	r0, [pc, #56]	; (800401c <xTaskRemoveFromEventList+0xbc>)
 8003fe2:	f7fe fdea 	bl	8002bba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <xTaskRemoveFromEventList+0xc0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d905      	bls.n	8004000 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <xTaskRemoveFromEventList+0xc4>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e001      	b.n	8004004 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004004:	697b      	ldr	r3, [r7, #20]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000c60 	.word	0x20000c60
 8004014:	20000c40 	.word	0x20000c40
 8004018:	20000768 	.word	0x20000768
 800401c:	20000bf8 	.word	0x20000bf8
 8004020:	20000764 	.word	0x20000764
 8004024:	20000c4c 	.word	0x20000c4c

08004028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <vTaskInternalSetTimeOutState+0x24>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <vTaskInternalSetTimeOutState+0x28>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	605a      	str	r2, [r3, #4]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	20000c50 	.word	0x20000c50
 8004050:	20000c3c 	.word	0x20000c3c

08004054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	613b      	str	r3, [r7, #16]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004096:	f000 fe7d 	bl	8004d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800409a:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <xTaskCheckForTimeOut+0xbc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d102      	bne.n	80040ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	e023      	b.n	8004102 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <xTaskCheckForTimeOut+0xc0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d007      	beq.n	80040d6 <xTaskCheckForTimeOut+0x82>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d302      	bcc.n	80040d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	e015      	b.n	8004102 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d20b      	bcs.n	80040f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	1ad2      	subs	r2, r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff9b 	bl	8004028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	e004      	b.n	8004102 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040fe:	2301      	movs	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004102:	f000 fe77 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 8004106:	69fb      	ldr	r3, [r7, #28]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000c3c 	.word	0x20000c3c
 8004114:	20000c50 	.word	0x20000c50

08004118 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <vTaskMissedYield+0x14>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	20000c4c 	.word	0x20000c4c

08004130 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004138:	f000 f852 	bl	80041e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <prvIdleTask+0x28>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d9f9      	bls.n	8004138 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <prvIdleTask+0x2c>)
 8004146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004154:	e7f0      	b.n	8004138 <prvIdleTask+0x8>
 8004156:	bf00      	nop
 8004158:	20000768 	.word	0x20000768
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	e00c      	b.n	8004186 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <prvInitialiseTaskLists+0x60>)
 8004178:	4413      	add	r3, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fcf0 	bl	8002b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3301      	adds	r3, #1
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b37      	cmp	r3, #55	; 0x37
 800418a:	d9ef      	bls.n	800416c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800418c:	480d      	ldr	r0, [pc, #52]	; (80041c4 <prvInitialiseTaskLists+0x64>)
 800418e:	f7fe fce7 	bl	8002b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004192:	480d      	ldr	r0, [pc, #52]	; (80041c8 <prvInitialiseTaskLists+0x68>)
 8004194:	f7fe fce4 	bl	8002b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004198:	480c      	ldr	r0, [pc, #48]	; (80041cc <prvInitialiseTaskLists+0x6c>)
 800419a:	f7fe fce1 	bl	8002b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800419e:	480c      	ldr	r0, [pc, #48]	; (80041d0 <prvInitialiseTaskLists+0x70>)
 80041a0:	f7fe fcde 	bl	8002b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041a4:	480b      	ldr	r0, [pc, #44]	; (80041d4 <prvInitialiseTaskLists+0x74>)
 80041a6:	f7fe fcdb 	bl	8002b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <prvInitialiseTaskLists+0x78>)
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <prvInitialiseTaskLists+0x64>)
 80041ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <prvInitialiseTaskLists+0x7c>)
 80041b2:	4a05      	ldr	r2, [pc, #20]	; (80041c8 <prvInitialiseTaskLists+0x68>)
 80041b4:	601a      	str	r2, [r3, #0]
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000768 	.word	0x20000768
 80041c4:	20000bc8 	.word	0x20000bc8
 80041c8:	20000bdc 	.word	0x20000bdc
 80041cc:	20000bf8 	.word	0x20000bf8
 80041d0:	20000c0c 	.word	0x20000c0c
 80041d4:	20000c24 	.word	0x20000c24
 80041d8:	20000bf0 	.word	0x20000bf0
 80041dc:	20000bf4 	.word	0x20000bf4

080041e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041e6:	e019      	b.n	800421c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041e8:	f000 fdd4 	bl	8004d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <prvCheckTasksWaitingTermination+0x50>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe fd3b 	bl	8002c74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <prvCheckTasksWaitingTermination+0x54>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3b01      	subs	r3, #1
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <prvCheckTasksWaitingTermination+0x54>)
 8004206:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <prvCheckTasksWaitingTermination+0x58>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <prvCheckTasksWaitingTermination+0x58>)
 8004210:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004212:	f000 fdef 	bl	8004df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f810 	bl	800423c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <prvCheckTasksWaitingTermination+0x58>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e1      	bne.n	80041e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000c0c 	.word	0x20000c0c
 8004234:	20000c38 	.word	0x20000c38
 8004238:	20000c20 	.word	0x20000c20

0800423c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800424a:	2b00      	cmp	r3, #0
 800424c:	d108      	bne.n	8004260 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ff8c 	bl	8005170 <vPortFree>
				vPortFree( pxTCB );
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 ff89 	bl	8005170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800425e:	e018      	b.n	8004292 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004266:	2b01      	cmp	r3, #1
 8004268:	d103      	bne.n	8004272 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 ff80 	bl	8005170 <vPortFree>
	}
 8004270:	e00f      	b.n	8004292 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004278:	2b02      	cmp	r3, #2
 800427a:	d00a      	beq.n	8004292 <prvDeleteTCB+0x56>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	60fb      	str	r3, [r7, #12]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <prvDeleteTCB+0x54>
	}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <prvResetNextTaskUnblockTime+0x38>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvResetNextTaskUnblockTime+0x3c>)
 80042ae:	f04f 32ff 	mov.w	r2, #4294967295
 80042b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042b4:	e008      	b.n	80042c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b6:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <prvResetNextTaskUnblockTime+0x38>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <prvResetNextTaskUnblockTime+0x3c>)
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	20000bf0 	.word	0x20000bf0
 80042d8:	20000c58 	.word	0x20000c58

080042dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <xTaskGetSchedulerState+0x34>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042ea:	2301      	movs	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	e008      	b.n	8004302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <xTaskGetSchedulerState+0x38>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042f8:	2302      	movs	r3, #2
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	e001      	b.n	8004302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004302:	687b      	ldr	r3, [r7, #4]
	}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000c44 	.word	0x20000c44
 8004314:	20000c60 	.word	0x20000c60

08004318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d056      	beq.n	80043dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800432e:	4b2e      	ldr	r3, [pc, #184]	; (80043e8 <xTaskPriorityDisinherit+0xd0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	429a      	cmp	r2, r3
 8004336:	d00a      	beq.n	800434e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	60fb      	str	r3, [r7, #12]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60bb      	str	r3, [r7, #8]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	429a      	cmp	r2, r3
 8004380:	d02c      	beq.n	80043dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004386:	2b00      	cmp	r3, #0
 8004388:	d128      	bne.n	80043dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	3304      	adds	r3, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fc70 	bl	8002c74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <xTaskPriorityDisinherit+0xd4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d903      	bls.n	80043bc <xTaskPriorityDisinherit+0xa4>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <xTaskPriorityDisinherit+0xd4>)
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <xTaskPriorityDisinherit+0xd8>)
 80043ca:	441a      	add	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f7fe fbf1 	bl	8002bba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043d8:	2301      	movs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043dc:	697b      	ldr	r3, [r7, #20]
	}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000764 	.word	0x20000764
 80043ec:	20000c40 	.word	0x20000c40
 80043f0:	20000768 	.word	0x20000768

080043f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043fe:	4b21      	ldr	r3, [pc, #132]	; (8004484 <prvAddCurrentTaskToDelayedList+0x90>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004404:	4b20      	ldr	r3, [pc, #128]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3304      	adds	r3, #4
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fc32 	bl	8002c74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d10a      	bne.n	800442e <prvAddCurrentTaskToDelayedList+0x3a>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d007      	beq.n	800442e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4819      	ldr	r0, [pc, #100]	; (800448c <prvAddCurrentTaskToDelayedList+0x98>)
 8004428:	f7fe fbc7 	bl	8002bba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800442c:	e026      	b.n	800447c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	429a      	cmp	r2, r3
 8004444:	d209      	bcs.n	800445a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f7fe fbd5 	bl	8002c02 <vListInsert>
}
 8004458:	e010      	b.n	800447c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <prvAddCurrentTaskToDelayedList+0xa0>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7fe fbcb 	bl	8002c02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvAddCurrentTaskToDelayedList+0xa4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	d202      	bcs.n	800447c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000c3c 	.word	0x20000c3c
 8004488:	20000764 	.word	0x20000764
 800448c:	20000c24 	.word	0x20000c24
 8004490:	20000bf4 	.word	0x20000bf4
 8004494:	20000bf0 	.word	0x20000bf0
 8004498:	20000c58 	.word	0x20000c58

0800449c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044a6:	f000 fb07 	bl	8004ab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044aa:	4b1c      	ldr	r3, [pc, #112]	; (800451c <xTimerCreateTimerTask+0x80>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d021      	beq.n	80044f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044ba:	1d3a      	adds	r2, r7, #4
 80044bc:	f107 0108 	add.w	r1, r7, #8
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe fb31 	bl	8002b2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	9202      	str	r2, [sp, #8]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	2302      	movs	r3, #2
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	460a      	mov	r2, r1
 80044dc:	4910      	ldr	r1, [pc, #64]	; (8004520 <xTimerCreateTimerTask+0x84>)
 80044de:	4811      	ldr	r0, [pc, #68]	; (8004524 <xTimerCreateTimerTask+0x88>)
 80044e0:	f7ff f8de 	bl	80036a0 <xTaskCreateStatic>
 80044e4:	4603      	mov	r3, r0
 80044e6:	4a10      	ldr	r2, [pc, #64]	; (8004528 <xTimerCreateTimerTask+0x8c>)
 80044e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <xTimerCreateTimerTask+0x8c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044f2:	2301      	movs	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	613b      	str	r3, [r7, #16]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004512:	697b      	ldr	r3, [r7, #20]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000c94 	.word	0x20000c94
 8004520:	08005d14 	.word	0x08005d14
 8004524:	08004661 	.word	0x08004661
 8004528:	20000c98 	.word	0x20000c98

0800452c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	623b      	str	r3, [r7, #32]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <xTimerGenericCommand+0x98>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02a      	beq.n	80045b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b05      	cmp	r3, #5
 8004572:	dc18      	bgt.n	80045a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004574:	f7ff feb2 	bl	80042dc <xTaskGetSchedulerState>
 8004578:	4603      	mov	r3, r0
 800457a:	2b02      	cmp	r3, #2
 800457c:	d109      	bne.n	8004592 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <xTimerGenericCommand+0x98>)
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f107 0110 	add.w	r1, r7, #16
 8004586:	2300      	movs	r3, #0
 8004588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458a:	f7fe fca1 	bl	8002ed0 <xQueueGenericSend>
 800458e:	6278      	str	r0, [r7, #36]	; 0x24
 8004590:	e012      	b.n	80045b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <xTimerGenericCommand+0x98>)
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	f107 0110 	add.w	r1, r7, #16
 800459a:	2300      	movs	r3, #0
 800459c:	2200      	movs	r2, #0
 800459e:	f7fe fc97 	bl	8002ed0 <xQueueGenericSend>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24
 80045a4:	e008      	b.n	80045b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <xTimerGenericCommand+0x98>)
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	f107 0110 	add.w	r1, r7, #16
 80045ae:	2300      	movs	r3, #0
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	f7fe fd8b 	bl	80030cc <xQueueGenericSendFromISR>
 80045b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3728      	adds	r7, #40	; 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000c94 	.word	0x20000c94

080045c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <prvProcessExpiredTimer+0x94>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe fb47 	bl	8002c74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d022      	beq.n	800463a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	18d1      	adds	r1, r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	6978      	ldr	r0, [r7, #20]
 8004602:	f000 f8d1 	bl	80047a8 <prvInsertTimerInActiveList>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01f      	beq.n	800464c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800460c:	2300      	movs	r3, #0
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	2100      	movs	r1, #0
 8004616:	6978      	ldr	r0, [r7, #20]
 8004618:	f7ff ff88 	bl	800452c <xTimerGenericCommand>
 800461c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d113      	bne.n	800464c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	b2da      	uxtb	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	4798      	blx	r3
}
 8004654:	bf00      	nop
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000c8c 	.word	0x20000c8c

08004660 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004668:	f107 0308 	add.w	r3, r7, #8
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f857 	bl	8004720 <prvGetNextExpireTime>
 8004672:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4619      	mov	r1, r3
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f803 	bl	8004684 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800467e:	f000 f8d5 	bl	800482c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004682:	e7f1      	b.n	8004668 <prvTimerTask+0x8>

08004684 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800468e:	f7ff fa43 	bl	8003b18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f866 	bl	8004768 <prvSampleTimeNow>
 800469c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d130      	bne.n	8004706 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <prvProcessTimerOrBlockTask+0x3c>
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d806      	bhi.n	80046c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046b2:	f7ff fa3f 	bl	8003b34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff85 	bl	80045c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046be:	e024      	b.n	800470a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <prvProcessTimerOrBlockTask+0x90>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <prvProcessTimerOrBlockTask+0x50>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <prvProcessTimerOrBlockTask+0x52>
 80046d4:	2300      	movs	r3, #0
 80046d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <prvProcessTimerOrBlockTask+0x94>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4619      	mov	r1, r3
 80046e6:	f7fe ffa7 	bl	8003638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ea:	f7ff fa23 	bl	8003b34 <xTaskResumeAll>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <prvProcessTimerOrBlockTask+0x98>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
}
 8004704:	e001      	b.n	800470a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004706:	f7ff fa15 	bl	8003b34 <xTaskResumeAll>
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000c90 	.word	0x20000c90
 8004718:	20000c94 	.word	0x20000c94
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004728:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <prvGetNextExpireTime+0x44>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <prvGetNextExpireTime+0x16>
 8004732:	2201      	movs	r2, #1
 8004734:	e000      	b.n	8004738 <prvGetNextExpireTime+0x18>
 8004736:	2200      	movs	r2, #0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d105      	bne.n	8004750 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <prvGetNextExpireTime+0x44>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e001      	b.n	8004754 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004754:	68fb      	ldr	r3, [r7, #12]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000c8c 	.word	0x20000c8c

08004768 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004770:	f7ff fa7e 	bl	8003c70 <xTaskGetTickCount>
 8004774:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <prvSampleTimeNow+0x3c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d205      	bcs.n	800478c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004780:	f000 f936 	bl	80049f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e002      	b.n	8004792 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004792:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <prvSampleTimeNow+0x3c>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000c9c 	.word	0x20000c9c

080047a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d812      	bhi.n	80047f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d302      	bcc.n	80047e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e01b      	b.n	800481a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <prvInsertTimerInActiveList+0x7c>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe fa08 	bl	8002c02 <vListInsert>
 80047f2:	e012      	b.n	800481a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d206      	bcs.n	800480a <prvInsertTimerInActiveList+0x62>
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e007      	b.n	800481a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <prvInsertTimerInActiveList+0x80>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fe f9f4 	bl	8002c02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800481a:	697b      	ldr	r3, [r7, #20]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000c90 	.word	0x20000c90
 8004828:	20000c8c 	.word	0x20000c8c

0800482c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004832:	e0ca      	b.n	80049ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	da18      	bge.n	800486c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	3304      	adds	r3, #4
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	61fb      	str	r3, [r7, #28]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	6850      	ldr	r0, [r2, #4]
 8004864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	4611      	mov	r1, r2
 800486a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f2c0 80aa 	blt.w	80049c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe f9f5 	bl	8002c74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800488a:	463b      	mov	r3, r7
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ff6b 	bl	8004768 <prvSampleTimeNow>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b09      	cmp	r3, #9
 8004898:	f200 8097 	bhi.w	80049ca <prvProcessReceivedCommands+0x19e>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <prvProcessReceivedCommands+0x78>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048cd 	.word	0x080048cd
 80048b0:	08004941 	.word	0x08004941
 80048b4:	08004955 	.word	0x08004955
 80048b8:	0800499f 	.word	0x0800499f
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048cd 	.word	0x080048cd
 80048c4:	08004941 	.word	0x08004941
 80048c8:	08004955 	.word	0x08004955
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	18d1      	adds	r1, r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ec:	f7ff ff5c 	bl	80047a8 <prvInsertTimerInActiveList>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d069      	beq.n	80049ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05e      	beq.n	80049ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	441a      	add	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2300      	movs	r3, #0
 800491a:	2100      	movs	r1, #0
 800491c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491e:	f7ff fe05 	bl	800452c <xTimerGenericCommand>
 8004922:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d14f      	bne.n	80049ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	61bb      	str	r3, [r7, #24]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004952:	e03a      	b.n	80049ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	617b      	str	r3, [r7, #20]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	18d1      	adds	r1, r2, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004998:	f7ff ff06 	bl	80047a8 <prvInsertTimerInActiveList>
					break;
 800499c:	e015      	b.n	80049ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d103      	bne.n	80049b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80049ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ae:	f000 fbdf 	bl	8005170 <vPortFree>
 80049b2:	e00a      	b.n	80049ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049c6:	e000      	b.n	80049ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80049c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <prvProcessReceivedCommands+0x1c0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	1d39      	adds	r1, r7, #4
 80049d0:	2200      	movs	r2, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fc16 	bl	8003204 <xQueueReceive>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f47f af2a 	bne.w	8004834 <prvProcessReceivedCommands+0x8>
	}
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3730      	adds	r7, #48	; 0x30
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000c94 	.word	0x20000c94

080049f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049f6:	e048      	b.n	8004a8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f8:	4b2d      	ldr	r3, [pc, #180]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a02:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe f92f 	bl	8002c74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02e      	beq.n	8004a8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d90e      	bls.n	8004a5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a4a:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f7fe f8d4 	bl	8002c02 <vListInsert>
 8004a5a:	e016      	b.n	8004a8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2300      	movs	r3, #0
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	2100      	movs	r1, #0
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff fd60 	bl	800452c <xTimerGenericCommand>
 8004a6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	603b      	str	r3, [r7, #0]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1b1      	bne.n	80049f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <prvSwitchTimerLists+0xc4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004aa0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004aa2:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <prvSwitchTimerLists+0xc4>)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	6013      	str	r3, [r2, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000c8c 	.word	0x20000c8c
 8004ab4:	20000c90 	.word	0x20000c90

08004ab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004abe:	f000 f969 	bl	8004d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d120      	bne.n	8004b0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004aca:	4814      	ldr	r0, [pc, #80]	; (8004b1c <prvCheckForValidListAndQueue+0x64>)
 8004acc:	f7fe f848 	bl	8002b60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ad0:	4813      	ldr	r0, [pc, #76]	; (8004b20 <prvCheckForValidListAndQueue+0x68>)
 8004ad2:	f7fe f845 	bl	8002b60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <prvCheckForValidListAndQueue+0x6c>)
 8004ad8:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <prvCheckForValidListAndQueue+0x64>)
 8004ada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <prvCheckForValidListAndQueue+0x70>)
 8004ade:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <prvCheckForValidListAndQueue+0x68>)
 8004ae0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <prvCheckForValidListAndQueue+0x74>)
 8004ae8:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <prvCheckForValidListAndQueue+0x78>)
 8004aea:	2110      	movs	r1, #16
 8004aec:	200a      	movs	r0, #10
 8004aee:	f7fe f953 	bl	8002d98 <xQueueGenericCreateStatic>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004af6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004af8:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	490b      	ldr	r1, [pc, #44]	; (8004b34 <prvCheckForValidListAndQueue+0x7c>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe fd6c 	bl	80035e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b0c:	f000 f972 	bl	8004df4 <vPortExitCritical>
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000c94 	.word	0x20000c94
 8004b1c:	20000c64 	.word	0x20000c64
 8004b20:	20000c78 	.word	0x20000c78
 8004b24:	20000c8c 	.word	0x20000c8c
 8004b28:	20000c90 	.word	0x20000c90
 8004b2c:	20000d40 	.word	0x20000d40
 8004b30:	20000ca0 	.word	0x20000ca0
 8004b34:	08005d1c 	.word	0x08005d1c

08004b38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b04      	subs	r3, #4
 8004b48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b04      	subs	r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b68:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <pxPortInitialiseStack+0x64>)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b14      	subs	r3, #20
 8004b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f06f 0202 	mvn.w	r2, #2
 8004b86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b20      	subs	r3, #32
 8004b8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	08004ba1 	.word	0x08004ba1

08004ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <prvTaskExitError+0x54>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d00a      	beq.n	8004bca <prvTaskExitError+0x2a>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60fb      	str	r3, [r7, #12]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <prvTaskExitError+0x28>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60bb      	str	r3, [r7, #8]
}
 8004bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bde:	bf00      	nop
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0fc      	beq.n	8004be0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	2000001c 	.word	0x2000001c
	...

08004c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <pxCurrentTCBConst2>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	f380 8809 	msr	PSP, r0
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	4770      	bx	lr
 8004c1c:	f3af 8000 	nop.w

08004c20 <pxCurrentTCBConst2>:
 8004c20:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <prvPortStartFirstTask+0x24>)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f380 8808 	msr	MSP, r0
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8814 	msr	CONTROL, r0
 8004c3a:	b662      	cpsie	i
 8004c3c:	b661      	cpsie	f
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	df00      	svc	0
 8004c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c4a:	bf00      	nop
 8004c4c:	e000ed08 	.word	0xe000ed08

08004c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c56:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <xPortStartScheduler+0x120>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a46      	ldr	r2, [pc, #280]	; (8004d74 <xPortStartScheduler+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10a      	bne.n	8004c76 <xPortStartScheduler+0x26>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c76:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <xPortStartScheduler+0x120>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3f      	ldr	r2, [pc, #252]	; (8004d78 <xPortStartScheduler+0x128>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10a      	bne.n	8004c96 <xPortStartScheduler+0x46>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c96:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	22ff      	movs	r2, #255	; 0xff
 8004ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <xPortStartScheduler+0x130>)
 8004cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <xPortStartScheduler+0x134>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cc4:	e009      	b.n	8004cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <xPortStartScheduler+0x134>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	4a2d      	ldr	r2, [pc, #180]	; (8004d84 <xPortStartScheduler+0x134>)
 8004cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d0ef      	beq.n	8004cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ce6:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <xPortStartScheduler+0x134>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1c3 0307 	rsb	r3, r3, #7
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d00a      	beq.n	8004d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60bb      	str	r3, [r7, #8]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d1a:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d26:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d32:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d3e:	f000 f8dd 	bl	8004efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <xPortStartScheduler+0x13c>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d48:	f000 f8fc 	bl	8004f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <xPortStartScheduler+0x140>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0f      	ldr	r2, [pc, #60]	; (8004d90 <xPortStartScheduler+0x140>)
 8004d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d58:	f7ff ff66 	bl	8004c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d5c:	f7ff f852 	bl	8003e04 <vTaskSwitchContext>
	prvTaskExitError();
 8004d60:	f7ff ff1e 	bl	8004ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	e000ed00 	.word	0xe000ed00
 8004d74:	410fc271 	.word	0x410fc271
 8004d78:	410fc270 	.word	0x410fc270
 8004d7c:	e000e400 	.word	0xe000e400
 8004d80:	20000d90 	.word	0x20000d90
 8004d84:	20000d94 	.word	0x20000d94
 8004d88:	e000ed20 	.word	0xe000ed20
 8004d8c:	2000001c 	.word	0x2000001c
 8004d90:	e000ef34 	.word	0xe000ef34

08004d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	607b      	str	r3, [r7, #4]
}
 8004dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dae:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <vPortEnterCritical+0x58>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <vPortEnterCritical+0x58>)
 8004db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <vPortEnterCritical+0x58>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10f      	bne.n	8004de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <vPortEnterCritical+0x5c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	603b      	str	r3, [r7, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <vPortEnterCritical+0x4a>
	}
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	2000001c 	.word	0x2000001c
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <vPortExitCritical+0x50>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <vPortExitCritical+0x24>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	607b      	str	r3, [r7, #4]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <vPortExitCritical+0x50>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <vPortExitCritical+0x50>)
 8004e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <vPortExitCritical+0x50>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <vPortExitCritical+0x42>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f383 8811 	msr	BASEPRI, r3
}
 8004e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	2000001c 	.word	0x2000001c
	...

08004e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e50:	f3ef 8009 	mrs	r0, PSP
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <pxCurrentTCBConst>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f01e 0f10 	tst.w	lr, #16
 8004e60:	bf08      	it	eq
 8004e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e74:	f380 8811 	msr	BASEPRI, r0
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f7fe ffc0 	bl	8003e04 <vTaskSwitchContext>
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f380 8811 	msr	BASEPRI, r0
 8004e8c:	bc09      	pop	{r0, r3}
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	6808      	ldr	r0, [r1, #0]
 8004e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e96:	f01e 0f10 	tst.w	lr, #16
 8004e9a:	bf08      	it	eq
 8004e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ea0:	f380 8809 	msr	PSP, r0
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst>:
 8004eb0:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ed2:	f7fe fedd 	bl	8003c90 <xTaskIncrementTick>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <xPortSysTickHandler+0x40>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f383 8811 	msr	BASEPRI, r3
}
 8004eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <vPortSetupTimerInterrupt+0x38>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <vPortSetupTimerInterrupt+0x3c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <vPortSetupTimerInterrupt+0x40>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <vPortSetupTimerInterrupt+0x44>)
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f1e:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000e010 	.word	0xe000e010
 8004f34:	e000e018 	.word	0xe000e018
 8004f38:	20000010 	.word	0x20000010
 8004f3c:	10624dd3 	.word	0x10624dd3
 8004f40:	e000e014 	.word	0xe000e014

08004f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f54 <vPortEnableVFP+0x10>
 8004f48:	6801      	ldr	r1, [r0, #0]
 8004f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f4e:	6001      	str	r1, [r0, #0]
 8004f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f52:	bf00      	nop
 8004f54:	e000ed88 	.word	0xe000ed88

08004f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f5e:	f3ef 8305 	mrs	r3, IPSR
 8004f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d914      	bls.n	8004f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <vPortValidateInterruptPriority+0x70>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f74:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <vPortValidateInterruptPriority+0x74>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	7afa      	ldrb	r2, [r7, #11]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d20a      	bcs.n	8004f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <vPortValidateInterruptPriority+0x78>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <vPortValidateInterruptPriority+0x7c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d90a      	bls.n	8004fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	603b      	str	r3, [r7, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <vPortValidateInterruptPriority+0x60>
	}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000e3f0 	.word	0xe000e3f0
 8004fcc:	20000d90 	.word	0x20000d90
 8004fd0:	e000ed0c 	.word	0xe000ed0c
 8004fd4:	20000d94 	.word	0x20000d94

08004fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fe4:	f7fe fd98 	bl	8003b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fe8:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <pvPortMalloc+0x180>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ff0:	f000 f920 	bl	8005234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <pvPortMalloc+0x184>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f040 8093 	bne.w	8005128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01d      	beq.n	8005044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005008:	2208      	movs	r2, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	2b00      	cmp	r3, #0
 8005018:	d014      	beq.n	8005044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	3308      	adds	r3, #8
 8005022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <pvPortMalloc+0x6c>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	617b      	str	r3, [r7, #20]
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d06e      	beq.n	8005128 <pvPortMalloc+0x150>
 800504a:	4b45      	ldr	r3, [pc, #276]	; (8005160 <pvPortMalloc+0x188>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d869      	bhi.n	8005128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005054:	4b43      	ldr	r3, [pc, #268]	; (8005164 <pvPortMalloc+0x18c>)
 8005056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005058:	4b42      	ldr	r3, [pc, #264]	; (8005164 <pvPortMalloc+0x18c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800505e:	e004      	b.n	800506a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d903      	bls.n	800507c <pvPortMalloc+0xa4>
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f1      	bne.n	8005060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800507c:	4b36      	ldr	r3, [pc, #216]	; (8005158 <pvPortMalloc+0x180>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	429a      	cmp	r2, r3
 8005084:	d050      	beq.n	8005128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2208      	movs	r2, #8
 800508c:	4413      	add	r3, r2
 800508e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	2308      	movs	r3, #8
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d91f      	bls.n	80050e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <pvPortMalloc+0xf8>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	613b      	str	r3, [r7, #16]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050e2:	69b8      	ldr	r0, [r7, #24]
 80050e4:	f000 f908 	bl	80052f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <pvPortMalloc+0x188>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <pvPortMalloc+0x188>)
 80050f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050f6:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <pvPortMalloc+0x188>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <pvPortMalloc+0x190>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d203      	bcs.n	800510a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005102:	4b17      	ldr	r3, [pc, #92]	; (8005160 <pvPortMalloc+0x188>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <pvPortMalloc+0x190>)
 8005108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <pvPortMalloc+0x184>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	431a      	orrs	r2, r3
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <pvPortMalloc+0x194>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	4a11      	ldr	r2, [pc, #68]	; (800516c <pvPortMalloc+0x194>)
 8005126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005128:	f7fe fd04 	bl	8003b34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <pvPortMalloc+0x174>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60fb      	str	r3, [r7, #12]
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <pvPortMalloc+0x172>
	return pvReturn;
 800514c:	69fb      	ldr	r3, [r7, #28]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3728      	adds	r7, #40	; 0x28
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200049a0 	.word	0x200049a0
 800515c:	200049b4 	.word	0x200049b4
 8005160:	200049a4 	.word	0x200049a4
 8005164:	20004998 	.word	0x20004998
 8005168:	200049a8 	.word	0x200049a8
 800516c:	200049ac 	.word	0x200049ac

08005170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d04d      	beq.n	800521e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005182:	2308      	movs	r3, #8
 8005184:	425b      	negs	r3, r3
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4413      	add	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	4b24      	ldr	r3, [pc, #144]	; (8005228 <vPortFree+0xb8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <vPortFree+0x44>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60fb      	str	r3, [r7, #12]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <vPortFree+0x62>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60bb      	str	r3, [r7, #8]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <vPortFree+0xb8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01e      	beq.n	800521e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d11a      	bne.n	800521e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <vPortFree+0xb8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051f8:	f7fe fc8e 	bl	8003b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <vPortFree+0xbc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4413      	add	r3, r2
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <vPortFree+0xbc>)
 8005208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800520a:	6938      	ldr	r0, [r7, #16]
 800520c:	f000 f874 	bl	80052f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <vPortFree+0xc0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	4a06      	ldr	r2, [pc, #24]	; (8005230 <vPortFree+0xc0>)
 8005218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800521a:	f7fe fc8b 	bl	8003b34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800521e:	bf00      	nop
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	200049b4 	.word	0x200049b4
 800522c:	200049a4 	.word	0x200049a4
 8005230:	200049b0 	.word	0x200049b0

08005234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800523a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800523e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <prvHeapInit+0xac>)
 8005242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3307      	adds	r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <prvHeapInit+0xac>)
 8005264:	4413      	add	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800526c:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <prvHeapInit+0xb0>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <prvHeapInit+0xb0>)
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005280:	2208      	movs	r2, #8
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0307 	bic.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <prvHeapInit+0xb4>)
 8005294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <prvHeapInit+0xb4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <prvHeapInit+0xb4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	1ad2      	subs	r2, r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <prvHeapInit+0xb4>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <prvHeapInit+0xb8>)
 80052c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <prvHeapInit+0xbc>)
 80052ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <prvHeapInit+0xc0>)
 80052ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20000d98 	.word	0x20000d98
 80052e4:	20004998 	.word	0x20004998
 80052e8:	200049a0 	.word	0x200049a0
 80052ec:	200049a8 	.word	0x200049a8
 80052f0:	200049a4 	.word	0x200049a4
 80052f4:	200049b4 	.word	0x200049b4

080052f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005300:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <prvInsertBlockIntoFreeList+0xac>)
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e002      	b.n	800530c <prvInsertBlockIntoFreeList+0x14>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d8f7      	bhi.n	8005306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4413      	add	r3, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d108      	bne.n	800533a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d118      	bne.n	8005380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d00d      	beq.n	8005376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	441a      	add	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e008      	b.n	8005388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e003      	b.n	8005388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d002      	beq.n	8005396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20004998 	.word	0x20004998
 80053a8:	200049a0 	.word	0x200049a0

080053ac <__errno>:
 80053ac:	4b01      	ldr	r3, [pc, #4]	; (80053b4 <__errno+0x8>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000020 	.word	0x20000020

080053b8 <__libc_init_array>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	4d0d      	ldr	r5, [pc, #52]	; (80053f0 <__libc_init_array+0x38>)
 80053bc:	4c0d      	ldr	r4, [pc, #52]	; (80053f4 <__libc_init_array+0x3c>)
 80053be:	1b64      	subs	r4, r4, r5
 80053c0:	10a4      	asrs	r4, r4, #2
 80053c2:	2600      	movs	r6, #0
 80053c4:	42a6      	cmp	r6, r4
 80053c6:	d109      	bne.n	80053dc <__libc_init_array+0x24>
 80053c8:	4d0b      	ldr	r5, [pc, #44]	; (80053f8 <__libc_init_array+0x40>)
 80053ca:	4c0c      	ldr	r4, [pc, #48]	; (80053fc <__libc_init_array+0x44>)
 80053cc:	f000 fc4e 	bl	8005c6c <_init>
 80053d0:	1b64      	subs	r4, r4, r5
 80053d2:	10a4      	asrs	r4, r4, #2
 80053d4:	2600      	movs	r6, #0
 80053d6:	42a6      	cmp	r6, r4
 80053d8:	d105      	bne.n	80053e6 <__libc_init_array+0x2e>
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e0:	4798      	blx	r3
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7ee      	b.n	80053c4 <__libc_init_array+0xc>
 80053e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ea:	4798      	blx	r3
 80053ec:	3601      	adds	r6, #1
 80053ee:	e7f2      	b.n	80053d6 <__libc_init_array+0x1e>
 80053f0:	08005de4 	.word	0x08005de4
 80053f4:	08005de4 	.word	0x08005de4
 80053f8:	08005de4 	.word	0x08005de4
 80053fc:	08005de8 	.word	0x08005de8

08005400 <memcpy>:
 8005400:	440a      	add	r2, r1
 8005402:	4291      	cmp	r1, r2
 8005404:	f100 33ff 	add.w	r3, r0, #4294967295
 8005408:	d100      	bne.n	800540c <memcpy+0xc>
 800540a:	4770      	bx	lr
 800540c:	b510      	push	{r4, lr}
 800540e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005416:	4291      	cmp	r1, r2
 8005418:	d1f9      	bne.n	800540e <memcpy+0xe>
 800541a:	bd10      	pop	{r4, pc}

0800541c <memset>:
 800541c:	4402      	add	r2, r0
 800541e:	4603      	mov	r3, r0
 8005420:	4293      	cmp	r3, r2
 8005422:	d100      	bne.n	8005426 <memset+0xa>
 8005424:	4770      	bx	lr
 8005426:	f803 1b01 	strb.w	r1, [r3], #1
 800542a:	e7f9      	b.n	8005420 <memset+0x4>

0800542c <siprintf>:
 800542c:	b40e      	push	{r1, r2, r3}
 800542e:	b500      	push	{lr}
 8005430:	b09c      	sub	sp, #112	; 0x70
 8005432:	ab1d      	add	r3, sp, #116	; 0x74
 8005434:	9002      	str	r0, [sp, #8]
 8005436:	9006      	str	r0, [sp, #24]
 8005438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800543c:	4809      	ldr	r0, [pc, #36]	; (8005464 <siprintf+0x38>)
 800543e:	9107      	str	r1, [sp, #28]
 8005440:	9104      	str	r1, [sp, #16]
 8005442:	4909      	ldr	r1, [pc, #36]	; (8005468 <siprintf+0x3c>)
 8005444:	f853 2b04 	ldr.w	r2, [r3], #4
 8005448:	9105      	str	r1, [sp, #20]
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	a902      	add	r1, sp, #8
 8005450:	f000 f868 	bl	8005524 <_svfiprintf_r>
 8005454:	9b02      	ldr	r3, [sp, #8]
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	b01c      	add	sp, #112	; 0x70
 800545c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005460:	b003      	add	sp, #12
 8005462:	4770      	bx	lr
 8005464:	20000020 	.word	0x20000020
 8005468:	ffff0208 	.word	0xffff0208

0800546c <__ssputs_r>:
 800546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005470:	688e      	ldr	r6, [r1, #8]
 8005472:	429e      	cmp	r6, r3
 8005474:	4682      	mov	sl, r0
 8005476:	460c      	mov	r4, r1
 8005478:	4690      	mov	r8, r2
 800547a:	461f      	mov	r7, r3
 800547c:	d838      	bhi.n	80054f0 <__ssputs_r+0x84>
 800547e:	898a      	ldrh	r2, [r1, #12]
 8005480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005484:	d032      	beq.n	80054ec <__ssputs_r+0x80>
 8005486:	6825      	ldr	r5, [r4, #0]
 8005488:	6909      	ldr	r1, [r1, #16]
 800548a:	eba5 0901 	sub.w	r9, r5, r1
 800548e:	6965      	ldr	r5, [r4, #20]
 8005490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005498:	3301      	adds	r3, #1
 800549a:	444b      	add	r3, r9
 800549c:	106d      	asrs	r5, r5, #1
 800549e:	429d      	cmp	r5, r3
 80054a0:	bf38      	it	cc
 80054a2:	461d      	movcc	r5, r3
 80054a4:	0553      	lsls	r3, r2, #21
 80054a6:	d531      	bpl.n	800550c <__ssputs_r+0xa0>
 80054a8:	4629      	mov	r1, r5
 80054aa:	f000 fb39 	bl	8005b20 <_malloc_r>
 80054ae:	4606      	mov	r6, r0
 80054b0:	b950      	cbnz	r0, 80054c8 <__ssputs_r+0x5c>
 80054b2:	230c      	movs	r3, #12
 80054b4:	f8ca 3000 	str.w	r3, [sl]
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c8:	6921      	ldr	r1, [r4, #16]
 80054ca:	464a      	mov	r2, r9
 80054cc:	f7ff ff98 	bl	8005400 <memcpy>
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	81a3      	strh	r3, [r4, #12]
 80054dc:	6126      	str	r6, [r4, #16]
 80054de:	6165      	str	r5, [r4, #20]
 80054e0:	444e      	add	r6, r9
 80054e2:	eba5 0509 	sub.w	r5, r5, r9
 80054e6:	6026      	str	r6, [r4, #0]
 80054e8:	60a5      	str	r5, [r4, #8]
 80054ea:	463e      	mov	r6, r7
 80054ec:	42be      	cmp	r6, r7
 80054ee:	d900      	bls.n	80054f2 <__ssputs_r+0x86>
 80054f0:	463e      	mov	r6, r7
 80054f2:	4632      	mov	r2, r6
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	4641      	mov	r1, r8
 80054f8:	f000 faa8 	bl	8005a4c <memmove>
 80054fc:	68a3      	ldr	r3, [r4, #8]
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	1b9b      	subs	r3, r3, r6
 8005502:	4432      	add	r2, r6
 8005504:	60a3      	str	r3, [r4, #8]
 8005506:	6022      	str	r2, [r4, #0]
 8005508:	2000      	movs	r0, #0
 800550a:	e7db      	b.n	80054c4 <__ssputs_r+0x58>
 800550c:	462a      	mov	r2, r5
 800550e:	f000 fb61 	bl	8005bd4 <_realloc_r>
 8005512:	4606      	mov	r6, r0
 8005514:	2800      	cmp	r0, #0
 8005516:	d1e1      	bne.n	80054dc <__ssputs_r+0x70>
 8005518:	6921      	ldr	r1, [r4, #16]
 800551a:	4650      	mov	r0, sl
 800551c:	f000 fab0 	bl	8005a80 <_free_r>
 8005520:	e7c7      	b.n	80054b2 <__ssputs_r+0x46>
	...

08005524 <_svfiprintf_r>:
 8005524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005528:	4698      	mov	r8, r3
 800552a:	898b      	ldrh	r3, [r1, #12]
 800552c:	061b      	lsls	r3, r3, #24
 800552e:	b09d      	sub	sp, #116	; 0x74
 8005530:	4607      	mov	r7, r0
 8005532:	460d      	mov	r5, r1
 8005534:	4614      	mov	r4, r2
 8005536:	d50e      	bpl.n	8005556 <_svfiprintf_r+0x32>
 8005538:	690b      	ldr	r3, [r1, #16]
 800553a:	b963      	cbnz	r3, 8005556 <_svfiprintf_r+0x32>
 800553c:	2140      	movs	r1, #64	; 0x40
 800553e:	f000 faef 	bl	8005b20 <_malloc_r>
 8005542:	6028      	str	r0, [r5, #0]
 8005544:	6128      	str	r0, [r5, #16]
 8005546:	b920      	cbnz	r0, 8005552 <_svfiprintf_r+0x2e>
 8005548:	230c      	movs	r3, #12
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	e0d1      	b.n	80056f6 <_svfiprintf_r+0x1d2>
 8005552:	2340      	movs	r3, #64	; 0x40
 8005554:	616b      	str	r3, [r5, #20]
 8005556:	2300      	movs	r3, #0
 8005558:	9309      	str	r3, [sp, #36]	; 0x24
 800555a:	2320      	movs	r3, #32
 800555c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005560:	f8cd 800c 	str.w	r8, [sp, #12]
 8005564:	2330      	movs	r3, #48	; 0x30
 8005566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005710 <_svfiprintf_r+0x1ec>
 800556a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800556e:	f04f 0901 	mov.w	r9, #1
 8005572:	4623      	mov	r3, r4
 8005574:	469a      	mov	sl, r3
 8005576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800557a:	b10a      	cbz	r2, 8005580 <_svfiprintf_r+0x5c>
 800557c:	2a25      	cmp	r2, #37	; 0x25
 800557e:	d1f9      	bne.n	8005574 <_svfiprintf_r+0x50>
 8005580:	ebba 0b04 	subs.w	fp, sl, r4
 8005584:	d00b      	beq.n	800559e <_svfiprintf_r+0x7a>
 8005586:	465b      	mov	r3, fp
 8005588:	4622      	mov	r2, r4
 800558a:	4629      	mov	r1, r5
 800558c:	4638      	mov	r0, r7
 800558e:	f7ff ff6d 	bl	800546c <__ssputs_r>
 8005592:	3001      	adds	r0, #1
 8005594:	f000 80aa 	beq.w	80056ec <_svfiprintf_r+0x1c8>
 8005598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800559a:	445a      	add	r2, fp
 800559c:	9209      	str	r2, [sp, #36]	; 0x24
 800559e:	f89a 3000 	ldrb.w	r3, [sl]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80a2 	beq.w	80056ec <_svfiprintf_r+0x1c8>
 80055a8:	2300      	movs	r3, #0
 80055aa:	f04f 32ff 	mov.w	r2, #4294967295
 80055ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055b2:	f10a 0a01 	add.w	sl, sl, #1
 80055b6:	9304      	str	r3, [sp, #16]
 80055b8:	9307      	str	r3, [sp, #28]
 80055ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055be:	931a      	str	r3, [sp, #104]	; 0x68
 80055c0:	4654      	mov	r4, sl
 80055c2:	2205      	movs	r2, #5
 80055c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c8:	4851      	ldr	r0, [pc, #324]	; (8005710 <_svfiprintf_r+0x1ec>)
 80055ca:	f7fa fe11 	bl	80001f0 <memchr>
 80055ce:	9a04      	ldr	r2, [sp, #16]
 80055d0:	b9d8      	cbnz	r0, 800560a <_svfiprintf_r+0xe6>
 80055d2:	06d0      	lsls	r0, r2, #27
 80055d4:	bf44      	itt	mi
 80055d6:	2320      	movmi	r3, #32
 80055d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055dc:	0711      	lsls	r1, r2, #28
 80055de:	bf44      	itt	mi
 80055e0:	232b      	movmi	r3, #43	; 0x2b
 80055e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e6:	f89a 3000 	ldrb.w	r3, [sl]
 80055ea:	2b2a      	cmp	r3, #42	; 0x2a
 80055ec:	d015      	beq.n	800561a <_svfiprintf_r+0xf6>
 80055ee:	9a07      	ldr	r2, [sp, #28]
 80055f0:	4654      	mov	r4, sl
 80055f2:	2000      	movs	r0, #0
 80055f4:	f04f 0c0a 	mov.w	ip, #10
 80055f8:	4621      	mov	r1, r4
 80055fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055fe:	3b30      	subs	r3, #48	; 0x30
 8005600:	2b09      	cmp	r3, #9
 8005602:	d94e      	bls.n	80056a2 <_svfiprintf_r+0x17e>
 8005604:	b1b0      	cbz	r0, 8005634 <_svfiprintf_r+0x110>
 8005606:	9207      	str	r2, [sp, #28]
 8005608:	e014      	b.n	8005634 <_svfiprintf_r+0x110>
 800560a:	eba0 0308 	sub.w	r3, r0, r8
 800560e:	fa09 f303 	lsl.w	r3, r9, r3
 8005612:	4313      	orrs	r3, r2
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	46a2      	mov	sl, r4
 8005618:	e7d2      	b.n	80055c0 <_svfiprintf_r+0x9c>
 800561a:	9b03      	ldr	r3, [sp, #12]
 800561c:	1d19      	adds	r1, r3, #4
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	9103      	str	r1, [sp, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	bfbb      	ittet	lt
 8005626:	425b      	neglt	r3, r3
 8005628:	f042 0202 	orrlt.w	r2, r2, #2
 800562c:	9307      	strge	r3, [sp, #28]
 800562e:	9307      	strlt	r3, [sp, #28]
 8005630:	bfb8      	it	lt
 8005632:	9204      	strlt	r2, [sp, #16]
 8005634:	7823      	ldrb	r3, [r4, #0]
 8005636:	2b2e      	cmp	r3, #46	; 0x2e
 8005638:	d10c      	bne.n	8005654 <_svfiprintf_r+0x130>
 800563a:	7863      	ldrb	r3, [r4, #1]
 800563c:	2b2a      	cmp	r3, #42	; 0x2a
 800563e:	d135      	bne.n	80056ac <_svfiprintf_r+0x188>
 8005640:	9b03      	ldr	r3, [sp, #12]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	9203      	str	r2, [sp, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	bfb8      	it	lt
 800564c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005650:	3402      	adds	r4, #2
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005720 <_svfiprintf_r+0x1fc>
 8005658:	7821      	ldrb	r1, [r4, #0]
 800565a:	2203      	movs	r2, #3
 800565c:	4650      	mov	r0, sl
 800565e:	f7fa fdc7 	bl	80001f0 <memchr>
 8005662:	b140      	cbz	r0, 8005676 <_svfiprintf_r+0x152>
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	eba0 000a 	sub.w	r0, r0, sl
 800566a:	fa03 f000 	lsl.w	r0, r3, r0
 800566e:	9b04      	ldr	r3, [sp, #16]
 8005670:	4303      	orrs	r3, r0
 8005672:	3401      	adds	r4, #1
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567a:	4826      	ldr	r0, [pc, #152]	; (8005714 <_svfiprintf_r+0x1f0>)
 800567c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005680:	2206      	movs	r2, #6
 8005682:	f7fa fdb5 	bl	80001f0 <memchr>
 8005686:	2800      	cmp	r0, #0
 8005688:	d038      	beq.n	80056fc <_svfiprintf_r+0x1d8>
 800568a:	4b23      	ldr	r3, [pc, #140]	; (8005718 <_svfiprintf_r+0x1f4>)
 800568c:	bb1b      	cbnz	r3, 80056d6 <_svfiprintf_r+0x1b2>
 800568e:	9b03      	ldr	r3, [sp, #12]
 8005690:	3307      	adds	r3, #7
 8005692:	f023 0307 	bic.w	r3, r3, #7
 8005696:	3308      	adds	r3, #8
 8005698:	9303      	str	r3, [sp, #12]
 800569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569c:	4433      	add	r3, r6
 800569e:	9309      	str	r3, [sp, #36]	; 0x24
 80056a0:	e767      	b.n	8005572 <_svfiprintf_r+0x4e>
 80056a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056a6:	460c      	mov	r4, r1
 80056a8:	2001      	movs	r0, #1
 80056aa:	e7a5      	b.n	80055f8 <_svfiprintf_r+0xd4>
 80056ac:	2300      	movs	r3, #0
 80056ae:	3401      	adds	r4, #1
 80056b0:	9305      	str	r3, [sp, #20]
 80056b2:	4619      	mov	r1, r3
 80056b4:	f04f 0c0a 	mov.w	ip, #10
 80056b8:	4620      	mov	r0, r4
 80056ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056be:	3a30      	subs	r2, #48	; 0x30
 80056c0:	2a09      	cmp	r2, #9
 80056c2:	d903      	bls.n	80056cc <_svfiprintf_r+0x1a8>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0c5      	beq.n	8005654 <_svfiprintf_r+0x130>
 80056c8:	9105      	str	r1, [sp, #20]
 80056ca:	e7c3      	b.n	8005654 <_svfiprintf_r+0x130>
 80056cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d0:	4604      	mov	r4, r0
 80056d2:	2301      	movs	r3, #1
 80056d4:	e7f0      	b.n	80056b8 <_svfiprintf_r+0x194>
 80056d6:	ab03      	add	r3, sp, #12
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	462a      	mov	r2, r5
 80056dc:	4b0f      	ldr	r3, [pc, #60]	; (800571c <_svfiprintf_r+0x1f8>)
 80056de:	a904      	add	r1, sp, #16
 80056e0:	4638      	mov	r0, r7
 80056e2:	f3af 8000 	nop.w
 80056e6:	1c42      	adds	r2, r0, #1
 80056e8:	4606      	mov	r6, r0
 80056ea:	d1d6      	bne.n	800569a <_svfiprintf_r+0x176>
 80056ec:	89ab      	ldrh	r3, [r5, #12]
 80056ee:	065b      	lsls	r3, r3, #25
 80056f0:	f53f af2c 	bmi.w	800554c <_svfiprintf_r+0x28>
 80056f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056f6:	b01d      	add	sp, #116	; 0x74
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fc:	ab03      	add	r3, sp, #12
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	462a      	mov	r2, r5
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <_svfiprintf_r+0x1f8>)
 8005704:	a904      	add	r1, sp, #16
 8005706:	4638      	mov	r0, r7
 8005708:	f000 f87a 	bl	8005800 <_printf_i>
 800570c:	e7eb      	b.n	80056e6 <_svfiprintf_r+0x1c2>
 800570e:	bf00      	nop
 8005710:	08005da8 	.word	0x08005da8
 8005714:	08005db2 	.word	0x08005db2
 8005718:	00000000 	.word	0x00000000
 800571c:	0800546d 	.word	0x0800546d
 8005720:	08005dae 	.word	0x08005dae

08005724 <_printf_common>:
 8005724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005728:	4616      	mov	r6, r2
 800572a:	4699      	mov	r9, r3
 800572c:	688a      	ldr	r2, [r1, #8]
 800572e:	690b      	ldr	r3, [r1, #16]
 8005730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005734:	4293      	cmp	r3, r2
 8005736:	bfb8      	it	lt
 8005738:	4613      	movlt	r3, r2
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005740:	4607      	mov	r7, r0
 8005742:	460c      	mov	r4, r1
 8005744:	b10a      	cbz	r2, 800574a <_printf_common+0x26>
 8005746:	3301      	adds	r3, #1
 8005748:	6033      	str	r3, [r6, #0]
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	0699      	lsls	r1, r3, #26
 800574e:	bf42      	ittt	mi
 8005750:	6833      	ldrmi	r3, [r6, #0]
 8005752:	3302      	addmi	r3, #2
 8005754:	6033      	strmi	r3, [r6, #0]
 8005756:	6825      	ldr	r5, [r4, #0]
 8005758:	f015 0506 	ands.w	r5, r5, #6
 800575c:	d106      	bne.n	800576c <_printf_common+0x48>
 800575e:	f104 0a19 	add.w	sl, r4, #25
 8005762:	68e3      	ldr	r3, [r4, #12]
 8005764:	6832      	ldr	r2, [r6, #0]
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	42ab      	cmp	r3, r5
 800576a:	dc26      	bgt.n	80057ba <_printf_common+0x96>
 800576c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005770:	1e13      	subs	r3, r2, #0
 8005772:	6822      	ldr	r2, [r4, #0]
 8005774:	bf18      	it	ne
 8005776:	2301      	movne	r3, #1
 8005778:	0692      	lsls	r2, r2, #26
 800577a:	d42b      	bmi.n	80057d4 <_printf_common+0xb0>
 800577c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005780:	4649      	mov	r1, r9
 8005782:	4638      	mov	r0, r7
 8005784:	47c0      	blx	r8
 8005786:	3001      	adds	r0, #1
 8005788:	d01e      	beq.n	80057c8 <_printf_common+0xa4>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	68e5      	ldr	r5, [r4, #12]
 800578e:	6832      	ldr	r2, [r6, #0]
 8005790:	f003 0306 	and.w	r3, r3, #6
 8005794:	2b04      	cmp	r3, #4
 8005796:	bf08      	it	eq
 8005798:	1aad      	subeq	r5, r5, r2
 800579a:	68a3      	ldr	r3, [r4, #8]
 800579c:	6922      	ldr	r2, [r4, #16]
 800579e:	bf0c      	ite	eq
 80057a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a4:	2500      	movne	r5, #0
 80057a6:	4293      	cmp	r3, r2
 80057a8:	bfc4      	itt	gt
 80057aa:	1a9b      	subgt	r3, r3, r2
 80057ac:	18ed      	addgt	r5, r5, r3
 80057ae:	2600      	movs	r6, #0
 80057b0:	341a      	adds	r4, #26
 80057b2:	42b5      	cmp	r5, r6
 80057b4:	d11a      	bne.n	80057ec <_printf_common+0xc8>
 80057b6:	2000      	movs	r0, #0
 80057b8:	e008      	b.n	80057cc <_printf_common+0xa8>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4652      	mov	r2, sl
 80057be:	4649      	mov	r1, r9
 80057c0:	4638      	mov	r0, r7
 80057c2:	47c0      	blx	r8
 80057c4:	3001      	adds	r0, #1
 80057c6:	d103      	bne.n	80057d0 <_printf_common+0xac>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d0:	3501      	adds	r5, #1
 80057d2:	e7c6      	b.n	8005762 <_printf_common+0x3e>
 80057d4:	18e1      	adds	r1, r4, r3
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	2030      	movs	r0, #48	; 0x30
 80057da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057de:	4422      	add	r2, r4
 80057e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057e8:	3302      	adds	r3, #2
 80057ea:	e7c7      	b.n	800577c <_printf_common+0x58>
 80057ec:	2301      	movs	r3, #1
 80057ee:	4622      	mov	r2, r4
 80057f0:	4649      	mov	r1, r9
 80057f2:	4638      	mov	r0, r7
 80057f4:	47c0      	blx	r8
 80057f6:	3001      	adds	r0, #1
 80057f8:	d0e6      	beq.n	80057c8 <_printf_common+0xa4>
 80057fa:	3601      	adds	r6, #1
 80057fc:	e7d9      	b.n	80057b2 <_printf_common+0x8e>
	...

08005800 <_printf_i>:
 8005800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	460c      	mov	r4, r1
 8005806:	4691      	mov	r9, r2
 8005808:	7e27      	ldrb	r7, [r4, #24]
 800580a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800580c:	2f78      	cmp	r7, #120	; 0x78
 800580e:	4680      	mov	r8, r0
 8005810:	469a      	mov	sl, r3
 8005812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005816:	d807      	bhi.n	8005828 <_printf_i+0x28>
 8005818:	2f62      	cmp	r7, #98	; 0x62
 800581a:	d80a      	bhi.n	8005832 <_printf_i+0x32>
 800581c:	2f00      	cmp	r7, #0
 800581e:	f000 80d8 	beq.w	80059d2 <_printf_i+0x1d2>
 8005822:	2f58      	cmp	r7, #88	; 0x58
 8005824:	f000 80a3 	beq.w	800596e <_printf_i+0x16e>
 8005828:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800582c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005830:	e03a      	b.n	80058a8 <_printf_i+0xa8>
 8005832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005836:	2b15      	cmp	r3, #21
 8005838:	d8f6      	bhi.n	8005828 <_printf_i+0x28>
 800583a:	a001      	add	r0, pc, #4	; (adr r0, 8005840 <_printf_i+0x40>)
 800583c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005840:	08005899 	.word	0x08005899
 8005844:	080058ad 	.word	0x080058ad
 8005848:	08005829 	.word	0x08005829
 800584c:	08005829 	.word	0x08005829
 8005850:	08005829 	.word	0x08005829
 8005854:	08005829 	.word	0x08005829
 8005858:	080058ad 	.word	0x080058ad
 800585c:	08005829 	.word	0x08005829
 8005860:	08005829 	.word	0x08005829
 8005864:	08005829 	.word	0x08005829
 8005868:	08005829 	.word	0x08005829
 800586c:	080059b9 	.word	0x080059b9
 8005870:	080058dd 	.word	0x080058dd
 8005874:	0800599b 	.word	0x0800599b
 8005878:	08005829 	.word	0x08005829
 800587c:	08005829 	.word	0x08005829
 8005880:	080059db 	.word	0x080059db
 8005884:	08005829 	.word	0x08005829
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005829 	.word	0x08005829
 8005890:	08005829 	.word	0x08005829
 8005894:	080059a3 	.word	0x080059a3
 8005898:	680b      	ldr	r3, [r1, #0]
 800589a:	1d1a      	adds	r2, r3, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	600a      	str	r2, [r1, #0]
 80058a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0a3      	b.n	80059f4 <_printf_i+0x1f4>
 80058ac:	6825      	ldr	r5, [r4, #0]
 80058ae:	6808      	ldr	r0, [r1, #0]
 80058b0:	062e      	lsls	r6, r5, #24
 80058b2:	f100 0304 	add.w	r3, r0, #4
 80058b6:	d50a      	bpl.n	80058ce <_printf_i+0xce>
 80058b8:	6805      	ldr	r5, [r0, #0]
 80058ba:	600b      	str	r3, [r1, #0]
 80058bc:	2d00      	cmp	r5, #0
 80058be:	da03      	bge.n	80058c8 <_printf_i+0xc8>
 80058c0:	232d      	movs	r3, #45	; 0x2d
 80058c2:	426d      	negs	r5, r5
 80058c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c8:	485e      	ldr	r0, [pc, #376]	; (8005a44 <_printf_i+0x244>)
 80058ca:	230a      	movs	r3, #10
 80058cc:	e019      	b.n	8005902 <_printf_i+0x102>
 80058ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058d2:	6805      	ldr	r5, [r0, #0]
 80058d4:	600b      	str	r3, [r1, #0]
 80058d6:	bf18      	it	ne
 80058d8:	b22d      	sxthne	r5, r5
 80058da:	e7ef      	b.n	80058bc <_printf_i+0xbc>
 80058dc:	680b      	ldr	r3, [r1, #0]
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	1d18      	adds	r0, r3, #4
 80058e2:	6008      	str	r0, [r1, #0]
 80058e4:	0628      	lsls	r0, r5, #24
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0xec>
 80058e8:	681d      	ldr	r5, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <_printf_i+0xf2>
 80058ec:	0669      	lsls	r1, r5, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0xe8>
 80058f0:	881d      	ldrh	r5, [r3, #0]
 80058f2:	4854      	ldr	r0, [pc, #336]	; (8005a44 <_printf_i+0x244>)
 80058f4:	2f6f      	cmp	r7, #111	; 0x6f
 80058f6:	bf0c      	ite	eq
 80058f8:	2308      	moveq	r3, #8
 80058fa:	230a      	movne	r3, #10
 80058fc:	2100      	movs	r1, #0
 80058fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005902:	6866      	ldr	r6, [r4, #4]
 8005904:	60a6      	str	r6, [r4, #8]
 8005906:	2e00      	cmp	r6, #0
 8005908:	bfa2      	ittt	ge
 800590a:	6821      	ldrge	r1, [r4, #0]
 800590c:	f021 0104 	bicge.w	r1, r1, #4
 8005910:	6021      	strge	r1, [r4, #0]
 8005912:	b90d      	cbnz	r5, 8005918 <_printf_i+0x118>
 8005914:	2e00      	cmp	r6, #0
 8005916:	d04d      	beq.n	80059b4 <_printf_i+0x1b4>
 8005918:	4616      	mov	r6, r2
 800591a:	fbb5 f1f3 	udiv	r1, r5, r3
 800591e:	fb03 5711 	mls	r7, r3, r1, r5
 8005922:	5dc7      	ldrb	r7, [r0, r7]
 8005924:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005928:	462f      	mov	r7, r5
 800592a:	42bb      	cmp	r3, r7
 800592c:	460d      	mov	r5, r1
 800592e:	d9f4      	bls.n	800591a <_printf_i+0x11a>
 8005930:	2b08      	cmp	r3, #8
 8005932:	d10b      	bne.n	800594c <_printf_i+0x14c>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	07df      	lsls	r7, r3, #31
 8005938:	d508      	bpl.n	800594c <_printf_i+0x14c>
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	6861      	ldr	r1, [r4, #4]
 800593e:	4299      	cmp	r1, r3
 8005940:	bfde      	ittt	le
 8005942:	2330      	movle	r3, #48	; 0x30
 8005944:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005948:	f106 36ff 	addle.w	r6, r6, #4294967295
 800594c:	1b92      	subs	r2, r2, r6
 800594e:	6122      	str	r2, [r4, #16]
 8005950:	f8cd a000 	str.w	sl, [sp]
 8005954:	464b      	mov	r3, r9
 8005956:	aa03      	add	r2, sp, #12
 8005958:	4621      	mov	r1, r4
 800595a:	4640      	mov	r0, r8
 800595c:	f7ff fee2 	bl	8005724 <_printf_common>
 8005960:	3001      	adds	r0, #1
 8005962:	d14c      	bne.n	80059fe <_printf_i+0x1fe>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	b004      	add	sp, #16
 800596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596e:	4835      	ldr	r0, [pc, #212]	; (8005a44 <_printf_i+0x244>)
 8005970:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	680e      	ldr	r6, [r1, #0]
 8005978:	061f      	lsls	r7, r3, #24
 800597a:	f856 5b04 	ldr.w	r5, [r6], #4
 800597e:	600e      	str	r6, [r1, #0]
 8005980:	d514      	bpl.n	80059ac <_printf_i+0x1ac>
 8005982:	07d9      	lsls	r1, r3, #31
 8005984:	bf44      	itt	mi
 8005986:	f043 0320 	orrmi.w	r3, r3, #32
 800598a:	6023      	strmi	r3, [r4, #0]
 800598c:	b91d      	cbnz	r5, 8005996 <_printf_i+0x196>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f023 0320 	bic.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	2310      	movs	r3, #16
 8005998:	e7b0      	b.n	80058fc <_printf_i+0xfc>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f043 0320 	orr.w	r3, r3, #32
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	2378      	movs	r3, #120	; 0x78
 80059a4:	4828      	ldr	r0, [pc, #160]	; (8005a48 <_printf_i+0x248>)
 80059a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059aa:	e7e3      	b.n	8005974 <_printf_i+0x174>
 80059ac:	065e      	lsls	r6, r3, #25
 80059ae:	bf48      	it	mi
 80059b0:	b2ad      	uxthmi	r5, r5
 80059b2:	e7e6      	b.n	8005982 <_printf_i+0x182>
 80059b4:	4616      	mov	r6, r2
 80059b6:	e7bb      	b.n	8005930 <_printf_i+0x130>
 80059b8:	680b      	ldr	r3, [r1, #0]
 80059ba:	6826      	ldr	r6, [r4, #0]
 80059bc:	6960      	ldr	r0, [r4, #20]
 80059be:	1d1d      	adds	r5, r3, #4
 80059c0:	600d      	str	r5, [r1, #0]
 80059c2:	0635      	lsls	r5, r6, #24
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0x1cc>
 80059c8:	6018      	str	r0, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0x1d2>
 80059cc:	0671      	lsls	r1, r6, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0x1c8>
 80059d0:	8018      	strh	r0, [r3, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	4616      	mov	r6, r2
 80059d8:	e7ba      	b.n	8005950 <_printf_i+0x150>
 80059da:	680b      	ldr	r3, [r1, #0]
 80059dc:	1d1a      	adds	r2, r3, #4
 80059de:	600a      	str	r2, [r1, #0]
 80059e0:	681e      	ldr	r6, [r3, #0]
 80059e2:	6862      	ldr	r2, [r4, #4]
 80059e4:	2100      	movs	r1, #0
 80059e6:	4630      	mov	r0, r6
 80059e8:	f7fa fc02 	bl	80001f0 <memchr>
 80059ec:	b108      	cbz	r0, 80059f2 <_printf_i+0x1f2>
 80059ee:	1b80      	subs	r0, r0, r6
 80059f0:	6060      	str	r0, [r4, #4]
 80059f2:	6863      	ldr	r3, [r4, #4]
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	2300      	movs	r3, #0
 80059f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059fc:	e7a8      	b.n	8005950 <_printf_i+0x150>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	4632      	mov	r2, r6
 8005a02:	4649      	mov	r1, r9
 8005a04:	4640      	mov	r0, r8
 8005a06:	47d0      	blx	sl
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d0ab      	beq.n	8005964 <_printf_i+0x164>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	079b      	lsls	r3, r3, #30
 8005a10:	d413      	bmi.n	8005a3a <_printf_i+0x23a>
 8005a12:	68e0      	ldr	r0, [r4, #12]
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	4298      	cmp	r0, r3
 8005a18:	bfb8      	it	lt
 8005a1a:	4618      	movlt	r0, r3
 8005a1c:	e7a4      	b.n	8005968 <_printf_i+0x168>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4632      	mov	r2, r6
 8005a22:	4649      	mov	r1, r9
 8005a24:	4640      	mov	r0, r8
 8005a26:	47d0      	blx	sl
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d09b      	beq.n	8005964 <_printf_i+0x164>
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	9903      	ldr	r1, [sp, #12]
 8005a32:	1a5b      	subs	r3, r3, r1
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dcf2      	bgt.n	8005a1e <_printf_i+0x21e>
 8005a38:	e7eb      	b.n	8005a12 <_printf_i+0x212>
 8005a3a:	2500      	movs	r5, #0
 8005a3c:	f104 0619 	add.w	r6, r4, #25
 8005a40:	e7f5      	b.n	8005a2e <_printf_i+0x22e>
 8005a42:	bf00      	nop
 8005a44:	08005db9 	.word	0x08005db9
 8005a48:	08005dca 	.word	0x08005dca

08005a4c <memmove>:
 8005a4c:	4288      	cmp	r0, r1
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	eb01 0402 	add.w	r4, r1, r2
 8005a54:	d902      	bls.n	8005a5c <memmove+0x10>
 8005a56:	4284      	cmp	r4, r0
 8005a58:	4623      	mov	r3, r4
 8005a5a:	d807      	bhi.n	8005a6c <memmove+0x20>
 8005a5c:	1e43      	subs	r3, r0, #1
 8005a5e:	42a1      	cmp	r1, r4
 8005a60:	d008      	beq.n	8005a74 <memmove+0x28>
 8005a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a6a:	e7f8      	b.n	8005a5e <memmove+0x12>
 8005a6c:	4402      	add	r2, r0
 8005a6e:	4601      	mov	r1, r0
 8005a70:	428a      	cmp	r2, r1
 8005a72:	d100      	bne.n	8005a76 <memmove+0x2a>
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a7e:	e7f7      	b.n	8005a70 <memmove+0x24>

08005a80 <_free_r>:
 8005a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a82:	2900      	cmp	r1, #0
 8005a84:	d048      	beq.n	8005b18 <_free_r+0x98>
 8005a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8a:	9001      	str	r0, [sp, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a92:	bfb8      	it	lt
 8005a94:	18e4      	addlt	r4, r4, r3
 8005a96:	f000 f8d3 	bl	8005c40 <__malloc_lock>
 8005a9a:	4a20      	ldr	r2, [pc, #128]	; (8005b1c <_free_r+0x9c>)
 8005a9c:	9801      	ldr	r0, [sp, #4]
 8005a9e:	6813      	ldr	r3, [r2, #0]
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	b933      	cbnz	r3, 8005ab2 <_free_r+0x32>
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	6014      	str	r4, [r2, #0]
 8005aa8:	b003      	add	sp, #12
 8005aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aae:	f000 b8cd 	b.w	8005c4c <__malloc_unlock>
 8005ab2:	42a3      	cmp	r3, r4
 8005ab4:	d90b      	bls.n	8005ace <_free_r+0x4e>
 8005ab6:	6821      	ldr	r1, [r4, #0]
 8005ab8:	1862      	adds	r2, r4, r1
 8005aba:	4293      	cmp	r3, r2
 8005abc:	bf04      	itt	eq
 8005abe:	681a      	ldreq	r2, [r3, #0]
 8005ac0:	685b      	ldreq	r3, [r3, #4]
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	bf04      	itt	eq
 8005ac6:	1852      	addeq	r2, r2, r1
 8005ac8:	6022      	streq	r2, [r4, #0]
 8005aca:	602c      	str	r4, [r5, #0]
 8005acc:	e7ec      	b.n	8005aa8 <_free_r+0x28>
 8005ace:	461a      	mov	r2, r3
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	b10b      	cbz	r3, 8005ad8 <_free_r+0x58>
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d9fa      	bls.n	8005ace <_free_r+0x4e>
 8005ad8:	6811      	ldr	r1, [r2, #0]
 8005ada:	1855      	adds	r5, r2, r1
 8005adc:	42a5      	cmp	r5, r4
 8005ade:	d10b      	bne.n	8005af8 <_free_r+0x78>
 8005ae0:	6824      	ldr	r4, [r4, #0]
 8005ae2:	4421      	add	r1, r4
 8005ae4:	1854      	adds	r4, r2, r1
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	d1dd      	bne.n	8005aa8 <_free_r+0x28>
 8005aec:	681c      	ldr	r4, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6053      	str	r3, [r2, #4]
 8005af2:	4421      	add	r1, r4
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	e7d7      	b.n	8005aa8 <_free_r+0x28>
 8005af8:	d902      	bls.n	8005b00 <_free_r+0x80>
 8005afa:	230c      	movs	r3, #12
 8005afc:	6003      	str	r3, [r0, #0]
 8005afe:	e7d3      	b.n	8005aa8 <_free_r+0x28>
 8005b00:	6825      	ldr	r5, [r4, #0]
 8005b02:	1961      	adds	r1, r4, r5
 8005b04:	428b      	cmp	r3, r1
 8005b06:	bf04      	itt	eq
 8005b08:	6819      	ldreq	r1, [r3, #0]
 8005b0a:	685b      	ldreq	r3, [r3, #4]
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	bf04      	itt	eq
 8005b10:	1949      	addeq	r1, r1, r5
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	6054      	str	r4, [r2, #4]
 8005b16:	e7c7      	b.n	8005aa8 <_free_r+0x28>
 8005b18:	b003      	add	sp, #12
 8005b1a:	bd30      	pop	{r4, r5, pc}
 8005b1c:	200049b8 	.word	0x200049b8

08005b20 <_malloc_r>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	1ccd      	adds	r5, r1, #3
 8005b24:	f025 0503 	bic.w	r5, r5, #3
 8005b28:	3508      	adds	r5, #8
 8005b2a:	2d0c      	cmp	r5, #12
 8005b2c:	bf38      	it	cc
 8005b2e:	250c      	movcc	r5, #12
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	4606      	mov	r6, r0
 8005b34:	db01      	blt.n	8005b3a <_malloc_r+0x1a>
 8005b36:	42a9      	cmp	r1, r5
 8005b38:	d903      	bls.n	8005b42 <_malloc_r+0x22>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	2000      	movs	r0, #0
 8005b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b42:	f000 f87d 	bl	8005c40 <__malloc_lock>
 8005b46:	4921      	ldr	r1, [pc, #132]	; (8005bcc <_malloc_r+0xac>)
 8005b48:	680a      	ldr	r2, [r1, #0]
 8005b4a:	4614      	mov	r4, r2
 8005b4c:	b99c      	cbnz	r4, 8005b76 <_malloc_r+0x56>
 8005b4e:	4f20      	ldr	r7, [pc, #128]	; (8005bd0 <_malloc_r+0xb0>)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	b923      	cbnz	r3, 8005b5e <_malloc_r+0x3e>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4630      	mov	r0, r6
 8005b58:	f000 f862 	bl	8005c20 <_sbrk_r>
 8005b5c:	6038      	str	r0, [r7, #0]
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f85d 	bl	8005c20 <_sbrk_r>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	d123      	bne.n	8005bb2 <_malloc_r+0x92>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	6033      	str	r3, [r6, #0]
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f000 f86c 	bl	8005c4c <__malloc_unlock>
 8005b74:	e7e3      	b.n	8005b3e <_malloc_r+0x1e>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	1b5b      	subs	r3, r3, r5
 8005b7a:	d417      	bmi.n	8005bac <_malloc_r+0x8c>
 8005b7c:	2b0b      	cmp	r3, #11
 8005b7e:	d903      	bls.n	8005b88 <_malloc_r+0x68>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	441c      	add	r4, r3
 8005b84:	6025      	str	r5, [r4, #0]
 8005b86:	e004      	b.n	8005b92 <_malloc_r+0x72>
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	42a2      	cmp	r2, r4
 8005b8c:	bf0c      	ite	eq
 8005b8e:	600b      	streq	r3, [r1, #0]
 8005b90:	6053      	strne	r3, [r2, #4]
 8005b92:	4630      	mov	r0, r6
 8005b94:	f000 f85a 	bl	8005c4c <__malloc_unlock>
 8005b98:	f104 000b 	add.w	r0, r4, #11
 8005b9c:	1d23      	adds	r3, r4, #4
 8005b9e:	f020 0007 	bic.w	r0, r0, #7
 8005ba2:	1ac2      	subs	r2, r0, r3
 8005ba4:	d0cc      	beq.n	8005b40 <_malloc_r+0x20>
 8005ba6:	1a1b      	subs	r3, r3, r0
 8005ba8:	50a3      	str	r3, [r4, r2]
 8005baa:	e7c9      	b.n	8005b40 <_malloc_r+0x20>
 8005bac:	4622      	mov	r2, r4
 8005bae:	6864      	ldr	r4, [r4, #4]
 8005bb0:	e7cc      	b.n	8005b4c <_malloc_r+0x2c>
 8005bb2:	1cc4      	adds	r4, r0, #3
 8005bb4:	f024 0403 	bic.w	r4, r4, #3
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d0e3      	beq.n	8005b84 <_malloc_r+0x64>
 8005bbc:	1a21      	subs	r1, r4, r0
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f000 f82e 	bl	8005c20 <_sbrk_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d1dd      	bne.n	8005b84 <_malloc_r+0x64>
 8005bc8:	e7cf      	b.n	8005b6a <_malloc_r+0x4a>
 8005bca:	bf00      	nop
 8005bcc:	200049b8 	.word	0x200049b8
 8005bd0:	200049bc 	.word	0x200049bc

08005bd4 <_realloc_r>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	4607      	mov	r7, r0
 8005bd8:	4614      	mov	r4, r2
 8005bda:	460e      	mov	r6, r1
 8005bdc:	b921      	cbnz	r1, 8005be8 <_realloc_r+0x14>
 8005bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005be2:	4611      	mov	r1, r2
 8005be4:	f7ff bf9c 	b.w	8005b20 <_malloc_r>
 8005be8:	b922      	cbnz	r2, 8005bf4 <_realloc_r+0x20>
 8005bea:	f7ff ff49 	bl	8005a80 <_free_r>
 8005bee:	4625      	mov	r5, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf4:	f000 f830 	bl	8005c58 <_malloc_usable_size_r>
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d20f      	bcs.n	8005c1c <_realloc_r+0x48>
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f7ff ff8e 	bl	8005b20 <_malloc_r>
 8005c04:	4605      	mov	r5, r0
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d0f2      	beq.n	8005bf0 <_realloc_r+0x1c>
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4622      	mov	r2, r4
 8005c0e:	f7ff fbf7 	bl	8005400 <memcpy>
 8005c12:	4631      	mov	r1, r6
 8005c14:	4638      	mov	r0, r7
 8005c16:	f7ff ff33 	bl	8005a80 <_free_r>
 8005c1a:	e7e9      	b.n	8005bf0 <_realloc_r+0x1c>
 8005c1c:	4635      	mov	r5, r6
 8005c1e:	e7e7      	b.n	8005bf0 <_realloc_r+0x1c>

08005c20 <_sbrk_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d06      	ldr	r5, [pc, #24]	; (8005c3c <_sbrk_r+0x1c>)
 8005c24:	2300      	movs	r3, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	f7fb f8aa 	bl	8000d84 <_sbrk>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_sbrk_r+0x1a>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_sbrk_r+0x1a>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	20004b00 	.word	0x20004b00

08005c40 <__malloc_lock>:
 8005c40:	4801      	ldr	r0, [pc, #4]	; (8005c48 <__malloc_lock+0x8>)
 8005c42:	f000 b811 	b.w	8005c68 <__retarget_lock_acquire_recursive>
 8005c46:	bf00      	nop
 8005c48:	20004b08 	.word	0x20004b08

08005c4c <__malloc_unlock>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	; (8005c54 <__malloc_unlock+0x8>)
 8005c4e:	f000 b80c 	b.w	8005c6a <__retarget_lock_release_recursive>
 8005c52:	bf00      	nop
 8005c54:	20004b08 	.word	0x20004b08

08005c58 <_malloc_usable_size_r>:
 8005c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c5c:	1f18      	subs	r0, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bfbc      	itt	lt
 8005c62:	580b      	ldrlt	r3, [r1, r0]
 8005c64:	18c0      	addlt	r0, r0, r3
 8005c66:	4770      	bx	lr

08005c68 <__retarget_lock_acquire_recursive>:
 8005c68:	4770      	bx	lr

08005c6a <__retarget_lock_release_recursive>:
 8005c6a:	4770      	bx	lr

08005c6c <_init>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr

08005c78 <_fini>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr
