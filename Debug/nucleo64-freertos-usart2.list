
nucleo64-freertos-usart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a2c  20000020  08005160  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a4c  08005160  00024a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018678  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a1  00000000  00000000  000386c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000355f  00000000  00000000  0003dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c39  00000000  00000000  000412f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097343  00000000  00000000  00054f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  000ec2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000020 	.word	0x20000020
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005050 	.word	0x08005050

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000024 	.word	0x20000024
 80001dc:	08005050 	.word	0x08005050

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fbd6 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f834 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8c6 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f89a 	bl	8000620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f002 f828 	bl	8002540 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of buttonControl */
  buttonControlHandle = osThreadNew(StartButtonControl, NULL, &buttonControl_attributes);
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <main+0x50>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <main+0x54>)
 80004f6:	f002 f86d 	bl	80025d4 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <main+0x58>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of ledControl */
  ledControlHandle = osThreadNew(StartLedControl, NULL, &ledControl_attributes);
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <main+0x5c>)
 8000502:	2100      	movs	r1, #0
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <main+0x60>)
 8000506:	f002 f865 	bl	80025d4 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <main+0x64>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of serialControl */
  serialControlHandle = osThreadNew(StartSerialControl, NULL, &serialControl_attributes);
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <main+0x68>)
 8000512:	2100      	movs	r1, #0
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x6c>)
 8000516:	f002 f85d 	bl	80025d4 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <main+0x70>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f002 f832 	bl	8002588 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x4c>
 8000526:	bf00      	nop
 8000528:	080050ac 	.word	0x080050ac
 800052c:	08000799 	.word	0x08000799
 8000530:	200049bc 	.word	0x200049bc
 8000534:	080050d0 	.word	0x080050d0
 8000538:	080008f5 	.word	0x080008f5
 800053c:	20004970 	.word	0x20004970
 8000540:	080050f4 	.word	0x080050f4
 8000544:	080009f9 	.word	0x080009f9
 8000548:	20004974 	.word	0x20004974

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 fd70 	bl	8005040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a27      	ldr	r2, [pc, #156]	; (8000618 <SystemClock_Config+0xcc>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <SystemClock_Config+0xd0>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005bc:	2310      	movs	r3, #16
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fe34 	bl	8001240 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005de:	f000 fa25 	bl	8000a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f896 	bl	8001730 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060a:	f000 fa0f 	bl	8000a2c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000658:	f001 fd18 	bl	800208c <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f000 f9e3 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20004978 	.word	0x20004978
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <MX_GPIO_Init+0x110>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a3c      	ldr	r2, [pc, #240]	; (8000784 <MX_GPIO_Init+0x110>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <MX_GPIO_Init+0x110>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <MX_GPIO_Init+0x110>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <MX_GPIO_Init+0x110>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <MX_GPIO_Init+0x110>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0x110>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <MX_GPIO_Init+0x110>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <MX_GPIO_Init+0x110>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0x110>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a27      	ldr	r2, [pc, #156]	; (8000784 <MX_GPIO_Init+0x110>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_GPIO_Init+0x110>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	4822      	ldr	r0, [pc, #136]	; (8000788 <MX_GPIO_Init+0x114>)
 8000700:	f000 fd84 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f24e 0102 	movw	r1, #57346	; 0xe002
 800070a:	4820      	ldr	r0, [pc, #128]	; (800078c <MX_GPIO_Init+0x118>)
 800070c:	f000 fd7e 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_GPIO_Init+0x11c>)
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	481b      	ldr	r0, [pc, #108]	; (8000794 <MX_GPIO_Init+0x120>)
 8000726:	f000 fbd5 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOT1_Pin BOT2_Pin BOT3_Pin BOT4_Pin */
  GPIO_InitStruct.Pin = BOT1_Pin|BOT2_Pin|BOT3_Pin|BOT4_Pin;
 800072a:	230f      	movs	r3, #15
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4815      	ldr	r0, [pc, #84]	; (8000794 <MX_GPIO_Init+0x120>)
 800073e:	f000 fbc9 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000742:	2320      	movs	r3, #32
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0x114>)
 800075a:	f000 fbbb 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800075e:	f24e 0302 	movw	r3, #57346	; 0xe002
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0x118>)
 8000778:	f000 fbac 	bl	8000ed4 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000
 800078c:	40020400 	.word	0x40020400
 8000790:	10210000 	.word	0x10210000
 8000794:	40020800 	.word	0x40020800

08000798 <StartButtonControl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonControl */
void StartButtonControl(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if(isReading)
 80007a0:	4b50      	ldr	r3, [pc, #320]	; (80008e4 <StartButtonControl+0x14c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0fb      	beq.n	80007a0 <StartButtonControl+0x8>
    {
      for(int i = 0; i<gameLevel && isReading;)
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	e08d      	b.n	80008ca <StartButtonControl+0x132>
      {
        if(HAL_GPIO_ReadPin(GPIOC, BOT1_Pin))
 80007ae:	2101      	movs	r1, #1
 80007b0:	484d      	ldr	r0, [pc, #308]	; (80008e8 <StartButtonControl+0x150>)
 80007b2:	f000 fd13 	bl	80011dc <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d018      	beq.n	80007ee <StartButtonControl+0x56>
        {
            if(game[i]!=4)
 80007bc:	4a4b      	ldr	r2, [pc, #300]	; (80008ec <StartButtonControl+0x154>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d006      	beq.n	80007d6 <StartButtonControl+0x3e>
            {
              isReading = 0;
 80007c8:	4b46      	ldr	r3, [pc, #280]	; (80008e4 <StartButtonControl+0x14c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
              gameLevel = 1;
 80007ce:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <StartButtonControl+0x158>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	e002      	b.n	80007dc <StartButtonControl+0x44>
            }
            else i++;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
            while (HAL_GPIO_ReadPin(GPIOC, BOT1_Pin)){}
 80007dc:	bf00      	nop
 80007de:	2101      	movs	r1, #1
 80007e0:	4841      	ldr	r0, [pc, #260]	; (80008e8 <StartButtonControl+0x150>)
 80007e2:	f000 fcfb 	bl	80011dc <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f8      	bne.n	80007de <StartButtonControl+0x46>
 80007ec:	e05e      	b.n	80008ac <StartButtonControl+0x114>
        }
        else if(HAL_GPIO_ReadPin(GPIOC, BOT2_Pin))
 80007ee:	2102      	movs	r1, #2
 80007f0:	483d      	ldr	r0, [pc, #244]	; (80008e8 <StartButtonControl+0x150>)
 80007f2:	f000 fcf3 	bl	80011dc <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d018      	beq.n	800082e <StartButtonControl+0x96>
        {
            if(game[i]!=3)
 80007fc:	4a3b      	ldr	r2, [pc, #236]	; (80008ec <StartButtonControl+0x154>)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d006      	beq.n	8000816 <StartButtonControl+0x7e>
            {
              isReading = 0;
 8000808:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <StartButtonControl+0x14c>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
              gameLevel = 1;
 800080e:	4b38      	ldr	r3, [pc, #224]	; (80008f0 <StartButtonControl+0x158>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e002      	b.n	800081c <StartButtonControl+0x84>
            }
            else i++;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
            while (HAL_GPIO_ReadPin(GPIOC, BOT2_Pin)){}
 800081c:	bf00      	nop
 800081e:	2102      	movs	r1, #2
 8000820:	4831      	ldr	r0, [pc, #196]	; (80008e8 <StartButtonControl+0x150>)
 8000822:	f000 fcdb 	bl	80011dc <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f8      	bne.n	800081e <StartButtonControl+0x86>
 800082c:	e03e      	b.n	80008ac <StartButtonControl+0x114>
        }
        else if(HAL_GPIO_ReadPin(GPIOC, BOT3_Pin))
 800082e:	2104      	movs	r1, #4
 8000830:	482d      	ldr	r0, [pc, #180]	; (80008e8 <StartButtonControl+0x150>)
 8000832:	f000 fcd3 	bl	80011dc <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d018      	beq.n	800086e <StartButtonControl+0xd6>
        {
            if(game[i]!=2)
 800083c:	4a2b      	ldr	r2, [pc, #172]	; (80008ec <StartButtonControl+0x154>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d006      	beq.n	8000856 <StartButtonControl+0xbe>
            {
              isReading = 0;
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <StartButtonControl+0x14c>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
              gameLevel = 1;
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <StartButtonControl+0x158>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e002      	b.n	800085c <StartButtonControl+0xc4>
            }
            else i++;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
            while (HAL_GPIO_ReadPin(GPIOC, BOT3_Pin)){}
 800085c:	bf00      	nop
 800085e:	2104      	movs	r1, #4
 8000860:	4821      	ldr	r0, [pc, #132]	; (80008e8 <StartButtonControl+0x150>)
 8000862:	f000 fcbb 	bl	80011dc <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f8      	bne.n	800085e <StartButtonControl+0xc6>
 800086c:	e01e      	b.n	80008ac <StartButtonControl+0x114>
        }
        else if(HAL_GPIO_ReadPin(GPIOC, BOT4_Pin))
 800086e:	2108      	movs	r1, #8
 8000870:	481d      	ldr	r0, [pc, #116]	; (80008e8 <StartButtonControl+0x150>)
 8000872:	f000 fcb3 	bl	80011dc <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d017      	beq.n	80008ac <StartButtonControl+0x114>
        {
            if(game[i]!=1)
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <StartButtonControl+0x154>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d006      	beq.n	8000896 <StartButtonControl+0xfe>
            {
              isReading = 0;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <StartButtonControl+0x14c>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
              gameLevel = 1;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <StartButtonControl+0x158>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	e002      	b.n	800089c <StartButtonControl+0x104>
            }
            else i++;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
            while (HAL_GPIO_ReadPin(GPIOC, BOT4_Pin)){}
 800089c:	bf00      	nop
 800089e:	2108      	movs	r1, #8
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <StartButtonControl+0x150>)
 80008a2:	f000 fc9b 	bl	80011dc <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f8      	bne.n	800089e <StartButtonControl+0x106>
        }
        else{}        

        if(i==gameLevel)
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <StartButtonControl+0x158>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d108      	bne.n	80008ca <StartButtonControl+0x132>
        {
          isReading = 0;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <StartButtonControl+0x14c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
          gameLevel++;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <StartButtonControl+0x158>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <StartButtonControl+0x158>)
 80008c8:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i<gameLevel && isReading;)
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <StartButtonControl+0x158>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4293      	cmp	r3, r2
 80008d4:	f6bf af64 	bge.w	80007a0 <StartButtonControl+0x8>
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <StartButtonControl+0x14c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f47f af66 	bne.w	80007ae <StartButtonControl+0x16>
    if(isReading)
 80008e2:	e75d      	b.n	80007a0 <StartButtonControl+0x8>
 80008e4:	2000003c 	.word	0x2000003c
 80008e8:	40020800 	.word	0x40020800
 80008ec:	20000000 	.word	0x20000000
 80008f0:	2000000f 	.word	0x2000000f

080008f4 <StartLedControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedControl */
void StartLedControl(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedControl */
  /* Infinite loop */
  for(;;)
  {
    if (isReading == 0){
 80008fc:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <StartLedControl+0xf4>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d16d      	bne.n	80009e0 <StartLedControl+0xec>
      for(int i=0;i<gameLevel;i++){
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	e04a      	b.n	80009a0 <StartLedControl+0xac>
        HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000910:	4836      	ldr	r0, [pc, #216]	; (80009ec <StartLedControl+0xf8>)
 8000912:	f000 fc7b 	bl	800120c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091c:	4833      	ldr	r0, [pc, #204]	; (80009ec <StartLedControl+0xf8>)
 800091e:	f000 fc75 	bl	800120c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000928:	4830      	ldr	r0, [pc, #192]	; (80009ec <StartLedControl+0xf8>)
 800092a:	f000 fc6f 	bl	800120c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2102      	movs	r1, #2
 8000932:	482e      	ldr	r0, [pc, #184]	; (80009ec <StartLedControl+0xf8>)
 8000934:	f000 fc6a 	bl	800120c <HAL_GPIO_WritePin>
        switch (game[i])
 8000938:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <StartLedControl+0xfc>)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	2b03      	cmp	r3, #3
 8000944:	d825      	bhi.n	8000992 <StartLedControl+0x9e>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <StartLedControl+0x58>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	0800095d 	.word	0x0800095d
 8000950:	0800096b 	.word	0x0800096b
 8000954:	08000979 	.word	0x08000979
 8000958:	08000987 	.word	0x08000987
        {
        case 1:
          HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000962:	4822      	ldr	r0, [pc, #136]	; (80009ec <StartLedControl+0xf8>)
 8000964:	f000 fc52 	bl	800120c <HAL_GPIO_WritePin>
          break;
 8000968:	e013      	b.n	8000992 <StartLedControl+0x9e>
        case 2:
          HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000970:	481e      	ldr	r0, [pc, #120]	; (80009ec <StartLedControl+0xf8>)
 8000972:	f000 fc4b 	bl	800120c <HAL_GPIO_WritePin>
          break;
 8000976:	e00c      	b.n	8000992 <StartLedControl+0x9e>
        case 3:
          HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097e:	481b      	ldr	r0, [pc, #108]	; (80009ec <StartLedControl+0xf8>)
 8000980:	f000 fc44 	bl	800120c <HAL_GPIO_WritePin>
          break;
 8000984:	e005      	b.n	8000992 <StartLedControl+0x9e>
        case 4:
          HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2102      	movs	r1, #2
 800098a:	4818      	ldr	r0, [pc, #96]	; (80009ec <StartLedControl+0xf8>)
 800098c:	f000 fc3e 	bl	800120c <HAL_GPIO_WritePin>
          break;
 8000990:	bf00      	nop
        }
        osDelay(1000);
 8000992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000996:	f001 feaf 	bl	80026f8 <osDelay>
      for(int i=0;i<gameLevel;i++){
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <StartLedControl+0x100>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4293      	cmp	r3, r2
 80009aa:	dbae      	blt.n	800090a <StartLedControl+0x16>
      }
      HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <StartLedControl+0xf8>)
 80009b4:	f000 fc2a 	bl	800120c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <StartLedControl+0xf8>)
 80009c0:	f000 fc24 	bl	800120c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ca:	4808      	ldr	r0, [pc, #32]	; (80009ec <StartLedControl+0xf8>)
 80009cc:	f000 fc1e 	bl	800120c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2102      	movs	r1, #2
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <StartLedControl+0xf8>)
 80009d6:	f000 fc19 	bl	800120c <HAL_GPIO_WritePin>
      isReading=1;
 80009da:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <StartLedControl+0xf4>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
    }
    osDelay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f001 fe89 	bl	80026f8 <osDelay>
    if (isReading == 0){
 80009e6:	e789      	b.n	80008fc <StartLedControl+0x8>
 80009e8:	2000003c 	.word	0x2000003c
 80009ec:	40020400 	.word	0x40020400
 80009f0:	20000000 	.word	0x20000000
 80009f4:	2000000f 	.word	0x2000000f

080009f8 <StartSerialControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialControl */
void StartSerialControl(void *argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f001 fe79 	bl	80026f8 <osDelay>
 8000a06:	e7fb      	b.n	8000a00 <StartSerialControl+0x8>

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1a:	f000 f959 	bl	8000cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40000c00 	.word	0x40000c00

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x54>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_MspInit+0x54>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x54>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_MspInit+0x54>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_MspInit+0x54>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_MspInit+0x54>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	210f      	movs	r1, #15
 8000a7a:	f06f 0001 	mvn.w	r0, #1
 8000a7e:	f000 f9ff 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12b      	bne.n	8000b0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aea:	230c      	movs	r3, #12
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	2307      	movs	r3, #7
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_UART_MspInit+0x8c>)
 8000b06:	f000 f9e5 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2032      	movs	r0, #50	; 0x32
 8000b36:	f000 f9a3 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f000 f9bc 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_InitTick+0xa4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <HAL_InitTick+0xa4>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_InitTick+0xa4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b5c:	f107 0210 	add.w	r2, r7, #16
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 ffde 	bl	8001b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b6c:	f000 ffb4 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8000b70:	4603      	mov	r3, r0
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_InitTick+0xa8>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	0c9b      	lsrs	r3, r3, #18
 8000b80:	3b01      	subs	r3, #1
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_InitTick+0xac>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <HAL_InitTick+0xb0>)
 8000b88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_InitTick+0xac>)
 8000b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b90:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_InitTick+0xac>)
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b96:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_InitTick+0xac>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_InitTick+0xac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <HAL_InitTick+0xac>)
 8000ba6:	f000 fff1 	bl	8001b8c <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d104      	bne.n	8000bba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <HAL_InitTick+0xac>)
 8000bb2:	f001 f845 	bl	8001c40 <HAL_TIM_Base_Start_IT>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	431bde83 	.word	0x431bde83
 8000bcc:	200049c0 	.word	0x200049c0
 8000bd0:	40000c00 	.word	0x40000c00

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM5_IRQHandler+0x10>)
 8000c06:	f001 f87d 	bl	8001d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200049c0 	.word	0x200049c0

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f004 f9b9 	bl	8004fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc35 	bl	80004d8 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c7c:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8000c80:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c84:	20004a4c 	.word	0x20004a4c

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8d8 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff ff30 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff feba 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000018 	.word	0x20000018
 8000cf4:	20004a08 	.word	0x20004a08

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20004a08 	.word	0x20004a08

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e159      	b.n	80011a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8148 	bne.w	800119e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a2 	beq.w	800119e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b57      	ldr	r3, [pc, #348]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a56      	ldr	r2, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b54      	ldr	r3, [pc, #336]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_GPIO_Init+0x2ec>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x2f0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x202>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2f4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x1fe>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a47      	ldr	r2, [pc, #284]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <HAL_GPIO_Init+0x2fc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x1f6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <HAL_GPIO_Init+0x300>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x1f2>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e008      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d6:	2300      	movs	r3, #0
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x2ec>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_GPIO_Init+0x304>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001144:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	f67f aea2 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e001      	b.n	80011fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e264      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d075      	beq.n	800134a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125e:	4ba3      	ldr	r3, [pc, #652]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d00c      	beq.n	8001284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4ba0      	ldr	r3, [pc, #640]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	2b08      	cmp	r3, #8
 8001274:	d112      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b9d      	ldr	r3, [pc, #628]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001282:	d10b      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	4b99      	ldr	r3, [pc, #612]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d05b      	beq.n	8001348 <HAL_RCC_OscConfig+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d157      	bne.n	8001348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e23f      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d106      	bne.n	80012b4 <HAL_RCC_OscConfig+0x74>
 80012a6:	4b91      	ldr	r3, [pc, #580]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a90      	ldr	r2, [pc, #576]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e01d      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x98>
 80012be:	4b8b      	ldr	r3, [pc, #556]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a8a      	ldr	r2, [pc, #552]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b88      	ldr	r3, [pc, #544]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a87      	ldr	r2, [pc, #540]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012d8:	4b84      	ldr	r3, [pc, #528]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a83      	ldr	r2, [pc, #524]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b81      	ldr	r3, [pc, #516]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a80      	ldr	r2, [pc, #512]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fcfe 	bl	8000cf8 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fcfa 	bl	8000cf8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e204      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b76      	ldr	r3, [pc, #472]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xc0>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fcea 	bl	8000cf8 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fce6 	bl	8000cf8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1f0      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b6c      	ldr	r3, [pc, #432]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0xe8>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d063      	beq.n	800141e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001356:	4b65      	ldr	r3, [pc, #404]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b62      	ldr	r3, [pc, #392]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	2b08      	cmp	r3, #8
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b5c      	ldr	r3, [pc, #368]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1c4      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b56      	ldr	r3, [pc, #344]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4952      	ldr	r1, [pc, #328]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e03a      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <HAL_RCC_OscConfig+0x2b0>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fc9f 	bl	8000cf8 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fc9b 	bl	8000cf8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1a5      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4b46      	ldr	r3, [pc, #280]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b43      	ldr	r3, [pc, #268]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4940      	ldr	r1, [pc, #256]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <HAL_RCC_OscConfig+0x2b0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc7e 	bl	8000cf8 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fc7a 	bl	8000cf8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e184      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d030      	beq.n	800148c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d016      	beq.n	8001460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fc5e 	bl	8000cf8 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fc5a 	bl	8000cf8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e164      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x200>
 800145e:	e015      	b.n	800148c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff fc47 	bl	8000cf8 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fc43 	bl	8000cf8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e14d      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a0 	beq.w	80015da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x2b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d121      	bne.n	800151a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_RCC_OscConfig+0x2b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_RCC_OscConfig+0x2b8>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc09 	bl	8000cf8 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e011      	b.n	800150e <HAL_RCC_OscConfig+0x2ce>
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	42470000 	.word	0x42470000
 80014f4:	42470e80 	.word	0x42470e80
 80014f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fc:	f7ff fbfc 	bl	8000cf8 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e106      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b85      	ldr	r3, [pc, #532]	; (8001724 <HAL_RCC_OscConfig+0x4e4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x2f0>
 8001522:	4b81      	ldr	r3, [pc, #516]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a80      	ldr	r2, [pc, #512]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	e01c      	b.n	800156a <HAL_RCC_OscConfig+0x32a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d10c      	bne.n	8001552 <HAL_RCC_OscConfig+0x312>
 8001538:	4b7b      	ldr	r3, [pc, #492]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a7a      	ldr	r2, [pc, #488]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	4b78      	ldr	r3, [pc, #480]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a77      	ldr	r2, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	e00b      	b.n	800156a <HAL_RCC_OscConfig+0x32a>
 8001552:	4b75      	ldr	r3, [pc, #468]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a74      	ldr	r2, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	4a71      	ldr	r2, [pc, #452]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d015      	beq.n	800159e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff fbc1 	bl	8000cf8 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff fbbd 	bl	8000cf8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0c5      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	4b65      	ldr	r3, [pc, #404]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ee      	beq.n	800157a <HAL_RCC_OscConfig+0x33a>
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fbab 	bl	8000cf8 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fba7 	bl	8000cf8 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0af      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ee      	bne.n	80015a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d105      	bne.n	80015da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ce:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a55      	ldr	r2, [pc, #340]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 80015d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 809b 	beq.w	800171a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d05c      	beq.n	80016aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d141      	bne.n	800167c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b4c      	ldr	r3, [pc, #304]	; (800172c <HAL_RCC_OscConfig+0x4ec>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb7b 	bl	8000cf8 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb77 	bl	8000cf8 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e081      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001618:	4b43      	ldr	r3, [pc, #268]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69da      	ldr	r2, [r3, #28]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	019b      	lsls	r3, r3, #6
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	3b01      	subs	r3, #1
 800163e:	041b      	lsls	r3, r3, #16
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	061b      	lsls	r3, r3, #24
 8001648:	4937      	ldr	r1, [pc, #220]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <HAL_RCC_OscConfig+0x4ec>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fb50 	bl	8000cf8 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff fb4c 	bl	8000cf8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e056      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x41c>
 800167a:	e04e      	b.n	800171a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_RCC_OscConfig+0x4ec>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb39 	bl	8000cf8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb35 	bl	8000cf8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e03f      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x44a>
 80016a8:	e037      	b.n	800171a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e032      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_RCC_OscConfig+0x4e8>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d028      	beq.n	8001716 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d121      	bne.n	8001716 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d11a      	bne.n	8001716 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d111      	bne.n	8001716 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	085b      	lsrs	r3, r3, #1
 80016fe:	3b01      	subs	r3, #1
 8001700:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d001      	beq.n	800171a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40007000 	.word	0x40007000
 8001728:	40023800 	.word	0x40023800
 800172c:	42470060 	.word	0x42470060

08001730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0cc      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d90c      	bls.n	800176c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d044      	beq.n	8001850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b3f      	ldr	r3, [pc, #252]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e067      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4934      	ldr	r1, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001820:	f7ff fa6a 	bl	8000cf8 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff fa66 	bl	8000cf8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d20c      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f922 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08005118 	.word	0x08005118
 80018f4:	20000010 	.word	0x20000010
 80018f8:	20000014 	.word	0x20000014

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	2300      	movs	r3, #0
 800190e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001914:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d00d      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x40>
 8001920:	2b08      	cmp	r3, #8
 8001922:	f200 80bd 	bhi.w	8001aa0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x34>
 800192a:	2b04      	cmp	r3, #4
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x3a>
 800192e:	e0b7      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001932:	60bb      	str	r3, [r7, #8]
       break;
 8001934:	e0b7      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001936:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001938:	60bb      	str	r3, [r7, #8]
      break;
 800193a:	e0b4      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001946:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d04d      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	461a      	mov	r2, r3
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	ea02 0800 	and.w	r8, r2, r0
 800196a:	ea03 0901 	and.w	r9, r3, r1
 800196e:	4640      	mov	r0, r8
 8001970:	4649      	mov	r1, r9
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	014b      	lsls	r3, r1, #5
 800197c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001980:	0142      	lsls	r2, r0, #5
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	ebb0 0008 	subs.w	r0, r0, r8
 800198a:	eb61 0109 	sbc.w	r1, r1, r9
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	018b      	lsls	r3, r1, #6
 8001998:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800199c:	0182      	lsls	r2, r0, #6
 800199e:	1a12      	subs	r2, r2, r0
 80019a0:	eb63 0301 	sbc.w	r3, r3, r1
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	00d9      	lsls	r1, r3, #3
 80019ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019b2:	00d0      	lsls	r0, r2, #3
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	eb12 0208 	adds.w	r2, r2, r8
 80019bc:	eb43 0309 	adc.w	r3, r3, r9
 80019c0:	f04f 0000 	mov.w	r0, #0
 80019c4:	f04f 0100 	mov.w	r1, #0
 80019c8:	0259      	lsls	r1, r3, #9
 80019ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019ce:	0250      	lsls	r0, r2, #9
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	461a      	mov	r2, r3
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	f7fe fbfe 	bl	80001e0 <__aeabi_uldivmod>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4613      	mov	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e04a      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ee:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	099b      	lsrs	r3, r3, #6
 80019f4:	461a      	mov	r2, r3
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	ea02 0400 	and.w	r4, r2, r0
 8001a06:	ea03 0501 	and.w	r5, r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	014b      	lsls	r3, r1, #5
 8001a18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a1c:	0142      	lsls	r2, r0, #5
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	1b00      	subs	r0, r0, r4
 8001a24:	eb61 0105 	sbc.w	r1, r1, r5
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	018b      	lsls	r3, r1, #6
 8001a32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a36:	0182      	lsls	r2, r0, #6
 8001a38:	1a12      	subs	r2, r2, r0
 8001a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3e:	f04f 0000 	mov.w	r0, #0
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	00d9      	lsls	r1, r3, #3
 8001a48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a4c:	00d0      	lsls	r0, r2, #3
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	1912      	adds	r2, r2, r4
 8001a54:	eb45 0303 	adc.w	r3, r5, r3
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	0299      	lsls	r1, r3, #10
 8001a62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a66:	0290      	lsls	r0, r2, #10
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	f7fe fbb2 	bl	80001e0 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	60bb      	str	r3, [r7, #8]
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001aa2:	60bb      	str	r3, [r7, #8]
      break;
 8001aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000010 	.word	0x20000010

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0a9b      	lsrs	r3, r3, #10
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4903      	ldr	r1, [pc, #12]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08005128 	.word	0x08005128

08001b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b04:	f7ff ffdc 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0b5b      	lsrs	r3, r3, #13
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08005128 	.word	0x08005128

08001b28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	220f      	movs	r2, #15
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_RCC_GetClockConfig+0x60>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0207 	and.w	r2, r3, #7
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	601a      	str	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e041      	b.n	8001c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f839 	bl	8001c2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f000 f9ca 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d001      	beq.n	8001c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e044      	b.n	8001ce2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d018      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x6c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c82:	d013      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x6c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00e      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x6c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d009      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x6c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <HAL_TIM_Base_Start_IT+0xbc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x6c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d111      	bne.n	8001cd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d010      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cce:	e007      	b.n	8001ce0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40000800 	.word	0x40000800
 8001cfc:	40000c00 	.word	0x40000c00
 8001d00:	40014000 	.word	0x40014000

08001d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d122      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d11b      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0202 	mvn.w	r2, #2
 8001d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8ee 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8e0 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8f1 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d122      	bne.n	8001db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d11b      	bne.n	8001db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0204 	mvn.w	r2, #4
 8001d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8c4 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8b6 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f8c7 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0208 	mvn.w	r2, #8
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f89a 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f88c 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f89d 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d122      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b10      	cmp	r3, #16
 8001e22:	d11b      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0210 	mvn.w	r2, #16
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2208      	movs	r2, #8
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f870 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f862 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f873 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0201 	mvn.w	r2, #1
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fdc0 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b80      	cmp	r3, #128	; 0x80
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8e2 	bl	8002078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	d107      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f838 	bl	8001f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0220 	mvn.w	r2, #32
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8ac 	bl	8002064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a34      	ldr	r2, [pc, #208]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00f      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f82:	d00b      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a31      	ldr	r2, [pc, #196]	; (800204c <TIM_Base_SetConfig+0xe8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a30      	ldr	r2, [pc, #192]	; (8002050 <TIM_Base_SetConfig+0xec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <TIM_Base_SetConfig+0xf0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a22      	ldr	r2, [pc, #136]	; (800204c <TIM_Base_SetConfig+0xe8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <TIM_Base_SetConfig+0xec>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <TIM_Base_SetConfig+0xf0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <TIM_Base_SetConfig+0xf4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	; (800205c <TIM_Base_SetConfig+0xf8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <TIM_Base_SetConfig+0xfc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40014000 	.word	0x40014000
 800205c:	40014400 	.word	0x40014400
 8002060:	40014800 	.word	0x40014800

08002064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e03f      	b.n	800211e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fcec 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	; 0x24
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f829 	bl	8002128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800212c:	b09f      	sub	sp, #124	; 0x7c
 800212e:	af00      	add	r7, sp, #0
 8002130:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800213c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213e:	68d9      	ldr	r1, [r3, #12]
 8002140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	ea40 0301 	orr.w	r3, r0, r1
 8002148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800214a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	431a      	orrs	r2, r3
 8002154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	431a      	orrs	r2, r3
 800215a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4313      	orrs	r3, r2
 8002160:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800216c:	f021 010c 	bic.w	r1, r1, #12
 8002170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002176:	430b      	orrs	r3, r1
 8002178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800217a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002186:	6999      	ldr	r1, [r3, #24]
 8002188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	ea40 0301 	orr.w	r3, r0, r1
 8002190:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4bc5      	ldr	r3, [pc, #788]	; (80024ac <UART_SetConfig+0x384>)
 8002198:	429a      	cmp	r2, r3
 800219a:	d004      	beq.n	80021a6 <UART_SetConfig+0x7e>
 800219c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4bc3      	ldr	r3, [pc, #780]	; (80024b0 <UART_SetConfig+0x388>)
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d103      	bne.n	80021ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021a6:	f7ff fcab 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 80021aa:	6778      	str	r0, [r7, #116]	; 0x74
 80021ac:	e002      	b.n	80021b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ae:	f7ff fc93 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 80021b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021bc:	f040 80b6 	bne.w	800232c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c2:	461c      	mov	r4, r3
 80021c4:	f04f 0500 	mov.w	r5, #0
 80021c8:	4622      	mov	r2, r4
 80021ca:	462b      	mov	r3, r5
 80021cc:	1891      	adds	r1, r2, r2
 80021ce:	6439      	str	r1, [r7, #64]	; 0x40
 80021d0:	415b      	adcs	r3, r3
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
 80021d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021d8:	1912      	adds	r2, r2, r4
 80021da:	eb45 0303 	adc.w	r3, r5, r3
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	00d9      	lsls	r1, r3, #3
 80021e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ec:	00d0      	lsls	r0, r2, #3
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	1911      	adds	r1, r2, r4
 80021f4:	6639      	str	r1, [r7, #96]	; 0x60
 80021f6:	416b      	adcs	r3, r5
 80021f8:	667b      	str	r3, [r7, #100]	; 0x64
 80021fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	461a      	mov	r2, r3
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	1891      	adds	r1, r2, r2
 8002206:	63b9      	str	r1, [r7, #56]	; 0x38
 8002208:	415b      	adcs	r3, r3
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800220c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002210:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002214:	f7fd ffe4 	bl	80001e0 <__aeabi_uldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4ba5      	ldr	r3, [pc, #660]	; (80024b4 <UART_SetConfig+0x38c>)
 800221e:	fba3 2302 	umull	r2, r3, r3, r2
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	011e      	lsls	r6, r3, #4
 8002226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002228:	461c      	mov	r4, r3
 800222a:	f04f 0500 	mov.w	r5, #0
 800222e:	4622      	mov	r2, r4
 8002230:	462b      	mov	r3, r5
 8002232:	1891      	adds	r1, r2, r2
 8002234:	6339      	str	r1, [r7, #48]	; 0x30
 8002236:	415b      	adcs	r3, r3
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
 800223a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800223e:	1912      	adds	r2, r2, r4
 8002240:	eb45 0303 	adc.w	r3, r5, r3
 8002244:	f04f 0000 	mov.w	r0, #0
 8002248:	f04f 0100 	mov.w	r1, #0
 800224c:	00d9      	lsls	r1, r3, #3
 800224e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002252:	00d0      	lsls	r0, r2, #3
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	1911      	adds	r1, r2, r4
 800225a:	65b9      	str	r1, [r7, #88]	; 0x58
 800225c:	416b      	adcs	r3, r5
 800225e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	461a      	mov	r2, r3
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	1891      	adds	r1, r2, r2
 800226c:	62b9      	str	r1, [r7, #40]	; 0x28
 800226e:	415b      	adcs	r3, r3
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002276:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800227a:	f7fd ffb1 	bl	80001e0 <__aeabi_uldivmod>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <UART_SetConfig+0x38c>)
 8002284:	fba3 1302 	umull	r1, r3, r3, r2
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	2164      	movs	r1, #100	; 0x64
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	3332      	adds	r3, #50	; 0x32
 8002296:	4a87      	ldr	r2, [pc, #540]	; (80024b4 <UART_SetConfig+0x38c>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022a4:	441e      	add	r6, r3
 80022a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a8:	4618      	mov	r0, r3
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	1894      	adds	r4, r2, r2
 80022b4:	623c      	str	r4, [r7, #32]
 80022b6:	415b      	adcs	r3, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022be:	1812      	adds	r2, r2, r0
 80022c0:	eb41 0303 	adc.w	r3, r1, r3
 80022c4:	f04f 0400 	mov.w	r4, #0
 80022c8:	f04f 0500 	mov.w	r5, #0
 80022cc:	00dd      	lsls	r5, r3, #3
 80022ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022d2:	00d4      	lsls	r4, r2, #3
 80022d4:	4622      	mov	r2, r4
 80022d6:	462b      	mov	r3, r5
 80022d8:	1814      	adds	r4, r2, r0
 80022da:	653c      	str	r4, [r7, #80]	; 0x50
 80022dc:	414b      	adcs	r3, r1
 80022de:	657b      	str	r3, [r7, #84]	; 0x54
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	461a      	mov	r2, r3
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	1891      	adds	r1, r2, r2
 80022ec:	61b9      	str	r1, [r7, #24]
 80022ee:	415b      	adcs	r3, r3
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022fa:	f7fd ff71 	bl	80001e0 <__aeabi_uldivmod>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <UART_SetConfig+0x38c>)
 8002304:	fba3 1302 	umull	r1, r3, r3, r2
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	2164      	movs	r1, #100	; 0x64
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	3332      	adds	r3, #50	; 0x32
 8002316:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <UART_SetConfig+0x38c>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	f003 0207 	and.w	r2, r3, #7
 8002322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4432      	add	r2, r6
 8002328:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800232a:	e0b9      	b.n	80024a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800232c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232e:	461c      	mov	r4, r3
 8002330:	f04f 0500 	mov.w	r5, #0
 8002334:	4622      	mov	r2, r4
 8002336:	462b      	mov	r3, r5
 8002338:	1891      	adds	r1, r2, r2
 800233a:	6139      	str	r1, [r7, #16]
 800233c:	415b      	adcs	r3, r3
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002344:	1912      	adds	r2, r2, r4
 8002346:	eb45 0303 	adc.w	r3, r5, r3
 800234a:	f04f 0000 	mov.w	r0, #0
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	00d9      	lsls	r1, r3, #3
 8002354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002358:	00d0      	lsls	r0, r2, #3
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	eb12 0804 	adds.w	r8, r2, r4
 8002362:	eb43 0905 	adc.w	r9, r3, r5
 8002366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	008b      	lsls	r3, r1, #2
 800237a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800237e:	0082      	lsls	r2, r0, #2
 8002380:	4640      	mov	r0, r8
 8002382:	4649      	mov	r1, r9
 8002384:	f7fd ff2c 	bl	80001e0 <__aeabi_uldivmod>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <UART_SetConfig+0x38c>)
 800238e:	fba3 2302 	umull	r2, r3, r3, r2
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	011e      	lsls	r6, r3, #4
 8002396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002398:	4618      	mov	r0, r3
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	1894      	adds	r4, r2, r2
 80023a4:	60bc      	str	r4, [r7, #8]
 80023a6:	415b      	adcs	r3, r3
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ae:	1812      	adds	r2, r2, r0
 80023b0:	eb41 0303 	adc.w	r3, r1, r3
 80023b4:	f04f 0400 	mov.w	r4, #0
 80023b8:	f04f 0500 	mov.w	r5, #0
 80023bc:	00dd      	lsls	r5, r3, #3
 80023be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023c2:	00d4      	lsls	r4, r2, #3
 80023c4:	4622      	mov	r2, r4
 80023c6:	462b      	mov	r3, r5
 80023c8:	1814      	adds	r4, r2, r0
 80023ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80023cc:	414b      	adcs	r3, r1
 80023ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	008b      	lsls	r3, r1, #2
 80023e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023e8:	0082      	lsls	r2, r0, #2
 80023ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023ee:	f7fd fef7 	bl	80001e0 <__aeabi_uldivmod>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <UART_SetConfig+0x38c>)
 80023f8:	fba3 1302 	umull	r1, r3, r3, r2
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	2164      	movs	r1, #100	; 0x64
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	3332      	adds	r3, #50	; 0x32
 800240a:	4a2a      	ldr	r2, [pc, #168]	; (80024b4 <UART_SetConfig+0x38c>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002416:	441e      	add	r6, r3
 8002418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241a:	4618      	mov	r0, r3
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	1894      	adds	r4, r2, r2
 8002426:	603c      	str	r4, [r7, #0]
 8002428:	415b      	adcs	r3, r3
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002430:	1812      	adds	r2, r2, r0
 8002432:	eb41 0303 	adc.w	r3, r1, r3
 8002436:	f04f 0400 	mov.w	r4, #0
 800243a:	f04f 0500 	mov.w	r5, #0
 800243e:	00dd      	lsls	r5, r3, #3
 8002440:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002444:	00d4      	lsls	r4, r2, #3
 8002446:	4622      	mov	r2, r4
 8002448:	462b      	mov	r3, r5
 800244a:	eb12 0a00 	adds.w	sl, r2, r0
 800244e:	eb43 0b01 	adc.w	fp, r3, r1
 8002452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	008b      	lsls	r3, r1, #2
 8002466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800246a:	0082      	lsls	r2, r0, #2
 800246c:	4650      	mov	r0, sl
 800246e:	4659      	mov	r1, fp
 8002470:	f7fd feb6 	bl	80001e0 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <UART_SetConfig+0x38c>)
 800247a:	fba3 1302 	umull	r1, r3, r3, r2
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2164      	movs	r1, #100	; 0x64
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	3332      	adds	r3, #50	; 0x32
 800248c:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <UART_SetConfig+0x38c>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4432      	add	r2, r6
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	377c      	adds	r7, #124	; 0x7c
 80024a4:	46bd      	mov	sp, r7
 80024a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024aa:	bf00      	nop
 80024ac:	40011000 	.word	0x40011000
 80024b0:	40011400 	.word	0x40011400
 80024b4:	51eb851f 	.word	0x51eb851f

080024b8 <__NVIC_SetPriority>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Handler+0x1c>)
 8002512:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002514:	f001 fcfe 	bl	8003f14 <xTaskGetSchedulerState>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800251e:	f002 fae3 	bl	8004ae8 <xPortSysTickHandler>
  }
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002530:	2100      	movs	r1, #0
 8002532:	f06f 0004 	mvn.w	r0, #4
 8002536:	f7ff ffbf 	bl	80024b8 <__NVIC_SetPriority>
#endif
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002546:	f3ef 8305 	mrs	r3, IPSR
 800254a:	603b      	str	r3, [r7, #0]
  return(result);
 800254c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002552:	f06f 0305 	mvn.w	r3, #5
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	e00c      	b.n	8002574 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <osKernelInitialize+0x44>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <osKernelInitialize+0x44>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002568:	2300      	movs	r3, #0
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	e002      	b.n	8002574 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002574:	687b      	ldr	r3, [r7, #4]
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000040 	.word	0x20000040

08002588 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800258e:	f3ef 8305 	mrs	r3, IPSR
 8002592:	603b      	str	r3, [r7, #0]
  return(result);
 8002594:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800259a:	f06f 0305 	mvn.w	r3, #5
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	e010      	b.n	80025c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <osKernelStart+0x48>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d109      	bne.n	80025be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025aa:	f7ff ffbf 	bl	800252c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <osKernelStart+0x48>)
 80025b0:	2202      	movs	r2, #2
 80025b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025b4:	f001 f866 	bl	8003684 <vTaskStartScheduler>
      stat = osOK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	e002      	b.n	80025c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025c4:	687b      	ldr	r3, [r7, #4]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000040 	.word	0x20000040

080025d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af04      	add	r7, sp, #16
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025e4:	f3ef 8305 	mrs	r3, IPSR
 80025e8:	617b      	str	r3, [r7, #20]
  return(result);
 80025ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d17e      	bne.n	80026ee <osThreadNew+0x11a>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d07b      	beq.n	80026ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80025fa:	2318      	movs	r3, #24
 80025fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d045      	beq.n	800269a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <osThreadNew+0x48>
        name = attr->name;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <osThreadNew+0x6e>
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b38      	cmp	r3, #56	; 0x38
 8002634:	d805      	bhi.n	8002642 <osThreadNew+0x6e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <osThreadNew+0x72>
        return (NULL);
 8002642:	2300      	movs	r3, #0
 8002644:	e054      	b.n	80026f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <osThreadNew+0xa8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b5b      	cmp	r3, #91	; 0x5b
 8002664:	d90a      	bls.n	800267c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <osThreadNew+0xa8>
        mem = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e010      	b.n	800269e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10c      	bne.n	800269e <osThreadNew+0xca>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <osThreadNew+0xca>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <osThreadNew+0xca>
          mem = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	e001      	b.n	800269e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d110      	bne.n	80026c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026ac:	9202      	str	r2, [sp, #8]
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fe0c 	bl	80032d8 <xTaskCreateStatic>
 80026c0:	4603      	mov	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	e013      	b.n	80026ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d110      	bne.n	80026ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fe57 	bl	8003392 <xTaskCreate>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <osThreadNew+0x11a>
            hTask = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026ee:	693b      	ldr	r3, [r7, #16]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002700:	f3ef 8305 	mrs	r3, IPSR
 8002704:	60bb      	str	r3, [r7, #8]
  return(result);
 8002706:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <osDelay+0x1c>
    stat = osErrorISR;
 800270c:	f06f 0305 	mvn.w	r3, #5
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	e007      	b.n	8002724 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <osDelay+0x2c>
      vTaskDelay(ticks);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 ff7c 	bl	800361c <vTaskDelay>
    }
  }

  return (stat);
 8002724:	68fb      	ldr	r3, [r7, #12]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a07      	ldr	r2, [pc, #28]	; (800275c <vApplicationGetIdleTaskMemory+0x2c>)
 8002740:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <vApplicationGetIdleTaskMemory+0x30>)
 8002746:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000044 	.word	0x20000044
 8002760:	200000a0 	.word	0x200000a0

08002764 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <vApplicationGetTimerTaskMemory+0x2c>)
 8002774:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <vApplicationGetTimerTaskMemory+0x30>)
 800277a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002782:	601a      	str	r2, [r3, #0]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	200002a0 	.word	0x200002a0
 8002794:	200002fc 	.word	0x200002fc

08002798 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f103 0208 	add.w	r2, r3, #8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f103 0208 	add.w	r2, r3, #8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f103 0208 	add.w	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	601a      	str	r2, [r3, #0]
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d103      	bne.n	800285a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e00c      	b.n	8002874 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3308      	adds	r3, #8
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e002      	b.n	8002868 <vListInsert+0x2e>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	429a      	cmp	r2, r3
 8002872:	d2f6      	bcs.n	8002862 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6852      	ldr	r2, [r2, #4]
 80028cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d103      	bne.n	80028e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	1e5a      	subs	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800292a:	f002 f84b 	bl	80049c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	68f9      	ldr	r1, [r7, #12]
 8002938:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	3b01      	subs	r3, #1
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	441a      	add	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	22ff      	movs	r2, #255	; 0xff
 800296e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	22ff      	movs	r2, #255	; 0xff
 8002976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d114      	bne.n	80029aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01a      	beq.n	80029be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3310      	adds	r3, #16
 800298c:	4618      	mov	r0, r3
 800298e:	f001 f903 	bl	8003b98 <xTaskRemoveFromEventList>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d012      	beq.n	80029be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <xQueueGenericReset+0xcc>)
 800299a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	e009      	b.n	80029be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3310      	adds	r3, #16
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fef2 	bl	8002798 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3324      	adds	r3, #36	; 0x24
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff feed 	bl	8002798 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029be:	f002 f831 	bl	8004a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	e000ed04 	.word	0xe000ed04

080029d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08e      	sub	sp, #56	; 0x38
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <xQueueGenericCreateStatic+0x52>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <xQueueGenericCreateStatic+0x56>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <xQueueGenericCreateStatic+0x58>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	623b      	str	r3, [r7, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <xQueueGenericCreateStatic+0x7e>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <xQueueGenericCreateStatic+0x82>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <xQueueGenericCreateStatic+0x84>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	61fb      	str	r3, [r7, #28]
}
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a6e:	2350      	movs	r3, #80	; 0x50
 8002a70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b50      	cmp	r3, #80	; 0x50
 8002a76:	d00a      	beq.n	8002a8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	61bb      	str	r3, [r7, #24]
}
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aa2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f805 	bl	8002ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3730      	adds	r7, #48	; 0x30
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e002      	b.n	8002ae2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002aee:	2101      	movs	r1, #1
 8002af0:	69b8      	ldr	r0, [r7, #24]
 8002af2:	f7ff ff05 	bl	8002900 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08e      	sub	sp, #56	; 0x38
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b16:	2300      	movs	r3, #0
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueGenericSend+0x32>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d103      	bne.n	8002b48 <xQueueGenericSend+0x40>
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <xQueueGenericSend+0x44>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <xQueueGenericSend+0x46>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <xQueueGenericSend+0x60>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b64:	bf00      	nop
 8002b66:	e7fe      	b.n	8002b66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d103      	bne.n	8002b76 <xQueueGenericSend+0x6e>
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <xQueueGenericSend+0x72>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xQueueGenericSend+0x74>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xQueueGenericSend+0x8e>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	623b      	str	r3, [r7, #32]
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b96:	f001 f9bd 	bl	8003f14 <xTaskGetSchedulerState>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <xQueueGenericSend+0x9e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <xQueueGenericSend+0xa2>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <xQueueGenericSend+0xa4>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	61fb      	str	r3, [r7, #28]
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bc6:	f001 fefd 	bl	80049c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <xQueueGenericSend+0xd4>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d129      	bne.n	8002c30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be2:	f000 fa0b 	bl	8002ffc <prvCopyDataToQueue>
 8002be6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	3324      	adds	r3, #36	; 0x24
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 ffcf 	bl	8003b98 <xTaskRemoveFromEventList>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <xQueueGenericSend+0x1f8>)
 8002c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	e00a      	b.n	8002c28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <xQueueGenericSend+0x1f8>)
 8002c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c28:	f001 fefc 	bl	8004a24 <vPortExitCritical>
				return pdPASS;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e063      	b.n	8002cf8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c36:	f001 fef5 	bl	8004a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e05c      	b.n	8002cf8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 f809 	bl	8003c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c52:	f001 fee7 	bl	8004a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c56:	f000 fd7b 	bl	8003750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c5a:	f001 feb3 	bl	80049c4 <vPortEnterCritical>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d103      	bne.n	8002c74 <xQueueGenericSend+0x16c>
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d103      	bne.n	8002c8a <xQueueGenericSend+0x182>
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c8a:	f001 fecb 	bl	8004a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c8e:	1d3a      	adds	r2, r7, #4
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fff8 	bl	8003c8c <xTaskCheckForTimeOut>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d124      	bne.n	8002cec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca4:	f000 faa2 	bl	80031ec <prvIsQueueFull>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 ff1e 	bl	8003af8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cbe:	f000 fa2d 	bl	800311c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cc2:	f000 fd53 	bl	800376c <xTaskResumeAll>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f47f af7c 	bne.w	8002bc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <xQueueGenericSend+0x1f8>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	e772      	b.n	8002bc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce2:	f000 fa1b 	bl	800311c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ce6:	f000 fd41 	bl	800376c <xTaskResumeAll>
 8002cea:	e76c      	b.n	8002bc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cee:	f000 fa15 	bl	800311c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cf2:	f000 fd3b 	bl	800376c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3738      	adds	r7, #56	; 0x38
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b090      	sub	sp, #64	; 0x40
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d103      	bne.n	8002d40 <xQueueGenericSendFromISR+0x3c>
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <xQueueGenericSendFromISR+0x40>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <xQueueGenericSendFromISR+0x42>
 8002d44:	2300      	movs	r3, #0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d103      	bne.n	8002d6e <xQueueGenericSendFromISR+0x6a>
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <xQueueGenericSendFromISR+0x6e>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <xQueueGenericSendFromISR+0x70>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	623b      	str	r3, [r7, #32]
}
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d8e:	f001 fefb 	bl	8004b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d92:	f3ef 8211 	mrs	r2, BASEPRI
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	61fa      	str	r2, [r7, #28]
 8002da8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002daa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <xQueueGenericSendFromISR+0xbc>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d12f      	bne.n	8002e20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dd6:	f000 f911 	bl	8002ffc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d112      	bne.n	8002e0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d016      	beq.n	8002e1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	3324      	adds	r3, #36	; 0x24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fed1 	bl	8003b98 <xTaskRemoveFromEventList>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e007      	b.n	8002e1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	b25a      	sxtb	r2, r3
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e1e:	e001      	b.n	8002e24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e26:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3740      	adds	r7, #64	; 0x40
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <xQueueReceive+0x30>
	__asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	623b      	str	r3, [r7, #32]
}
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <xQueueReceive+0x3e>
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <xQueueReceive+0x42>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <xQueueReceive+0x44>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <xQueueReceive+0x5e>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	61fb      	str	r3, [r7, #28]
}
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e9a:	f001 f83b 	bl	8003f14 <xTaskGetSchedulerState>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <xQueueReceive+0x6e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <xQueueReceive+0x72>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <xQueueReceive+0x74>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <xQueueReceive+0x8e>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	61bb      	str	r3, [r7, #24]
}
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eca:	f001 fd7b 	bl	80049c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01f      	beq.n	8002f1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ede:	f000 f8f7 	bl	80030d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00f      	beq.n	8002f12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	3310      	adds	r3, #16
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fe4e 	bl	8003b98 <xTaskRemoveFromEventList>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <xQueueReceive+0x1bc>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f12:	f001 fd87 	bl	8004a24 <vPortExitCritical>
				return pdPASS;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e069      	b.n	8002fee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f20:	f001 fd80 	bl	8004a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e062      	b.n	8002fee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fe94 	bl	8003c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f3c:	f001 fd72 	bl	8004a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f40:	f000 fc06 	bl	8003750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f44:	f001 fd3e 	bl	80049c4 <vPortEnterCritical>
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d103      	bne.n	8002f5e <xQueueReceive+0x122>
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d103      	bne.n	8002f74 <xQueueReceive+0x138>
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f74:	f001 fd56 	bl	8004a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f78:	1d3a      	adds	r2, r7, #4
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fe83 	bl	8003c8c <xTaskCheckForTimeOut>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d123      	bne.n	8002fd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f8e:	f000 f917 	bl	80031c0 <prvIsQueueEmpty>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	3324      	adds	r3, #36	; 0x24
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fda9 	bl	8003af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa8:	f000 f8b8 	bl	800311c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fac:	f000 fbde 	bl	800376c <xTaskResumeAll>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d189      	bne.n	8002eca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <xQueueReceive+0x1bc>)
 8002fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	e780      	b.n	8002eca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fca:	f000 f8a7 	bl	800311c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fce:	f000 fbcd 	bl	800376c <xTaskResumeAll>
 8002fd2:	e77a      	b.n	8002eca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fd6:	f000 f8a1 	bl	800311c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fda:	f000 fbc7 	bl	800376c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe0:	f000 f8ee 	bl	80031c0 <prvIsQueueEmpty>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f43f af6f 	beq.w	8002eca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3730      	adds	r7, #48	; 0x30
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000ed04 	.word	0xe000ed04

08002ffc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10d      	bne.n	8003036 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d14d      	bne.n	80030be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 ff92 	bl	8003f50 <xTaskPriorityDisinherit>
 800302c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	e043      	b.n	80030be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d119      	bne.n	8003070 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6858      	ldr	r0, [r3, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	461a      	mov	r2, r3
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	f001 ffec 	bl	8005024 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	441a      	add	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	429a      	cmp	r2, r3
 8003064:	d32b      	bcc.n	80030be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	e026      	b.n	80030be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68d8      	ldr	r0, [r3, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	461a      	mov	r2, r3
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	f001 ffd2 	bl	8005024 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	425b      	negs	r3, r3
 800308a:	441a      	add	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d207      	bcs.n	80030ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	425b      	negs	r3, r3
 80030a6:	441a      	add	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d105      	bne.n	80030be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030c6:	697b      	ldr	r3, [r7, #20]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d018      	beq.n	8003114 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	441a      	add	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d303      	bcc.n	8003104 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68d9      	ldr	r1, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	461a      	mov	r2, r3
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f001 ff88 	bl	8005024 <memcpy>
	}
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003124:	f001 fc4e 	bl	80049c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800312e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003130:	e011      	b.n	8003156 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d012      	beq.n	8003160 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3324      	adds	r3, #36	; 0x24
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fd2a 	bl	8003b98 <xTaskRemoveFromEventList>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800314a:	f000 fe01 	bl	8003d50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3b01      	subs	r3, #1
 8003152:	b2db      	uxtb	r3, r3
 8003154:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	dce9      	bgt.n	8003132 <prvUnlockQueue+0x16>
 800315e:	e000      	b.n	8003162 <prvUnlockQueue+0x46>
					break;
 8003160:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	22ff      	movs	r2, #255	; 0xff
 8003166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800316a:	f001 fc5b 	bl	8004a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800316e:	f001 fc29 	bl	80049c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003178:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800317a:	e011      	b.n	80031a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3310      	adds	r3, #16
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fd05 	bl	8003b98 <xTaskRemoveFromEventList>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003194:	f000 fddc 	bl	8003d50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003198:	7bbb      	ldrb	r3, [r7, #14]
 800319a:	3b01      	subs	r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	dce9      	bgt.n	800317c <prvUnlockQueue+0x60>
 80031a8:	e000      	b.n	80031ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	22ff      	movs	r2, #255	; 0xff
 80031b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031b4:	f001 fc36 	bl	8004a24 <vPortExitCritical>
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031c8:	f001 fbfc 	bl	80049c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e001      	b.n	80031de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031de:	f001 fc21 	bl	8004a24 <vPortExitCritical>

	return xReturn;
 80031e2:	68fb      	ldr	r3, [r7, #12]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031f4:	f001 fbe6 	bl	80049c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	429a      	cmp	r2, r3
 8003202:	d102      	bne.n	800320a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003204:	2301      	movs	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e001      	b.n	800320e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800320e:	f001 fc09 	bl	8004a24 <vPortExitCritical>

	return xReturn;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e014      	b.n	8003256 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800322c:	4a0f      	ldr	r2, [pc, #60]	; (800326c <vQueueAddToRegistry+0x50>)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <vQueueAddToRegistry+0x50>)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <vQueueAddToRegistry+0x50>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800324e:	e006      	b.n	800325e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3301      	adds	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b07      	cmp	r3, #7
 800325a:	d9e7      	bls.n	800322c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20004a0c 	.word	0x20004a0c

08003270 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003280:	f001 fba0 	bl	80049c4 <vPortEnterCritical>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328a:	b25b      	sxtb	r3, r3
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d103      	bne.n	800329a <vQueueWaitForMessageRestricted+0x2a>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d103      	bne.n	80032b0 <vQueueWaitForMessageRestricted+0x40>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b0:	f001 fbb8 	bl	8004a24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3324      	adds	r3, #36	; 0x24
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fc3b 	bl	8003b40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7ff ff26 	bl	800311c <prvUnlockQueue>
	}
 80032d0:	bf00      	nop
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08e      	sub	sp, #56	; 0x38
 80032dc:	af04      	add	r7, sp, #16
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <xTaskCreateStatic+0x2a>
	__asm volatile
 80032ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	623b      	str	r3, [r7, #32]
}
 80032fe:	bf00      	nop
 8003300:	e7fe      	b.n	8003300 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <xTaskCreateStatic+0x46>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	61fb      	str	r3, [r7, #28]
}
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800331e:	235c      	movs	r3, #92	; 0x5c
 8003320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b5c      	cmp	r3, #92	; 0x5c
 8003326:	d00a      	beq.n	800333e <xTaskCreateStatic+0x66>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	61bb      	str	r3, [r7, #24]
}
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800333e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01e      	beq.n	8003384 <xTaskCreateStatic+0xac>
 8003346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003354:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2202      	movs	r2, #2
 800335a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800335e:	2300      	movs	r3, #0
 8003360:	9303      	str	r3, [sp, #12]
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	9302      	str	r3, [sp, #8]
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f850 	bl	800341c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800337c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800337e:	f000 f8dd 	bl	800353c <prvAddNewTaskToReadyList>
 8003382:	e001      	b.n	8003388 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003388:	697b      	ldr	r3, [r7, #20]
	}
 800338a:	4618      	mov	r0, r3
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003392:	b580      	push	{r7, lr}
 8003394:	b08c      	sub	sp, #48	; 0x30
 8003396:	af04      	add	r7, sp, #16
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fc2e 	bl	8004c08 <pvPortMalloc>
 80033ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00e      	beq.n	80033d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033b4:	205c      	movs	r0, #92	; 0x5c
 80033b6:	f001 fc27 	bl	8004c08 <pvPortMalloc>
 80033ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
 80033c8:	e005      	b.n	80033d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033ca:	6978      	ldr	r0, [r7, #20]
 80033cc:	f001 fce8 	bl	8004da0 <vPortFree>
 80033d0:	e001      	b.n	80033d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d017      	beq.n	800340c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9303      	str	r3, [sp, #12]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	9302      	str	r3, [sp, #8]
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f80e 	bl	800341c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003400:	69f8      	ldr	r0, [r7, #28]
 8003402:	f000 f89b 	bl	800353c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003406:	2301      	movs	r3, #1
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	e002      	b.n	8003412 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003412:	69bb      	ldr	r3, [r7, #24]
	}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	461a      	mov	r2, r3
 8003434:	21a5      	movs	r1, #165	; 0xa5
 8003436:	f001 fe03 	bl	8005040 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003444:	3b01      	subs	r3, #1
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f023 0307 	bic.w	r3, r3, #7
 8003452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <prvInitialiseNewTask+0x58>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	617b      	str	r3, [r7, #20]
}
 8003470:	bf00      	nop
 8003472:	e7fe      	b.n	8003472 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01f      	beq.n	80034ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e012      	b.n	80034a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	7819      	ldrb	r1, [r3, #0]
 8003488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	3334      	adds	r3, #52	; 0x34
 8003490:	460a      	mov	r2, r1
 8003492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	3301      	adds	r3, #1
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	2b0f      	cmp	r3, #15
 80034aa:	d9e9      	bls.n	8003480 <prvInitialiseNewTask+0x64>
 80034ac:	e000      	b.n	80034b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80034ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b8:	e003      	b.n	80034c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	2b37      	cmp	r3, #55	; 0x37
 80034c6:	d901      	bls.n	80034cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034c8:	2337      	movs	r3, #55	; 0x37
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	2200      	movs	r2, #0
 80034dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	3304      	adds	r3, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f978 	bl	80027d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	3318      	adds	r3, #24
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f973 	bl	80027d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	2200      	movs	r2, #0
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	69b8      	ldr	r0, [r7, #24]
 800351c:	f001 f928 	bl	8004770 <pxPortInitialiseStack>
 8003520:	4602      	mov	r2, r0
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003532:	bf00      	nop
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003544:	f001 fa3e 	bl	80049c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003548:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <prvAddNewTaskToReadyList+0xc4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <prvAddNewTaskToReadyList+0xc4>)
 8003550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <prvAddNewTaskToReadyList+0xc8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800355a:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <prvAddNewTaskToReadyList+0xc8>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <prvAddNewTaskToReadyList+0xc4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d110      	bne.n	800358a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003568:	f000 fc16 	bl	8003d98 <prvInitialiseTaskLists>
 800356c:	e00d      	b.n	800358a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800356e:	4b26      	ldr	r3, [pc, #152]	; (8003608 <prvAddNewTaskToReadyList+0xcc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <prvAddNewTaskToReadyList+0xc8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	429a      	cmp	r2, r3
 8003582:	d802      	bhi.n	800358a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <prvAddNewTaskToReadyList+0xc8>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <prvAddNewTaskToReadyList+0xd0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3301      	adds	r3, #1
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <prvAddNewTaskToReadyList+0xd0>)
 8003592:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <prvAddNewTaskToReadyList+0xd0>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <prvAddNewTaskToReadyList+0xd4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d903      	bls.n	80035b0 <prvAddNewTaskToReadyList+0x74>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	4a18      	ldr	r2, [pc, #96]	; (8003610 <prvAddNewTaskToReadyList+0xd4>)
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <prvAddNewTaskToReadyList+0xd8>)
 80035be:	441a      	add	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f7ff f913 	bl	80027f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035cc:	f001 fa2a 	bl	8004a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <prvAddNewTaskToReadyList+0xcc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <prvAddNewTaskToReadyList+0xc8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d207      	bcs.n	80035f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <prvAddNewTaskToReadyList+0xdc>)
 80035e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000bd0 	.word	0x20000bd0
 8003604:	200006fc 	.word	0x200006fc
 8003608:	20000bdc 	.word	0x20000bdc
 800360c:	20000bec 	.word	0x20000bec
 8003610:	20000bd8 	.word	0x20000bd8
 8003614:	20000700 	.word	0x20000700
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d017      	beq.n	800365e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800362e:	4b13      	ldr	r3, [pc, #76]	; (800367c <vTaskDelay+0x60>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <vTaskDelay+0x30>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60bb      	str	r3, [r7, #8]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800364c:	f000 f880 	bl	8003750 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003650:	2100      	movs	r1, #0
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fcea 	bl	800402c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003658:	f000 f888 	bl	800376c <xTaskResumeAll>
 800365c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <vTaskDelay+0x64>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000bf8 	.word	0x20000bf8
 8003680:	e000ed04 	.word	0xe000ed04

08003684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003692:	463a      	mov	r2, r7
 8003694:	1d39      	adds	r1, r7, #4
 8003696:	f107 0308 	add.w	r3, r7, #8
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff f848 	bl	8002730 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	9202      	str	r2, [sp, #8]
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	460a      	mov	r2, r1
 80036b2:	4921      	ldr	r1, [pc, #132]	; (8003738 <vTaskStartScheduler+0xb4>)
 80036b4:	4821      	ldr	r0, [pc, #132]	; (800373c <vTaskStartScheduler+0xb8>)
 80036b6:	f7ff fe0f 	bl	80032d8 <xTaskCreateStatic>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a20      	ldr	r2, [pc, #128]	; (8003740 <vTaskStartScheduler+0xbc>)
 80036be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <vTaskStartScheduler+0xbc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036c8:	2301      	movs	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e001      	b.n	80036d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d102      	bne.n	80036de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036d8:	f000 fcfc 	bl	80040d4 <xTimerCreateTimerTask>
 80036dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d116      	bne.n	8003712 <vTaskStartScheduler+0x8e>
	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	613b      	str	r3, [r7, #16]
}
 80036f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <vTaskStartScheduler+0xc0>)
 80036fa:	f04f 32ff 	mov.w	r2, #4294967295
 80036fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <vTaskStartScheduler+0xc4>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <vTaskStartScheduler+0xc8>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800370c:	f001 f8b8 	bl	8004880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003710:	e00e      	b.n	8003730 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d10a      	bne.n	8003730 <vTaskStartScheduler+0xac>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	60fb      	str	r3, [r7, #12]
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <vTaskStartScheduler+0xaa>
}
 8003730:	bf00      	nop
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	08005094 	.word	0x08005094
 800373c:	08003d69 	.word	0x08003d69
 8003740:	20000bf4 	.word	0x20000bf4
 8003744:	20000bf0 	.word	0x20000bf0
 8003748:	20000bdc 	.word	0x20000bdc
 800374c:	20000bd4 	.word	0x20000bd4

08003750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <vTaskSuspendAll+0x18>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	4a03      	ldr	r2, [pc, #12]	; (8003768 <vTaskSuspendAll+0x18>)
 800375c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20000bf8 	.word	0x20000bf8

0800376c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800377a:	4b42      	ldr	r3, [pc, #264]	; (8003884 <xTaskResumeAll+0x118>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <xTaskResumeAll+0x2c>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	603b      	str	r3, [r7, #0]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003798:	f001 f914 	bl	80049c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800379c:	4b39      	ldr	r3, [pc, #228]	; (8003884 <xTaskResumeAll+0x118>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	4a38      	ldr	r2, [pc, #224]	; (8003884 <xTaskResumeAll+0x118>)
 80037a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a6:	4b37      	ldr	r3, [pc, #220]	; (8003884 <xTaskResumeAll+0x118>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d162      	bne.n	8003874 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <xTaskResumeAll+0x11c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d05e      	beq.n	8003874 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037b6:	e02f      	b.n	8003818 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b8:	4b34      	ldr	r3, [pc, #208]	; (800388c <xTaskResumeAll+0x120>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3318      	adds	r3, #24
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff f871 	bl	80028ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3304      	adds	r3, #4
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff f86c 	bl	80028ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <xTaskResumeAll+0x124>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d903      	bls.n	80037e8 <xTaskResumeAll+0x7c>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <xTaskResumeAll+0x124>)
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4a27      	ldr	r2, [pc, #156]	; (8003894 <xTaskResumeAll+0x128>)
 80037f6:	441a      	add	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f7fe fff7 	bl	80027f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <xTaskResumeAll+0x12c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <xTaskResumeAll+0x130>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <xTaskResumeAll+0x120>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1cb      	bne.n	80037b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003826:	f000 fb55 	bl	8003ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <xTaskResumeAll+0x134>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d010      	beq.n	8003858 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003836:	f000 f847 	bl	80038c8 <xTaskIncrementTick>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003840:	4b16      	ldr	r3, [pc, #88]	; (800389c <xTaskResumeAll+0x130>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3b01      	subs	r3, #1
 800384a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f1      	bne.n	8003836 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <xTaskResumeAll+0x134>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <xTaskResumeAll+0x130>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <xTaskResumeAll+0x138>)
 8003866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003874:	f001 f8d6 	bl	8004a24 <vPortExitCritical>

	return xAlreadyYielded;
 8003878:	68bb      	ldr	r3, [r7, #8]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000bf8 	.word	0x20000bf8
 8003888:	20000bd0 	.word	0x20000bd0
 800388c:	20000b90 	.word	0x20000b90
 8003890:	20000bd8 	.word	0x20000bd8
 8003894:	20000700 	.word	0x20000700
 8003898:	200006fc 	.word	0x200006fc
 800389c:	20000be4 	.word	0x20000be4
 80038a0:	20000be0 	.word	0x20000be0
 80038a4:	e000ed04 	.word	0xe000ed04

080038a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <xTaskGetTickCount+0x1c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038b4:	687b      	ldr	r3, [r7, #4]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000bd4 	.word	0x20000bd4

080038c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d2:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <xTaskIncrementTick+0x148>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 808f 	bne.w	80039fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038dc:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <xTaskIncrementTick+0x14c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038e4:	4a4b      	ldr	r2, [pc, #300]	; (8003a14 <xTaskIncrementTick+0x14c>)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d120      	bne.n	8003932 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038f0:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <xTaskIncrementTick+0x150>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <xTaskIncrementTick+0x48>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	603b      	str	r3, [r7, #0]
}
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <xTaskIncrementTick+0x46>
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <xTaskIncrementTick+0x150>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <xTaskIncrementTick+0x154>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a3f      	ldr	r2, [pc, #252]	; (8003a18 <xTaskIncrementTick+0x150>)
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <xTaskIncrementTick+0x154>)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <xTaskIncrementTick+0x158>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	4a3d      	ldr	r2, [pc, #244]	; (8003a20 <xTaskIncrementTick+0x158>)
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	f000 fad1 	bl	8003ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003932:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <xTaskIncrementTick+0x15c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	429a      	cmp	r2, r3
 800393a:	d349      	bcc.n	80039d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800393c:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <xTaskIncrementTick+0x150>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <xTaskIncrementTick+0x15c>)
 8003948:	f04f 32ff 	mov.w	r2, #4294967295
 800394c:	601a      	str	r2, [r3, #0]
					break;
 800394e:	e03f      	b.n	80039d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <xTaskIncrementTick+0x150>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d203      	bcs.n	8003970 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003968:	4a2e      	ldr	r2, [pc, #184]	; (8003a24 <xTaskIncrementTick+0x15c>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800396e:	e02f      	b.n	80039d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	3304      	adds	r3, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe ff99 	bl	80028ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3318      	adds	r3, #24
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe ff90 	bl	80028ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <xTaskIncrementTick+0x160>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d903      	bls.n	80039a0 <xTaskIncrementTick+0xd8>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <xTaskIncrementTick+0x160>)
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <xTaskIncrementTick+0x164>)
 80039ae:	441a      	add	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	4610      	mov	r0, r2
 80039b8:	f7fe ff1b 	bl	80027f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <xTaskIncrementTick+0x168>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d3b8      	bcc.n	800393c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039ca:	2301      	movs	r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ce:	e7b5      	b.n	800393c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <xTaskIncrementTick+0x168>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d6:	4915      	ldr	r1, [pc, #84]	; (8003a2c <xTaskIncrementTick+0x164>)
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d901      	bls.n	80039ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <xTaskIncrementTick+0x16c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e004      	b.n	8003a04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <xTaskIncrementTick+0x170>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <xTaskIncrementTick+0x170>)
 8003a02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a04:	697b      	ldr	r3, [r7, #20]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000bf8 	.word	0x20000bf8
 8003a14:	20000bd4 	.word	0x20000bd4
 8003a18:	20000b88 	.word	0x20000b88
 8003a1c:	20000b8c 	.word	0x20000b8c
 8003a20:	20000be8 	.word	0x20000be8
 8003a24:	20000bf0 	.word	0x20000bf0
 8003a28:	20000bd8 	.word	0x20000bd8
 8003a2c:	20000700 	.word	0x20000700
 8003a30:	200006fc 	.word	0x200006fc
 8003a34:	20000be4 	.word	0x20000be4
 8003a38:	20000be0 	.word	0x20000be0

08003a3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a42:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <vTaskSwitchContext+0xa8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a4a:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <vTaskSwitchContext+0xac>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a50:	e041      	b.n	8003ad6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <vTaskSwitchContext+0xac>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <vTaskSwitchContext+0xb0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e010      	b.n	8003a82 <vTaskSwitchContext+0x46>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <vTaskSwitchContext+0x40>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	607b      	str	r3, [r7, #4]
}
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <vTaskSwitchContext+0x3e>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	491b      	ldr	r1, [pc, #108]	; (8003af0 <vTaskSwitchContext+0xb4>)
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0e4      	beq.n	8003a60 <vTaskSwitchContext+0x24>
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <vTaskSwitchContext+0xb4>)
 8003aa2:	4413      	add	r3, r2
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d104      	bne.n	8003ac6 <vTaskSwitchContext+0x8a>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <vTaskSwitchContext+0xb8>)
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4a06      	ldr	r2, [pc, #24]	; (8003aec <vTaskSwitchContext+0xb0>)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6013      	str	r3, [r2, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000bf8 	.word	0x20000bf8
 8003ae8:	20000be4 	.word	0x20000be4
 8003aec:	20000bd8 	.word	0x20000bd8
 8003af0:	20000700 	.word	0x20000700
 8003af4:	200006fc 	.word	0x200006fc

08003af8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	60fb      	str	r3, [r7, #12]
}
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <vTaskPlaceOnEventList+0x44>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3318      	adds	r3, #24
 8003b24:	4619      	mov	r1, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe fe87 	bl	800283a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	6838      	ldr	r0, [r7, #0]
 8003b30:	f000 fa7c 	bl	800402c <prvAddCurrentTaskToDelayedList>
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200006fc 	.word	0x200006fc

08003b40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	617b      	str	r3, [r7, #20]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3318      	adds	r3, #24
 8003b6e:	4619      	mov	r1, r3
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7fe fe3e 	bl	80027f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68b8      	ldr	r0, [r7, #8]
 8003b86:	f000 fa51 	bl	800402c <prvAddCurrentTaskToDelayedList>
	}
 8003b8a:	bf00      	nop
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200006fc 	.word	0x200006fc

08003b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	60fb      	str	r3, [r7, #12]
}
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3318      	adds	r3, #24
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fe6f 	bl	80028ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <xTaskRemoveFromEventList+0xb0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11d      	bne.n	8003c12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fe66 	bl	80028ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <xTaskRemoveFromEventList+0xb4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d903      	bls.n	8003bf4 <xTaskRemoveFromEventList+0x5c>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <xTaskRemoveFromEventList+0xb4>)
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <xTaskRemoveFromEventList+0xb8>)
 8003c02:	441a      	add	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f7fe fdf1 	bl	80027f2 <vListInsertEnd>
 8003c10:	e005      	b.n	8003c1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3318      	adds	r3, #24
 8003c16:	4619      	mov	r1, r3
 8003c18:	480e      	ldr	r0, [pc, #56]	; (8003c54 <xTaskRemoveFromEventList+0xbc>)
 8003c1a:	f7fe fdea 	bl	80027f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <xTaskRemoveFromEventList+0xc0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d905      	bls.n	8003c38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <xTaskRemoveFromEventList+0xc4>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e001      	b.n	8003c3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c3c:	697b      	ldr	r3, [r7, #20]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000bf8 	.word	0x20000bf8
 8003c4c:	20000bd8 	.word	0x20000bd8
 8003c50:	20000700 	.word	0x20000700
 8003c54:	20000b90 	.word	0x20000b90
 8003c58:	200006fc 	.word	0x200006fc
 8003c5c:	20000be4 	.word	0x20000be4

08003c60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <vTaskInternalSetTimeOutState+0x24>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <vTaskInternalSetTimeOutState+0x28>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	20000be8 	.word	0x20000be8
 8003c88:	20000bd4 	.word	0x20000bd4

08003c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	613b      	str	r3, [r7, #16]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	60fb      	str	r3, [r7, #12]
}
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cce:	f000 fe79 	bl	80049c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <xTaskCheckForTimeOut+0xbc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d102      	bne.n	8003cf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e023      	b.n	8003d3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <xTaskCheckForTimeOut+0xc0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d007      	beq.n	8003d0e <xTaskCheckForTimeOut+0x82>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d302      	bcc.n	8003d0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	e015      	b.n	8003d3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d20b      	bcs.n	8003d30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1ad2      	subs	r2, r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff9b 	bl	8003c60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	e004      	b.n	8003d3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d3a:	f000 fe73 	bl	8004a24 <vPortExitCritical>

	return xReturn;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000bd4 	.word	0x20000bd4
 8003d4c:	20000be8 	.word	0x20000be8

08003d50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <vTaskMissedYield+0x14>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	20000be4 	.word	0x20000be4

08003d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d70:	f000 f852 	bl	8003e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <prvIdleTask+0x28>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d9f9      	bls.n	8003d70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <prvIdleTask+0x2c>)
 8003d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d8c:	e7f0      	b.n	8003d70 <prvIdleTask+0x8>
 8003d8e:	bf00      	nop
 8003d90:	20000700 	.word	0x20000700
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	e00c      	b.n	8003dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <prvInitialiseTaskLists+0x60>)
 8003db0:	4413      	add	r3, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fcf0 	bl	8002798 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b37      	cmp	r3, #55	; 0x37
 8003dc2:	d9ef      	bls.n	8003da4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dc4:	480d      	ldr	r0, [pc, #52]	; (8003dfc <prvInitialiseTaskLists+0x64>)
 8003dc6:	f7fe fce7 	bl	8002798 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dca:	480d      	ldr	r0, [pc, #52]	; (8003e00 <prvInitialiseTaskLists+0x68>)
 8003dcc:	f7fe fce4 	bl	8002798 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dd0:	480c      	ldr	r0, [pc, #48]	; (8003e04 <prvInitialiseTaskLists+0x6c>)
 8003dd2:	f7fe fce1 	bl	8002798 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dd6:	480c      	ldr	r0, [pc, #48]	; (8003e08 <prvInitialiseTaskLists+0x70>)
 8003dd8:	f7fe fcde 	bl	8002798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ddc:	480b      	ldr	r0, [pc, #44]	; (8003e0c <prvInitialiseTaskLists+0x74>)
 8003dde:	f7fe fcdb 	bl	8002798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <prvInitialiseTaskLists+0x78>)
 8003de4:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <prvInitialiseTaskLists+0x64>)
 8003de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <prvInitialiseTaskLists+0x7c>)
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <prvInitialiseTaskLists+0x68>)
 8003dec:	601a      	str	r2, [r3, #0]
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000700 	.word	0x20000700
 8003dfc:	20000b60 	.word	0x20000b60
 8003e00:	20000b74 	.word	0x20000b74
 8003e04:	20000b90 	.word	0x20000b90
 8003e08:	20000ba4 	.word	0x20000ba4
 8003e0c:	20000bbc 	.word	0x20000bbc
 8003e10:	20000b88 	.word	0x20000b88
 8003e14:	20000b8c 	.word	0x20000b8c

08003e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e1e:	e019      	b.n	8003e54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e20:	f000 fdd0 	bl	80049c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e24:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <prvCheckTasksWaitingTermination+0x50>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fd3b 	bl	80028ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <prvCheckTasksWaitingTermination+0x54>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <prvCheckTasksWaitingTermination+0x54>)
 8003e3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e4a:	f000 fdeb 	bl	8004a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f810 	bl	8003e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e1      	bne.n	8003e20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000ba4 	.word	0x20000ba4
 8003e6c:	20000bd0 	.word	0x20000bd0
 8003e70:	20000bb8 	.word	0x20000bb8

08003e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 ff88 	bl	8004da0 <vPortFree>
				vPortFree( pxTCB );
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 ff85 	bl	8004da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e96:	e018      	b.n	8003eca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d103      	bne.n	8003eaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 ff7c 	bl	8004da0 <vPortFree>
	}
 8003ea8:	e00f      	b.n	8003eca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d00a      	beq.n	8003eca <prvDeleteTCB+0x56>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <prvDeleteTCB+0x54>
	}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <prvResetNextTaskUnblockTime+0x38>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <prvResetNextTaskUnblockTime+0x3c>)
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eec:	e008      	b.n	8003f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eee:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <prvResetNextTaskUnblockTime+0x38>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <prvResetNextTaskUnblockTime+0x3c>)
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	20000b88 	.word	0x20000b88
 8003f10:	20000bf0 	.word	0x20000bf0

08003f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <xTaskGetSchedulerState+0x34>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f22:	2301      	movs	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	e008      	b.n	8003f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <xTaskGetSchedulerState+0x38>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f30:	2302      	movs	r3, #2
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	e001      	b.n	8003f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f3a:	687b      	ldr	r3, [r7, #4]
	}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	20000bdc 	.word	0x20000bdc
 8003f4c:	20000bf8 	.word	0x20000bf8

08003f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d056      	beq.n	8004014 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <xTaskPriorityDisinherit+0xd0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d00a      	beq.n	8003f86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	60fb      	str	r3, [r7, #12]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	60bb      	str	r3, [r7, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	e7fe      	b.n	8003fa2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa8:	1e5a      	subs	r2, r3, #1
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d02c      	beq.n	8004014 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d128      	bne.n	8004014 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fc70 	bl	80028ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <xTaskPriorityDisinherit+0xd4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d903      	bls.n	8003ff4 <xTaskPriorityDisinherit+0xa4>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <xTaskPriorityDisinherit+0xd4>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a09      	ldr	r2, [pc, #36]	; (8004028 <xTaskPriorityDisinherit+0xd8>)
 8004002:	441a      	add	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7fe fbf1 	bl	80027f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004014:	697b      	ldr	r3, [r7, #20]
	}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200006fc 	.word	0x200006fc
 8004024:	20000bd8 	.word	0x20000bd8
 8004028:	20000700 	.word	0x20000700

0800402c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004036:	4b21      	ldr	r3, [pc, #132]	; (80040bc <prvAddCurrentTaskToDelayedList+0x90>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3304      	adds	r3, #4
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fc32 	bl	80028ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d10a      	bne.n	8004066 <prvAddCurrentTaskToDelayedList+0x3a>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4819      	ldr	r0, [pc, #100]	; (80040c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004060:	f7fe fbc7 	bl	80027f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004064:	e026      	b.n	80040b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	429a      	cmp	r2, r3
 800407c:	d209      	bcs.n	8004092 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f7fe fbd5 	bl	800283a <vListInsert>
}
 8004090:	e010      	b.n	80040b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f7fe fbcb 	bl	800283a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d202      	bcs.n	80040b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000bd4 	.word	0x20000bd4
 80040c0:	200006fc 	.word	0x200006fc
 80040c4:	20000bbc 	.word	0x20000bbc
 80040c8:	20000b8c 	.word	0x20000b8c
 80040cc:	20000b88 	.word	0x20000b88
 80040d0:	20000bf0 	.word	0x20000bf0

080040d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040de:	f000 fb07 	bl	80046f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <xTimerCreateTimerTask+0x80>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d021      	beq.n	800412e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040f2:	1d3a      	adds	r2, r7, #4
 80040f4:	f107 0108 	add.w	r1, r7, #8
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fb31 	bl	8002764 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	9202      	str	r2, [sp, #8]
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	2302      	movs	r3, #2
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	460a      	mov	r2, r1
 8004114:	4910      	ldr	r1, [pc, #64]	; (8004158 <xTimerCreateTimerTask+0x84>)
 8004116:	4811      	ldr	r0, [pc, #68]	; (800415c <xTimerCreateTimerTask+0x88>)
 8004118:	f7ff f8de 	bl	80032d8 <xTaskCreateStatic>
 800411c:	4603      	mov	r3, r0
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <xTimerCreateTimerTask+0x8c>)
 8004120:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <xTimerCreateTimerTask+0x8c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800412a:	2301      	movs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	613b      	str	r3, [r7, #16]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800414a:	697b      	ldr	r3, [r7, #20]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000c2c 	.word	0x20000c2c
 8004158:	0800509c 	.word	0x0800509c
 800415c:	08004299 	.word	0x08004299
 8004160:	20000c30 	.word	0x20000c30

08004164 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004172:	2300      	movs	r3, #0
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <xTimerGenericCommand+0x2e>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	623b      	str	r3, [r7, #32]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004192:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <xTimerGenericCommand+0x98>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d02a      	beq.n	80041f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	dc18      	bgt.n	80041de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041ac:	f7ff feb2 	bl	8003f14 <xTaskGetSchedulerState>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d109      	bne.n	80041ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <xTimerGenericCommand+0x98>)
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	f107 0110 	add.w	r1, r7, #16
 80041be:	2300      	movs	r3, #0
 80041c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c2:	f7fe fca1 	bl	8002b08 <xQueueGenericSend>
 80041c6:	6278      	str	r0, [r7, #36]	; 0x24
 80041c8:	e012      	b.n	80041f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <xTimerGenericCommand+0x98>)
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	f107 0110 	add.w	r1, r7, #16
 80041d2:	2300      	movs	r3, #0
 80041d4:	2200      	movs	r2, #0
 80041d6:	f7fe fc97 	bl	8002b08 <xQueueGenericSend>
 80041da:	6278      	str	r0, [r7, #36]	; 0x24
 80041dc:	e008      	b.n	80041f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <xTimerGenericCommand+0x98>)
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	f107 0110 	add.w	r1, r7, #16
 80041e6:	2300      	movs	r3, #0
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	f7fe fd8b 	bl	8002d04 <xQueueGenericSendFromISR>
 80041ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3728      	adds	r7, #40	; 0x28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000c2c 	.word	0x20000c2c

08004200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <prvProcessExpiredTimer+0x94>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3304      	adds	r3, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe fb47 	bl	80028ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d022      	beq.n	8004272 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	18d1      	adds	r1, r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f000 f8d1 	bl	80043e0 <prvInsertTimerInActiveList>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01f      	beq.n	8004284 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004244:	2300      	movs	r3, #0
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2300      	movs	r3, #0
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	2100      	movs	r1, #0
 800424e:	6978      	ldr	r0, [r7, #20]
 8004250:	f7ff ff88 	bl	8004164 <xTimerGenericCommand>
 8004254:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d113      	bne.n	8004284 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	60fb      	str	r3, [r7, #12]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	6978      	ldr	r0, [r7, #20]
 800428a:	4798      	blx	r3
}
 800428c:	bf00      	nop
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000c24 	.word	0x20000c24

08004298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f857 	bl	8004358 <prvGetNextExpireTime>
 80042aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4619      	mov	r1, r3
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f803 	bl	80042bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042b6:	f000 f8d5 	bl	8004464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042ba:	e7f1      	b.n	80042a0 <prvTimerTask+0x8>

080042bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042c6:	f7ff fa43 	bl	8003750 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f866 	bl	80043a0 <prvSampleTimeNow>
 80042d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d130      	bne.n	800433e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <prvProcessTimerOrBlockTask+0x3c>
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d806      	bhi.n	80042f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042ea:	f7ff fa3f 	bl	800376c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff85 	bl	8004200 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042f6:	e024      	b.n	8004342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <prvProcessTimerOrBlockTask+0x90>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <prvProcessTimerOrBlockTask+0x50>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <prvProcessTimerOrBlockTask+0x52>
 800430c:	2300      	movs	r3, #0
 800430e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <prvProcessTimerOrBlockTask+0x94>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	f7fe ffa7 	bl	8003270 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004322:	f7ff fa23 	bl	800376c <xTaskResumeAll>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <prvProcessTimerOrBlockTask+0x98>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
}
 800433c:	e001      	b.n	8004342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800433e:	f7ff fa15 	bl	800376c <xTaskResumeAll>
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000c28 	.word	0x20000c28
 8004350:	20000c2c 	.word	0x20000c2c
 8004354:	e000ed04 	.word	0xe000ed04

08004358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <prvGetNextExpireTime+0x44>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <prvGetNextExpireTime+0x16>
 800436a:	2201      	movs	r2, #1
 800436c:	e000      	b.n	8004370 <prvGetNextExpireTime+0x18>
 800436e:	2200      	movs	r2, #0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <prvGetNextExpireTime+0x44>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e001      	b.n	800438c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800438c:	68fb      	ldr	r3, [r7, #12]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000c24 	.word	0x20000c24

080043a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80043a8:	f7ff fa7e 	bl	80038a8 <xTaskGetTickCount>
 80043ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <prvSampleTimeNow+0x3c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d205      	bcs.n	80043c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043b8:	f000 f936 	bl	8004628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e002      	b.n	80043ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043ca:	4a04      	ldr	r2, [pc, #16]	; (80043dc <prvSampleTimeNow+0x3c>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000c34 	.word	0x20000c34

080043e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d812      	bhi.n	800442c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	d302      	bcc.n	800441a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004414:	2301      	movs	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e01b      	b.n	8004452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <prvInsertTimerInActiveList+0x7c>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7fe fa08 	bl	800283a <vListInsert>
 800442a:	e012      	b.n	8004452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d206      	bcs.n	8004442 <prvInsertTimerInActiveList+0x62>
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d302      	bcc.n	8004442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800443c:	2301      	movs	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e007      	b.n	8004452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <prvInsertTimerInActiveList+0x80>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3304      	adds	r3, #4
 800444a:	4619      	mov	r1, r3
 800444c:	4610      	mov	r0, r2
 800444e:	f7fe f9f4 	bl	800283a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004452:	697b      	ldr	r3, [r7, #20]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000c28 	.word	0x20000c28
 8004460:	20000c24 	.word	0x20000c24

08004464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08e      	sub	sp, #56	; 0x38
 8004468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800446a:	e0ca      	b.n	8004602 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	da18      	bge.n	80044a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	3304      	adds	r3, #4
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	61fb      	str	r3, [r7, #28]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449a:	6850      	ldr	r0, [r2, #4]
 800449c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449e:	6892      	ldr	r2, [r2, #8]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f2c0 80aa 	blt.w	8004600 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe f9f5 	bl	80028ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044c2:	463b      	mov	r3, r7
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff6b 	bl	80043a0 <prvSampleTimeNow>
 80044ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	f200 8097 	bhi.w	8004602 <prvProcessReceivedCommands+0x19e>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <prvProcessReceivedCommands+0x78>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004505 	.word	0x08004505
 80044e0:	08004505 	.word	0x08004505
 80044e4:	08004505 	.word	0x08004505
 80044e8:	08004579 	.word	0x08004579
 80044ec:	0800458d 	.word	0x0800458d
 80044f0:	080045d7 	.word	0x080045d7
 80044f4:	08004505 	.word	0x08004505
 80044f8:	08004505 	.word	0x08004505
 80044fc:	08004579 	.word	0x08004579
 8004500:	0800458d 	.word	0x0800458d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	b2da      	uxtb	r2, r3
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	18d1      	adds	r1, r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004524:	f7ff ff5c 	bl	80043e0 <prvInsertTimerInActiveList>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d069      	beq.n	8004602 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004534:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05e      	beq.n	8004602 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	441a      	add	r2, r3
 800454c:	2300      	movs	r3, #0
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	2100      	movs	r1, #0
 8004554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004556:	f7ff fe05 	bl	8004164 <xTimerGenericCommand>
 800455a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d14f      	bne.n	8004602 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	61bb      	str	r3, [r7, #24]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	b2da      	uxtb	r2, r3
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800458a:	e03a      	b.n	8004602 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	617b      	str	r3, [r7, #20]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	18d1      	adds	r1, r2, r3
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d0:	f7ff ff06 	bl	80043e0 <prvInsertTimerInActiveList>
					break;
 80045d4:	e015      	b.n	8004602 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80045e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e6:	f000 fbdb 	bl	8004da0 <vPortFree>
 80045ea:	e00a      	b.n	8004602 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045fe:	e000      	b.n	8004602 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004600:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <prvProcessReceivedCommands+0x1c0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	1d39      	adds	r1, r7, #4
 8004608:	2200      	movs	r2, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fc16 	bl	8002e3c <xQueueReceive>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	f47f af2a 	bne.w	800446c <prvProcessReceivedCommands+0x8>
	}
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3730      	adds	r7, #48	; 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000c2c 	.word	0x20000c2c

08004628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800462e:	e048      	b.n	80046c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3304      	adds	r3, #4
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe f92f 	bl	80028ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02e      	beq.n	80046c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d90e      	bls.n	8004694 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004682:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fe f8d4 	bl	800283a <vListInsert>
 8004692:	e016      	b.n	80046c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2300      	movs	r3, #0
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	2100      	movs	r1, #0
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fd60 	bl	8004164 <xTimerGenericCommand>
 80046a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	603b      	str	r3, [r7, #0]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1b1      	bne.n	8004630 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <prvSwitchTimerLists+0xc4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 80046d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046da:	4a04      	ldr	r2, [pc, #16]	; (80046ec <prvSwitchTimerLists+0xc4>)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000c24 	.word	0x20000c24
 80046ec:	20000c28 	.word	0x20000c28

080046f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80046f6:	f000 f965 	bl	80049c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <prvCheckForValidListAndQueue+0x60>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d120      	bne.n	8004744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004702:	4814      	ldr	r0, [pc, #80]	; (8004754 <prvCheckForValidListAndQueue+0x64>)
 8004704:	f7fe f848 	bl	8002798 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004708:	4813      	ldr	r0, [pc, #76]	; (8004758 <prvCheckForValidListAndQueue+0x68>)
 800470a:	f7fe f845 	bl	8002798 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <prvCheckForValidListAndQueue+0x6c>)
 8004710:	4a10      	ldr	r2, [pc, #64]	; (8004754 <prvCheckForValidListAndQueue+0x64>)
 8004712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <prvCheckForValidListAndQueue+0x70>)
 8004716:	4a10      	ldr	r2, [pc, #64]	; (8004758 <prvCheckForValidListAndQueue+0x68>)
 8004718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800471a:	2300      	movs	r3, #0
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <prvCheckForValidListAndQueue+0x74>)
 8004720:	4a11      	ldr	r2, [pc, #68]	; (8004768 <prvCheckForValidListAndQueue+0x78>)
 8004722:	2110      	movs	r1, #16
 8004724:	200a      	movs	r0, #10
 8004726:	f7fe f953 	bl	80029d0 <xQueueGenericCreateStatic>
 800472a:	4603      	mov	r3, r0
 800472c:	4a08      	ldr	r2, [pc, #32]	; (8004750 <prvCheckForValidListAndQueue+0x60>)
 800472e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <prvCheckForValidListAndQueue+0x60>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <prvCheckForValidListAndQueue+0x60>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	490b      	ldr	r1, [pc, #44]	; (800476c <prvCheckForValidListAndQueue+0x7c>)
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fd6c 	bl	800321c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004744:	f000 f96e 	bl	8004a24 <vPortExitCritical>
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000c2c 	.word	0x20000c2c
 8004754:	20000bfc 	.word	0x20000bfc
 8004758:	20000c10 	.word	0x20000c10
 800475c:	20000c24 	.word	0x20000c24
 8004760:	20000c28 	.word	0x20000c28
 8004764:	20000cd8 	.word	0x20000cd8
 8004768:	20000c38 	.word	0x20000c38
 800476c:	080050a4 	.word	0x080050a4

08004770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b04      	subs	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b04      	subs	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f023 0201 	bic.w	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3b04      	subs	r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047a0:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <pxPortInitialiseStack+0x64>)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b14      	subs	r3, #20
 80047aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3b04      	subs	r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f06f 0202 	mvn.w	r2, #2
 80047be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b20      	subs	r3, #32
 80047c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047c6:	68fb      	ldr	r3, [r7, #12]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	080047d9 	.word	0x080047d9

080047d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <prvTaskExitError+0x54>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d00a      	beq.n	8004802 <prvTaskExitError+0x2a>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60fb      	str	r3, [r7, #12]
}
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <prvTaskExitError+0x28>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60bb      	str	r3, [r7, #8]
}
 8004814:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004816:	bf00      	nop
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0fc      	beq.n	8004818 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	2000001c 	.word	0x2000001c

08004830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <pxCurrentTCBConst2>)
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	6808      	ldr	r0, [r1, #0]
 8004836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483a:	f380 8809 	msr	PSP, r0
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8811 	msr	BASEPRI, r0
 800484a:	4770      	bx	lr
 800484c:	f3af 8000 	nop.w

08004850 <pxCurrentTCBConst2>:
 8004850:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop

08004858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <prvPortStartFirstTask+0x24>)
 800485a:	6800      	ldr	r0, [r0, #0]
 800485c:	6800      	ldr	r0, [r0, #0]
 800485e:	f380 8808 	msr	MSP, r0
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8814 	msr	CONTROL, r0
 800486a:	b662      	cpsie	i
 800486c:	b661      	cpsie	f
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	df00      	svc	0
 8004878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800487a:	bf00      	nop
 800487c:	e000ed08 	.word	0xe000ed08

08004880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004886:	4b46      	ldr	r3, [pc, #280]	; (80049a0 <xPortStartScheduler+0x120>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a46      	ldr	r2, [pc, #280]	; (80049a4 <xPortStartScheduler+0x124>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10a      	bne.n	80048a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	613b      	str	r3, [r7, #16]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048a6:	4b3e      	ldr	r3, [pc, #248]	; (80049a0 <xPortStartScheduler+0x120>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3f      	ldr	r2, [pc, #252]	; (80049a8 <xPortStartScheduler+0x128>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10a      	bne.n	80048c6 <xPortStartScheduler+0x46>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048c6:	4b39      	ldr	r3, [pc, #228]	; (80049ac <xPortStartScheduler+0x12c>)
 80048c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	22ff      	movs	r2, #255	; 0xff
 80048d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <xPortStartScheduler+0x130>)
 80048ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048ee:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <xPortStartScheduler+0x134>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048f4:	e009      	b.n	800490a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80048f6:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <xPortStartScheduler+0x134>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	4a2d      	ldr	r2, [pc, #180]	; (80049b4 <xPortStartScheduler+0x134>)
 80048fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	b2db      	uxtb	r3, r3
 8004908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d0ef      	beq.n	80048f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <xPortStartScheduler+0x134>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f1c3 0307 	rsb	r3, r3, #7
 800491e:	2b04      	cmp	r3, #4
 8004920:	d00a      	beq.n	8004938 <xPortStartScheduler+0xb8>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60bb      	str	r3, [r7, #8]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004938:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <xPortStartScheduler+0x134>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <xPortStartScheduler+0x134>)
 8004940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <xPortStartScheduler+0x134>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800494a:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <xPortStartScheduler+0x134>)
 800494c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004956:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <xPortStartScheduler+0x138>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <xPortStartScheduler+0x138>)
 800495c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004962:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <xPortStartScheduler+0x138>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a14      	ldr	r2, [pc, #80]	; (80049b8 <xPortStartScheduler+0x138>)
 8004968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800496c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800496e:	f000 f8dd 	bl	8004b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <xPortStartScheduler+0x13c>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004978:	f000 f8fc 	bl	8004b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <xPortStartScheduler+0x140>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <xPortStartScheduler+0x140>)
 8004982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004988:	f7ff ff66 	bl	8004858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800498c:	f7ff f856 	bl	8003a3c <vTaskSwitchContext>
	prvTaskExitError();
 8004990:	f7ff ff22 	bl	80047d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	e000ed00 	.word	0xe000ed00
 80049a4:	410fc271 	.word	0x410fc271
 80049a8:	410fc270 	.word	0x410fc270
 80049ac:	e000e400 	.word	0xe000e400
 80049b0:	20000d28 	.word	0x20000d28
 80049b4:	20000d2c 	.word	0x20000d2c
 80049b8:	e000ed20 	.word	0xe000ed20
 80049bc:	2000001c 	.word	0x2000001c
 80049c0:	e000ef34 	.word	0xe000ef34

080049c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	607b      	str	r3, [r7, #4]
}
 80049dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049de:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <vPortEnterCritical+0x58>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <vPortEnterCritical+0x58>)
 80049e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <vPortEnterCritical+0x58>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d10f      	bne.n	8004a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <vPortEnterCritical+0x5c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	603b      	str	r3, [r7, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <vPortEnterCritical+0x4a>
	}
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	2000001c 	.word	0x2000001c
 8004a20:	e000ed04 	.word	0xe000ed04

08004a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <vPortExitCritical+0x50>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <vPortExitCritical+0x24>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	607b      	str	r3, [r7, #4]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <vPortExitCritical+0x50>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <vPortExitCritical+0x50>)
 8004a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <vPortExitCritical+0x50>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <vPortExitCritical+0x42>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f383 8811 	msr	BASEPRI, r3
}
 8004a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000001c 	.word	0x2000001c
	...

08004a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a80:	f3ef 8009 	mrs	r0, PSP
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <pxCurrentTCBConst>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	f01e 0f10 	tst.w	lr, #16
 8004a90:	bf08      	it	eq
 8004a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9a:	6010      	str	r0, [r2, #0]
 8004a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004aa4:	f380 8811 	msr	BASEPRI, r0
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f7fe ffc4 	bl	8003a3c <vTaskSwitchContext>
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f380 8811 	msr	BASEPRI, r0
 8004abc:	bc09      	pop	{r0, r3}
 8004abe:	6819      	ldr	r1, [r3, #0]
 8004ac0:	6808      	ldr	r0, [r1, #0]
 8004ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac6:	f01e 0f10 	tst.w	lr, #16
 8004aca:	bf08      	it	eq
 8004acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ad0:	f380 8809 	msr	PSP, r0
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	f3af 8000 	nop.w

08004ae0 <pxCurrentTCBConst>:
 8004ae0:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	607b      	str	r3, [r7, #4]
}
 8004b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b02:	f7fe fee1 	bl	80038c8 <xTaskIncrementTick>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <xPortSysTickHandler+0x40>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	2300      	movs	r3, #0
 8004b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f383 8811 	msr	BASEPRI, r3
}
 8004b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <vPortSetupTimerInterrupt+0x34>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <vPortSetupTimerInterrupt+0x38>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <vPortSetupTimerInterrupt+0x3c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <vPortSetupTimerInterrupt+0x40>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <vPortSetupTimerInterrupt+0x44>)
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <vPortSetupTimerInterrupt+0x34>)
 8004b50:	2207      	movs	r2, #7
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	e000e010 	.word	0xe000e010
 8004b64:	e000e018 	.word	0xe000e018
 8004b68:	20000010 	.word	0x20000010
 8004b6c:	10624dd3 	.word	0x10624dd3
 8004b70:	e000e014 	.word	0xe000e014

08004b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b84 <vPortEnableVFP+0x10>
 8004b78:	6801      	ldr	r1, [r0, #0]
 8004b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b7e:	6001      	str	r1, [r0, #0]
 8004b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b82:	bf00      	nop
 8004b84:	e000ed88 	.word	0xe000ed88

08004b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b8e:	f3ef 8305 	mrs	r3, IPSR
 8004b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	d914      	bls.n	8004bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <vPortValidateInterruptPriority+0x70>)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ba4:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <vPortValidateInterruptPriority+0x74>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	7afa      	ldrb	r2, [r7, #11]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d20a      	bcs.n	8004bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <vPortValidateInterruptPriority+0x78>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <vPortValidateInterruptPriority+0x7c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d90a      	bls.n	8004bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	603b      	str	r3, [r7, #0]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <vPortValidateInterruptPriority+0x60>
	}
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	e000e3f0 	.word	0xe000e3f0
 8004bfc:	20000d28 	.word	0x20000d28
 8004c00:	e000ed0c 	.word	0xe000ed0c
 8004c04:	20000d2c 	.word	0x20000d2c

08004c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c14:	f7fe fd9c 	bl	8003750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c18:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <pvPortMalloc+0x180>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c20:	f000 f920 	bl	8004e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c24:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <pvPortMalloc+0x184>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8093 	bne.w	8004d58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01d      	beq.n	8004c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c38:	2208      	movs	r2, #8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d014      	beq.n	8004c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f023 0307 	bic.w	r3, r3, #7
 8004c50:	3308      	adds	r3, #8
 8004c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <pvPortMalloc+0x6c>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	617b      	str	r3, [r7, #20]
}
 8004c70:	bf00      	nop
 8004c72:	e7fe      	b.n	8004c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d06e      	beq.n	8004d58 <pvPortMalloc+0x150>
 8004c7a:	4b45      	ldr	r3, [pc, #276]	; (8004d90 <pvPortMalloc+0x188>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d869      	bhi.n	8004d58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c84:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <pvPortMalloc+0x18c>)
 8004c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c88:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <pvPortMalloc+0x18c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c8e:	e004      	b.n	8004c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d903      	bls.n	8004cac <pvPortMalloc+0xa4>
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f1      	bne.n	8004c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cac:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <pvPortMalloc+0x180>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d050      	beq.n	8004d58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2208      	movs	r2, #8
 8004cbc:	4413      	add	r3, r2
 8004cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1ad2      	subs	r2, r2, r3
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d91f      	bls.n	8004d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <pvPortMalloc+0xf8>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	613b      	str	r3, [r7, #16]
}
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	1ad2      	subs	r2, r2, r3
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d12:	69b8      	ldr	r0, [r7, #24]
 8004d14:	f000 f908 	bl	8004f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d18:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <pvPortMalloc+0x188>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	4a1b      	ldr	r2, [pc, #108]	; (8004d90 <pvPortMalloc+0x188>)
 8004d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d26:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <pvPortMalloc+0x188>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <pvPortMalloc+0x190>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d203      	bcs.n	8004d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d32:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <pvPortMalloc+0x188>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <pvPortMalloc+0x190>)
 8004d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <pvPortMalloc+0x184>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d4e:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <pvPortMalloc+0x194>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <pvPortMalloc+0x194>)
 8004d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d58:	f7fe fd08 	bl	800376c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <pvPortMalloc+0x174>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	60fb      	str	r3, [r7, #12]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <pvPortMalloc+0x172>
	return pvReturn;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3728      	adds	r7, #40	; 0x28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20004938 	.word	0x20004938
 8004d8c:	2000494c 	.word	0x2000494c
 8004d90:	2000493c 	.word	0x2000493c
 8004d94:	20004930 	.word	0x20004930
 8004d98:	20004940 	.word	0x20004940
 8004d9c:	20004944 	.word	0x20004944

08004da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d04d      	beq.n	8004e4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004db2:	2308      	movs	r3, #8
 8004db4:	425b      	negs	r3, r3
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <vPortFree+0xb8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <vPortFree+0x44>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	60fb      	str	r3, [r7, #12]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <vPortFree+0x62>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60bb      	str	r3, [r7, #8]
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <vPortFree+0xb8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01e      	beq.n	8004e4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11a      	bne.n	8004e4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <vPortFree+0xb8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e28:	f7fe fc92 	bl	8003750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <vPortFree+0xbc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <vPortFree+0xbc>)
 8004e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e3a:	6938      	ldr	r0, [r7, #16]
 8004e3c:	f000 f874 	bl	8004f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <vPortFree+0xc0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a06      	ldr	r2, [pc, #24]	; (8004e60 <vPortFree+0xc0>)
 8004e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e4a:	f7fe fc8f 	bl	800376c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	2000494c 	.word	0x2000494c
 8004e5c:	2000493c 	.word	0x2000493c
 8004e60:	20004948 	.word	0x20004948

08004e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e70:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <prvHeapInit+0xac>)
 8004e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3307      	adds	r3, #7
 8004e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0307 	bic.w	r3, r3, #7
 8004e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	4a1f      	ldr	r2, [pc, #124]	; (8004f10 <prvHeapInit+0xac>)
 8004e94:	4413      	add	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <prvHeapInit+0xb0>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <prvHeapInit+0xb0>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4413      	add	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0307 	bic.w	r3, r3, #7
 8004ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <prvHeapInit+0xb4>)
 8004ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <prvHeapInit+0xb4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ece:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <prvHeapInit+0xb4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	1ad2      	subs	r2, r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <prvHeapInit+0xb4>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <prvHeapInit+0xb8>)
 8004ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <prvHeapInit+0xbc>)
 8004efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <prvHeapInit+0xc0>)
 8004efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	20000d30 	.word	0x20000d30
 8004f14:	20004930 	.word	0x20004930
 8004f18:	20004938 	.word	0x20004938
 8004f1c:	20004940 	.word	0x20004940
 8004f20:	2000493c 	.word	0x2000493c
 8004f24:	2000494c 	.word	0x2000494c

08004f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f30:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <prvInsertBlockIntoFreeList+0xac>)
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e002      	b.n	8004f3c <prvInsertBlockIntoFreeList+0x14>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d8f7      	bhi.n	8004f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d108      	bne.n	8004f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	441a      	add	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	441a      	add	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d118      	bne.n	8004fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d00d      	beq.n	8004fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e008      	b.n	8004fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e003      	b.n	8004fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d002      	beq.n	8004fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20004930 	.word	0x20004930
 8004fd8:	20004938 	.word	0x20004938

08004fdc <__libc_init_array>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	4d0d      	ldr	r5, [pc, #52]	; (8005014 <__libc_init_array+0x38>)
 8004fe0:	4c0d      	ldr	r4, [pc, #52]	; (8005018 <__libc_init_array+0x3c>)
 8004fe2:	1b64      	subs	r4, r4, r5
 8004fe4:	10a4      	asrs	r4, r4, #2
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	42a6      	cmp	r6, r4
 8004fea:	d109      	bne.n	8005000 <__libc_init_array+0x24>
 8004fec:	4d0b      	ldr	r5, [pc, #44]	; (800501c <__libc_init_array+0x40>)
 8004fee:	4c0c      	ldr	r4, [pc, #48]	; (8005020 <__libc_init_array+0x44>)
 8004ff0:	f000 f82e 	bl	8005050 <_init>
 8004ff4:	1b64      	subs	r4, r4, r5
 8004ff6:	10a4      	asrs	r4, r4, #2
 8004ff8:	2600      	movs	r6, #0
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	d105      	bne.n	800500a <__libc_init_array+0x2e>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	f855 3b04 	ldr.w	r3, [r5], #4
 8005004:	4798      	blx	r3
 8005006:	3601      	adds	r6, #1
 8005008:	e7ee      	b.n	8004fe8 <__libc_init_array+0xc>
 800500a:	f855 3b04 	ldr.w	r3, [r5], #4
 800500e:	4798      	blx	r3
 8005010:	3601      	adds	r6, #1
 8005012:	e7f2      	b.n	8004ffa <__libc_init_array+0x1e>
 8005014:	08005138 	.word	0x08005138
 8005018:	08005138 	.word	0x08005138
 800501c:	08005138 	.word	0x08005138
 8005020:	0800513c 	.word	0x0800513c

08005024 <memcpy>:
 8005024:	440a      	add	r2, r1
 8005026:	4291      	cmp	r1, r2
 8005028:	f100 33ff 	add.w	r3, r0, #4294967295
 800502c:	d100      	bne.n	8005030 <memcpy+0xc>
 800502e:	4770      	bx	lr
 8005030:	b510      	push	{r4, lr}
 8005032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503a:	4291      	cmp	r1, r2
 800503c:	d1f9      	bne.n	8005032 <memcpy+0xe>
 800503e:	bd10      	pop	{r4, pc}

08005040 <memset>:
 8005040:	4402      	add	r2, r0
 8005042:	4603      	mov	r3, r0
 8005044:	4293      	cmp	r3, r2
 8005046:	d100      	bne.n	800504a <memset+0xa>
 8005048:	4770      	bx	lr
 800504a:	f803 1b01 	strb.w	r1, [r3], #1
 800504e:	e7f9      	b.n	8005044 <memset+0x4>

08005050 <_init>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr

0800505c <_fini>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	bf00      	nop
 8005060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005062:	bc08      	pop	{r3}
 8005064:	469e      	mov	lr, r3
 8005066:	4770      	bx	lr
